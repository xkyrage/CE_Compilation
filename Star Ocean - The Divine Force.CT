<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="42">
  <CheatEntries>
    <CheatEntry>
      <ID>115852</ID>
      <Description>"Star Ocean: The Divine Force - v1.0 - Steam"</Description>
      <Options moHideChildren="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end
  if(getCEVersion() &lt; 7.4) then
    ShowMessage('Warning! CE version should be 7.4 or above')
  end
local pr1 = 'SO6.exe'
OpenProcess("SO6.exe")
  if process ~= pr1 then
    ShowMessage('The process SO6.exe is NOT found!')
    error()
  end

{$asm}
//LuaCall(function cycleFullCompact(sender,force) local state = not(compactmenuitem.Caption == 'Compact View Mode'); if force~=nil then state = not force end; compactmenuitem.Caption = state and 'Compact View Mode' or 'Full View Mode'; getMainForm().Splitter1.Visible = state; getMainForm().Panel4.Visible    = state; getMainForm().Panel5.Visible    = state; end; function addCompactMenu() if compactmenualreadyexists then return end; local parent = getMainForm().Menu.Items; compactmenuitem = createMenuItem(parent); parent.add(compactmenuitem); compactmenuitem.Caption = 'Compact View Mode'; compactmenuitem.OnClick = cycleFullCompact; compactmenualreadyexists = 'yes'; end; addCompactMenu(); cycleFullCompact(nil,true))
[DISABLE]

 //LuaCall(cycleFullCompact(nil,false))
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>115853</ID>
          <Description>"CompactMode"</Description>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
LuaCall(function cycleFullCompact(sender,force) local state = not(compactmenuitem.Caption == 'Compact View Mode'); if force~=nil then state = not force end; compactmenuitem.Caption = state and 'Compact View Mode' or 'Full View Mode'; getMainForm().Splitter1.Visible = state; getMainForm().Panel4.Visible    = state; getMainForm().Panel5.Visible    = state; end; function addCompactMenu() if compactmenualreadyexists then return end; local parent = getMainForm().Menu.Items; compactmenuitem = createMenuItem(parent); parent.add(compactmenuitem); compactmenuitem.Caption = 'Compact View Mode'; compactmenuitem.OnClick = cycleFullCompact; compactmenualreadyexists = 'yes'; end; addCompactMenu(); cycleFullCompact(nil,true))

[DISABLE]
LuaCall(cycleFullCompact(nil,false))
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>116215</ID>
          <Description>"Working Cheats"</Description>
          <Options moHideChildren="1"/>
          <Color>FF0000</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>44</ID>
              <Description>"Battle"</Description>
              <Options moHideChildren="1"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>115813</ID>
                  <Description>"One Hit Kill"</Description>
                  <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{  Game Executable   : SO6.exe
   Author            : Tuuup!
   Executable Version: 1.0.0.0
   Script Date       : 2022-10-29

   Used with permission.
}
[ENABLE]
aobscanmodule(usermanager,SO6.exe,48 8B 59 08 49 8B C8 E8 CA)
registersymbol(usermanager usermanagerbkp ucomp)
alloc(newmem,128,usermanager)
label(return ucomp)
label(usermanagerbkp)
newmem:

  mov rbx,[rcx+08]
  mov [ucomp],rbx
  mov rcx,r8
  jmp return
  
usermanagerbkp:
readmem(usermanager,7)
ucomp:
dq 0
usermanager:
  jmp newmem
  nop 2
return:

[DISABLE]
usermanager:
 // db 48 8B 59 08 49 8B C8
readmem(usermanagerbkp,7)
unregistersymbol(*)
dealloc(*)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe.xtext+408A1E

SO6.exe.xtext+4089CF: CC                    - int 3 
SO6.exe.xtext+4089D0: 48 8B 49 08           - mov rcx,[rcx+08]
SO6.exe.xtext+4089D4: E9 0F DE F9 FF        - jmp SO6.exe.xtext+3A67E8
SO6.exe.xtext+4089D9: CC                    - int 3 
SO6.exe.xtext+4089DA: CC                    - int 3 
SO6.exe.xtext+4089DB: CC                    - int 3 
SO6.exe.xtext+4089DC: 48 8B 49 08           - mov rcx,[rcx+08]
SO6.exe.xtext+4089E0: E9 43 A2 FE FF        - jmp SO6.exe.xtext+3F2C28
SO6.exe.xtext+4089E5: CC                    - int 3 
SO6.exe.xtext+4089E6: CC                    - int 3 
SO6.exe.xtext+4089E7: CC                    - int 3 
SO6.exe.xtext+4089E8: 40 53                 - push rbx
SO6.exe.xtext+4089EA: 48 83 EC 20           - sub rsp,20
SO6.exe.xtext+4089EE: 48 8B 59 08           - mov rbx,[rcx+08]
SO6.exe.xtext+4089F2: 49 8B C8              - mov rcx,r8
SO6.exe.xtext+4089F5: E8 FA 81 C6 FF        - call SO6.exe.xtext+70BF4
SO6.exe.xtext+4089FA: 0F 28 C8              - movaps xmm1,xmm0
SO6.exe.xtext+4089FD: 48 8B CB              - mov rcx,rbx
SO6.exe.xtext+408A00: 48 83 C4 20           - add rsp,20
SO6.exe.xtext+408A04: 5B                    - pop rbx
SO6.exe.xtext+408A05: E9 46 58 D6 FF        - jmp SO6.exe.xtext+16E250
SO6.exe.xtext+408A0A: CC                    - int 3 
SO6.exe.xtext+408A0B: CC                    - int 3 
SO6.exe.xtext+408A0C: 48 8B 49 08           - mov rcx,[rcx+08]
SO6.exe.xtext+408A10: E9 17 42 EE FF        - jmp SO6.exe.xtext+2ECC2C
SO6.exe.xtext+408A15: CC                    - int 3 
SO6.exe.xtext+408A16: CC                    - int 3 
SO6.exe.xtext+408A17: CC                    - int 3 
SO6.exe.xtext+408A18: 40 53                 - push rbx
SO6.exe.xtext+408A1A: 48 83 EC 20           - sub rsp,20
// ---------- INJECTING HERE ----------
SO6.exe.xtext+408A1E: 48 8B 59 08           - mov rbx,[rcx+08]
// ---------- DONE INJECTING  ----------
SO6.exe.xtext+408A22: 49 8B C8              - mov rcx,r8
SO6.exe.xtext+408A25: E8 CA 81 C6 FF        - call SO6.exe.xtext+70BF4
SO6.exe.xtext+408A2A: 0F 28 C8              - movaps xmm1,xmm0
SO6.exe.xtext+408A2D: 48 8B CB              - mov rcx,rbx
SO6.exe.xtext+408A30: 48 83 C4 20           - add rsp,20
SO6.exe.xtext+408A34: 5B                    - pop rbx
SO6.exe.xtext+408A35: E9 BE 52 CA FF        - jmp SO6.exe.xtext+ADCF8
SO6.exe.xtext+408A3A: CC                    - int 3 
SO6.exe.xtext+408A3B: CC                    - int 3 
SO6.exe.xtext+408A3C: 48 8B 49 08           - mov rcx,[rcx+08]
SO6.exe.xtext+408A40: E9 BF C1 DC FF        - jmp SO6.exe.xtext+1D4C04
SO6.exe.xtext+408A45: CC                    - int 3 
SO6.exe.xtext+408A46: CC                    - int 3 
SO6.exe.xtext+408A47: CC                    - int 3 
SO6.exe.xtext+408A48: 48 8B 49 08           - mov rcx,[rcx+08]
SO6.exe.xtext+408A4C: E9 CB 98 F8 FF        - jmp SO6.exe.xtext+39231C
SO6.exe.xtext+408A51: CC                    - int 3 
SO6.exe.xtext+408A52: CC                    - int 3 
SO6.exe.xtext+408A53: CC                    - int 3 
SO6.exe.xtext+408A54: 48 8B 49 08           - mov rcx,[rcx+08]
SO6.exe.xtext+408A58: E9 53 AF FB FF        - jmp SO6.exe.xtext+3C39B0
SO6.exe.xtext+408A5D: CC                    - int 3 
SO6.exe.xtext+408A5E: CC                    - int 3 
SO6.exe.xtext+408A5F: CC                    - int 3 
SO6.exe.xtext+408A60: 40 53                 - push rbx
SO6.exe.xtext+408A62: 48 83 EC 20           - sub rsp,20
SO6.exe.xtext+408A66: 48 8B D9              - mov rbx,rcx
SO6.exe.xtext+408A69: 48 8B 49 08           - mov rcx,[rcx+08]
SO6.exe.xtext+408A6D: 48 8B 91 60 2A 00 00  - mov rdx,[rcx+00002A60]
SO6.exe.xtext+408A74: 48 85 D2              - test rdx,rdx
}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>115814</ID>
                      <Description>"Enable"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{  Game Executable   : SO6.exe
   Author            : Tuuup!
   Executable Version: 1.0.0.0
   Script Date       : 2022-10-29
}
[ENABLE]
aobscanmodule(playerstuff,SO6.exe,83 78 10 00 0F 9E C0)
registersymbol(playerstuff playerstuffbkp ohk)
alloc(newmem,128,playerstuff)
label(return enemy ohk)
label(playerstuffbkp)
newmem:
cmp r8,[ucomp]
jne enemy
  cmp dword ptr [rax+10],00
  setle al
  jmp return
enemy:
//cmp [ohk],1
//jne @f
cmp [rax+10],1
jle @f
mov [rax+10],1
@@:
  cmp dword ptr [rax+10],00
  setle al
  jmp return
  
playerstuffbkp:
readmem(playerstuff,7)
ohk:
 dd #0
playerstuff:
  jmp newmem
  nop 2
return:

[DISABLE]
playerstuff:
 // db 83 78 10 00 0F 9E C0
readmem(playerstuffbkp,7)
unregistersymbol(*)
dealloc(*)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe.xtext+176D71

SO6.exe.xtext+176CE5: 48 8D 44 24 20        - lea rax,[rsp+20]
SO6.exe.xtext+176CEA: 48 8B 00              - mov rax,[rax]
SO6.exe.xtext+176CED: 48 3B C7              - cmp rax,rdi
SO6.exe.xtext+176CF0: 0F 85 EA 38 85 00     - jne SO6.exe.xtext+9CA5E0
SO6.exe.xtext+176CF6: 48 8D 83 E0 07 00 00  - lea rax,[rbx+000007E0]
SO6.exe.xtext+176CFD: E9 64 FF FF FF        - jmp SO6.exe.xtext+176C66
SO6.exe.xtext+176D02: 48 8B 89 20 58 00 00  - mov rcx,[rcx+00005820]
SO6.exe.xtext+176D09: E9 1E FF FF FF        - jmp SO6.exe.xtext+176C2C
SO6.exe.xtext+176D0E: 48 89 44 24 20        - mov [rsp+20],rax
SO6.exe.xtext+176D13: 48 89 4C 24 28        - mov [rsp+28],rcx
SO6.exe.xtext+176D18: EB CB                 - jmp SO6.exe.xtext+176CE5
SO6.exe.xtext+176D1A: 48 8B 01              - mov rax,[rcx]
SO6.exe.xtext+176D1D: FF 50 08              - call qword ptr [rax+08]
SO6.exe.xtext+176D20: 48 85 C0              - test rax,rax
SO6.exe.xtext+176D23: 0F 84 B8 FE FF FF     - je SO6.exe.xtext+176BE1
SO6.exe.xtext+176D29: 44 8B 8B 88 61 00 00  - mov r9d,[rbx+00006188]
SO6.exe.xtext+176D30: 45 85 C9              - test r9d,r9d
SO6.exe.xtext+176D33: 0F 89 69 38 85 00     - jns SO6.exe.xtext+9CA5A2
SO6.exe.xtext+176D39: 4C 8B 8B 80 61 00 00  - mov r9,[rbx+00006180]
SO6.exe.xtext+176D40: 4D 85 C9              - test r9,r9
SO6.exe.xtext+176D43: 0F 84 98 FE FF FF     - je SO6.exe.xtext+176BE1
SO6.exe.xtext+176D49: 48 8B C8              - mov rcx,rax
SO6.exe.xtext+176D4C: E8 43 42 93 00        - call SO6.exe.xtext+AAAF94
SO6.exe.xtext+176D51: 49 8B D1              - mov rdx,r9
SO6.exe.xtext+176D54: 48 8B C8              - mov rcx,rax
SO6.exe.xtext+176D57: E8 F4 C3 EE FF        - call SO6.exe.xtext+63150
SO6.exe.xtext+176D5C: 48 89 83 90 61 00 00  - mov [rbx+00006190],rax
SO6.exe.xtext+176D63: E9 79 FE FF FF        - jmp SO6.exe.xtext+176BE1
SO6.exe.xtext+176D68: 48 83 EC 28           - sub rsp,28
SO6.exe.xtext+176D6C: E8 0F 00 00 00        - call SO6.exe.xtext+176D80
// ---------- INJECTING HERE ----------
SO6.exe.xtext+176D71: 83 78 10 00           - cmp dword ptr [rax+10],00
// ---------- DONE INJECTING  ----------
SO6.exe.xtext+176D75: 0F 9E C0              - setle al
SO6.exe.xtext+176D78: 48 83 C4 28           - add rsp,28
SO6.exe.xtext+176D7C: C3                    - ret 
SO6.exe.xtext+176D7D: CC                    - int 3 
SO6.exe.xtext+176D7E: CC                    - int 3 
SO6.exe.xtext+176D7F: CC                    - int 3 
SO6.exe.xtext+176D80: 48 89 5C 24 10        - mov [rsp+10],rbx
SO6.exe.xtext+176D85: 48 89 6C 24 18        - mov [rsp+18],rbp
SO6.exe.xtext+176D8A: 48 89 74 24 20        - mov [rsp+20],rsi
SO6.exe.xtext+176D8F: 57                    - push rdi
SO6.exe.xtext+176D90: 48 83 EC 40           - sub rsp,40
SO6.exe.xtext+176D94: 48 8B 05 BD DA 73 01  - mov rax,[SO6.exe.rsrc+1858]
SO6.exe.xtext+176D9B: 48 33 C4              - xor rax,rsp
SO6.exe.xtext+176D9E: 48 89 44 24 38        - mov [rsp+38],rax
SO6.exe.xtext+176DA3: 33 F6                 - xor esi,esi
SO6.exe.xtext+176DA5: 48 8B D9              - mov rbx,rcx
SO6.exe.xtext+176DA8: 48 81 C1 78 61 00 00  - add rcx,00006178
SO6.exe.xtext+176DAF: 8B FE                 - mov edi,esi
SO6.exe.xtext+176DB1: 8D 6E 04              - lea ebp,[rsi+04]
SO6.exe.xtext+176DB4: 48 39 B3 90 61 00 00  - cmp [rbx+00006190],rsi
SO6.exe.xtext+176DBB: 0F 84 36 01 00 00     - je SO6.exe.xtext+176EF7
SO6.exe.xtext+176DC1: 48 8B 8B 90 61 00 00  - mov rcx,[rbx+00006190]
SO6.exe.xtext+176DC8: 48 85 C9              - test rcx,rcx
SO6.exe.xtext+176DCB: 74 1C                 - je SO6.exe.xtext+176DE9
SO6.exe.xtext+176DCD: 48 63 01              - movsxd  rax,dword ptr [rcx]
SO6.exe.xtext+176DD0: 48 8B D1              - mov rdx,rcx
SO6.exe.xtext+176DD3: 48 2B D0              - sub rdx,rax
SO6.exe.xtext+176DD6: 66 3B 2A              - cmp bp,[rdx]
SO6.exe.xtext+176DD9: 73 0E                 - jae SO6.exe.xtext+176DE9
SO6.exe.xtext+176DDB: 66 39 72 04           - cmp [rdx+04],si
}
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>51</ID>
                  <Description>"No Food Decrease"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : SO6.exe
  Author : Anon-9

  This script says NOP to wasting food buffs.

  Used with permission.
}

[ENABLE]

aobscanmodule(fNoFoodBuffDecrease,SO6.exe,FF 8F F8 53 07 00) // should be unique
alloc(newmem,16,fNoFoodBuffDecrease)


newmem:
readmem(fNoFoodBuffDecrease,6)


fNoFoodBuffDecrease:
  nop 6
registersymbol(fNoFoodBuffDecrease)

[DISABLE]

fNoFoodBuffDecrease:
readmem(fFoodBuffMemory,6)
  //db FF 8F F8 53 07 00

unregistersymbol(fNoFoodBuffDecrease)
dealloc(newmem)
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>106</ID>
                  <Description>"No HP Decrease"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{  Game Executable   : SO6.exe
   Author            : Tuuup!
   Executable Version: 1.0.0.0
   Script Date       : 2022-10-28

   Used with permission.
}
[ENABLE]
aobscanmodule(infhealth,SO6.exe,F3 0F 2C 41 24 66)
registersymbol(infhealth infhealthbkp)
alloc(newmem,128,infhealth)
label(return)
label(infhealthbkp)
newmem:

  cvttss2si eax,[rcx+24] // max hp
  mov [rcx+10],eax // cur hp
  jmp return

infhealthbkp:
readmem(infhealth,5)

infhealth:
  jmp newmem
return:

[DISABLE]
infhealth:
 // db F3 0F 2C 41 24
readmem(infhealthbkp,5)
unregistersymbol(*)
dealloc(*)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe.xtext+7934B

SO6.exe.xtext+79330: 0F 84 BC 00 00 00        - je SO6.exe.xtext+793F2
SO6.exe.xtext+79336: 48 8B 77 F8              - mov rsi,[rdi-08]
SO6.exe.xtext+7933A: 48 85 F6                 - test rsi,rsi
SO6.exe.xtext+7933D: 74 62                    - je SO6.exe.xtext+793A1
SO6.exe.xtext+7933F: 48 8B 4B 10              - mov rcx,[rbx+10]
SO6.exe.xtext+79343: 45 8A F5                 - mov r14l,r13l
SO6.exe.xtext+79346: F3 0F 10 46 40           - movss xmm0,[rsi+40]
// ---------- INJECTING HERE ----------
SO6.exe.xtext+7934B: F3 0F 2C 41 24           - cvttss2si eax,[rcx+24]
// ---------- DONE INJECTING  ----------
SO6.exe.xtext+79350: 66 0F 6E 49 10           - movd xmm1,[rcx+10]
SO6.exe.xtext+79355: 0F 5B C9                 - cvtdq2ps xmm1,xmm1
SO6.exe.xtext+79358: 66 0F 6E F0              - movd xmm6,eax
SO6.exe.xtext+7935C: 0F 2E C1                 - ucomiss xmm0,xmm1
SO6.exe.xtext+7935F: 0F 5B F6                 - cvtdq2ps xmm6,xmm6
SO6.exe.xtext+79362: 0F 8A 5C 02 00 00        - jp SO6.exe.xtext+795C4
SO6.exe.xtext+79368: 0F 85 56 02 00 00        - jne SO6.exe.xtext+795C4
SO6.exe.xtext+7936E: F3 0F 10 46 44           - movss xmm0,[rsi+44]
SO6.exe.xtext+79373: 0F 2E C6                 - ucomiss xmm0,xmm6
SO6.exe.xtext+79376: 0F 8A 21 02 00 00        - jp SO6.exe.xtext+7959D
SO6.exe.xtext+7937C: 0F 85 1B 02 00 00        - jne SO6.exe.xtext+7959D
SO6.exe.xtext+79382: 45 84 F6                 - test r14l,r14l
SO6.exe.xtext+79385: 0F 85 2A 02 00 00        - jne SO6.exe.xtext+795B5

}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>43</ID>
                  <Description>"No AP Decrease"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : SO6.exe
  Version: 
  Date   : 2022-10-28
  Author : asmor

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(APAOB,SO6.exe,F3 0F 5C C7 0F 2F F0 77) // should be unique
alloc(newmem,$1000,APAOB)

label(code)
label(return)

newmem:

code:
  // subss xmm0,xmm7
  comiss xmm6,xmm0
  jmp return

APAOB:
  jmp newmem
  nop 2
return:
registersymbol(APAOB)

[DISABLE]

APAOB:
  db F3 0F 5C C7 0F 2F F0

unregistersymbol(APAOB)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe+3E1FE35

SO6.exe+3E1FE10: E8 0F 58 35 FC        - call SO6.exe+175624
SO6.exe+3E1FE15: 48 85 C0              - test rax,rax
SO6.exe+3E1FE18: 74 16                 - je SO6.exe+3E1FE30
SO6.exe+3E1FE1A: 48 89 C1              - mov rcx,rax
SO6.exe+3E1FE1D: E8 16 F6 C8 FC        - call SO6.exe+AAF438
SO6.exe+3E1FE22: 48 8D 3D 50 69 9E 0B  - lea rdi,[SO6.exe+F806779]
SO6.exe+3E1FE29: 80 27 8B              - and byte ptr [rdi],-75
SO6.exe+3E1FE2C: 84 C0                 - test al,al
SO6.exe+3E1FE2E: 75 1B                 - jne SO6.exe+3E1FE4B
SO6.exe+3E1FE30: F3 0F 10 43 1C        - movss xmm0,[rbx+1C]
// ---------- INJECTING HERE ----------
SO6.exe+3E1FE35: F3 0F 5C C7           - subss xmm0,xmm7
// ---------- DONE INJECTING  ----------
SO6.exe+3E1FE39: 0F 2F F0              - comiss xmm6,xmm0
SO6.exe+3E1FE3C: 77 08                 - ja SO6.exe+3E1FE46
SO6.exe+3E1FE3E: F3 0F 5D 43 18        - minss xmm0,[rbx+18]
SO6.exe+3E1FE43: 0F 28 F0              - movaps xmm6,xmm0
SO6.exe+3E1FE46: F3 0F 11 73 1C        - movss [rbx+1C],xmm6
SO6.exe+3E1FE4B: 48 8B 5C 24 50        - mov rbx,[rsp+50]
SO6.exe+3E1FE50: 0F 28 74 24 30        - movaps xmm6,[rsp+30]
SO6.exe+3E1FE55: 0F 28 7C 24 20        - movaps xmm7,[rsp+20]
SO6.exe+3E1FE5A: 48 83 C4 40           - add rsp,40
SO6.exe+3E1FE5E: 5F                    - pop rdi
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>50</ID>
                  <Description>"No VA Decrease"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : SO6.exe
  Version: 
  Date   : 2022-10-28
  Author : asmor

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(VAAOB,SO6.exe,F3 0F 11 8B 60 14 00 00) // should be unique
alloc(newmem,$1000,VAAOB)

label(code)
label(return)

newmem:

code:
  //movss [rbx+00001460],xmm1
  mov [rbx+00001460],(float)100
  jmp return

VAAOB:
  jmp newmem
  nop 3
return:
registersymbol(VAAOB)

[DISABLE]

VAAOB:
  db F3 0F 11 8B 60 14 00 00

unregistersymbol(VAAOB)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe+300665

SO6.exe+30063F: 84 C0                    - test al,al
SO6.exe+300641: 0F 84 A9 00 00 00        - je SO6.exe+3006F0
SO6.exe+300647: 0F 57 C9                 - xorps xmm1,xmm1
SO6.exe+30064A: 41 0F 28 C0              - movaps xmm0,xmm8
SO6.exe+30064E: F3 0F 58 C2              - addss xmm0,xmm2
SO6.exe+300652: 0F 2F C8                 - comiss xmm1,xmm0
SO6.exe+300655: 77 0B                    - ja SO6.exe+300662
SO6.exe+300657: F3 0F 5D 05 51 97 34 01  - minss xmm0,[SO6.exe+1649DB0]
SO6.exe+30065F: 0F 28 C8                 - movaps xmm1,xmm0
SO6.exe+300662: 48 8B CB                 - mov rcx,rbx
// ---------- INJECTING HERE ----------
SO6.exe+300665: F3 0F 11 8B 60 14 00 00  - movss [rbx+00001460],xmm1
// ---------- DONE INJECTING  ----------
SO6.exe+30066D: E8 4E 40 E7 FF           - call SO6.exe+1746C0
SO6.exe+300672: 84 C0                    - test al,al
SO6.exe+300674: 74 0D                    - je SO6.exe+300683
SO6.exe+300676: 41 0F 28 F8              - movaps xmm7,xmm8
SO6.exe+30067A: F3 0F 5C F9              - subss xmm7,xmm1
SO6.exe+30067E: 0F 2F FE                 - comiss xmm7,xmm6
SO6.exe+300681: 77 47                    - ja SO6.exe+3006CA
SO6.exe+300683: 44 0F 2F C6              - comiss xmm8,xmm6
SO6.exe+300687: 76 92                    - jna SO6.exe+30061B
SO6.exe+300689: 0F 2F B3 60 14 00 00     - comiss xmm6,[rbx+00001460]
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>115854</ID>
                  <Description>"inf Vatting gauge"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{  Game Executable   : SO6.exe
   Author            : Tuuup!
   Executable Version: 1.0.0.0
   Script Date       : 2022-10-29

   Used with permission.
}
[ENABLE]
aobscanmodule(vatting2,SO6.exe,F3 0F 5D C8 F3 0F 11 8B 64 14 00 00)
registersymbol(vatting2 vatting2bkp)
alloc(vatting2bkp,4,vatting2)

vatting2bkp:
readmem(vatting2,4)

vatting2:
db F3 0F 10 C8

[DISABLE]
vatting2:
 // db F3 0F 5D C8
readmem(vatting2bkp,4)
unregistersymbol(*)
dealloc(*)

{
// ORIGINAL CODE - INJECTION POINT: SO6.msgpack_unpack_next+B7B3

SO6.msgpack_unpack_next+B739: 48 8B 0D 44 6F 1F 02        - mov rcx,[SO6.exe+2483D28]
SO6.msgpack_unpack_next+B740: E8 17 FB 2E 00              - call SO6.exe.xtext+57B900
SO6.msgpack_unpack_next+B745: 48 85 C0                    - test rax,rax
SO6.msgpack_unpack_next+B748: 74 29                       - je SO6.msgpack_unpack_next+B773
SO6.msgpack_unpack_next+B74A: 48 8B C8                    - mov rcx,rax
SO6.msgpack_unpack_next+B74D: E8 EA D7 EE FF              - call SO6.exe.xtext+1795E0
SO6.msgpack_unpack_next+B752: 48 85 C0                    - test rax,rax
SO6.msgpack_unpack_next+B755: 74 1C                       - je SO6.msgpack_unpack_next+B773
SO6.msgpack_unpack_next+B757: 48 8B C8                    - mov rcx,rax
SO6.msgpack_unpack_next+B75A: E8 21 88 EE FF              - call SO6.exe.xtext+174624
SO6.msgpack_unpack_next+B75F: 48 85 C0                    - test rax,rax
SO6.msgpack_unpack_next+B762: 74 0F                       - je SO6.msgpack_unpack_next+B773
SO6.msgpack_unpack_next+B764: 48 8B C8                    - mov rcx,rax
SO6.msgpack_unpack_next+B767: E8 E4 00 00 00              - call SO6.msgpack_unpack_next+B850
SO6.msgpack_unpack_next+B76C: F3 0F 59 C7                 - mulss xmm0,xmm7
SO6.msgpack_unpack_next+B770: 0F 28 F8                    - movaps xmm7,xmm0
SO6.msgpack_unpack_next+B773: 8A 83 D0 54 07 00           - mov al,[rbx+000754D0]
SO6.msgpack_unpack_next+B779: F3 44 0F 10 83 64 14 00 00  - movss xmm8,[rbx+00001464]
SO6.msgpack_unpack_next+B782: 41 0F 28 C8                 - movaps xmm1,xmm8
SO6.msgpack_unpack_next+B786: 24 01                       - and al,01
SO6.msgpack_unpack_next+B788: 75 35                       - jne SO6.msgpack_unpack_next+B7BF
SO6.msgpack_unpack_next+B78A: E8 E5 4F EE FF              - call SO6.exe.xtext+170E18
SO6.msgpack_unpack_next+B78F: 0F 28 CF                    - movaps xmm1,xmm7
SO6.msgpack_unpack_next+B792: F3 0F 58 8B 64 14 00 00     - addss xmm1,[rbx+00001464]
SO6.msgpack_unpack_next+B79A: 0F 2F F1                    - comiss xmm6,xmm1
SO6.msgpack_unpack_next+B79D: 0F 87 87 00 00 00           - ja SO6.msgpack_unpack_next+B82A
SO6.msgpack_unpack_next+B7A3: BA 98 00 00 00              - mov edx,00000098
SO6.msgpack_unpack_next+B7A8: 0F 57 D2                    - xorps xmm2,xmm2
SO6.msgpack_unpack_next+B7AB: 48 8B C8                    - mov rcx,rax
SO6.msgpack_unpack_next+B7AE: E8 D5 A7 EE FF              - call SO6.exe.xtext+17662C
// ---------- INJECTING HERE ----------
SO6.msgpack_unpack_next+B7B3: F3 0F 5D C8                 - minss xmm1,xmm0
// ---------- DONE INJECTING  ----------
SO6.msgpack_unpack_next+B7B7: F3 0F 11 8B 64 14 00 00     - movss [rbx+00001464],xmm1
SO6.msgpack_unpack_next+B7BF: 44 0F 2E C1                 - ucomiss xmm8,xmm1
SO6.msgpack_unpack_next+B7C3: 0F 8A 3D BA 77 00           - jp SO6.exe.xtext+A078AA
SO6.msgpack_unpack_next+B7C9: 0F 85 37 BA 77 00           - jne SO6.exe.xtext+A078AA
SO6.msgpack_unpack_next+B7CF: 48 8B 3D F6 6F 1F 02        - mov rdi,[SO6.exe+2483E70]
SO6.msgpack_unpack_next+B7D6: 48 85 FF                    - test rdi,rdi
SO6.msgpack_unpack_next+B7D9: 74 32                       - je SO6.msgpack_unpack_next+B80D
SO6.msgpack_unpack_next+B7DB: E8 94 4F EE FF              - call SO6.exe.xtext+170E18
SO6.msgpack_unpack_next+B7E0: BA 98 00 00 00              - mov edx,00000098
SO6.msgpack_unpack_next+B7E5: 0F 57 D2                    - xorps xmm2,xmm2
SO6.msgpack_unpack_next+B7E8: 48 8B C8                    - mov rcx,rax
SO6.msgpack_unpack_next+B7EB: E8 98 A7 EE FF              - call SO6.exe.xtext+17662C
SO6.msgpack_unpack_next+B7F0: F3 0F 10 8B 64 14 00 00     - movss xmm1,[rbx+00001464]
SO6.msgpack_unpack_next+B7F8: 0F 2F C8                    - comiss xmm1,xmm0
SO6.msgpack_unpack_next+B7FB: 72 10                       - jb SO6.msgpack_unpack_next+B80D
SO6.msgpack_unpack_next+B7FD: 48 8B 8F 98 00 00 00        - mov rcx,[rdi+00000098]
SO6.msgpack_unpack_next+B804: 48 85 C9                    - test rcx,rcx
SO6.msgpack_unpack_next+B807: 0F 85 49 BA 77 00           - jne SO6.exe.xtext+A078FA
SO6.msgpack_unpack_next+B80D: 0F 28 74 24 60              - movaps xmm6,[rsp+60]
SO6.msgpack_unpack_next+B812: 4C 8D 5C 24 70              - lea r11,[rsp+70]
SO6.msgpack_unpack_next+B817: 49 8B 5B 10                 - mov rbx,[r11+10]
SO6.msgpack_unpack_next+B81B: 45 0F 28 43 D0              - movaps xmm8,[r11-30]
SO6.msgpack_unpack_next+B820: 0F 28 7C 24 50              - movaps xmm7,[rsp+50]
SO6.msgpack_unpack_next+B825: 49 8B E3                    - mov rsp,r11
SO6.msgpack_unpack_next+B828: 5F                          - pop rdi
SO6.msgpack_unpack_next+B829: C3                          - ret 
SO6.msgpack_unpack_next+B82A: 0F 57 C9                    - xorps xmm1,xmm1
SO6.msgpack_unpack_next+B82D: EB 88                       - jmp SO6.msgpack_unpack_next+B7B7
SO6.msgpack_unpack_next+B82F: CC                          - int 3 
SO6.msgpack_unpack_next+B830: 48 83 EC 48                 - sub rsp,48
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>115986</ID>
                  <Description>"inf VA jump open world"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{  Game Executable   : SO6.exe
   Author            : Tuuup!
   Executable Version: 1.0.0.0
   Script Date       : 2022-11-01

   Used with permission.
}
[ENABLE]
aobscanmodule(vajump,SO6.exe,FF80????????4C8B15????????4D85D2)
registersymbol(vajump vajumpbkp)
alloc(vajumpbkp,6,vajump)

vajumpbkp:
readmem(vajump,6)

vajump:

  nop 6


[DISABLE]
vajump:
 // db FF 80 A4 01 00 00
readmem(vajumpbkp,6)
unregistersymbol(*)
dealloc(*)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe.xtext+38E8AC

SO6.exe.xtext+38E880: 48 8B 87 F8 00 00 00     - mov rax,[rdi+000000F8]
SO6.exe.xtext+38E887: 44 39 A8 A4 01 00 00     - cmp [rax+000001A4],r13d
SO6.exe.xtext+38E88E: 0F 8F 5E 0E 6C 00        - jg SO6.exe.xtext+A4F6F2
SO6.exe.xtext+38E894: 48 8B 88 90 00 00 00     - mov rcx,[rax+00000090]
SO6.exe.xtext+38E89B: 84 C9                    - test cl,cl
SO6.exe.xtext+38E89D: 0F 88 4F 0E 6C 00        - js SO6.exe.xtext+A4F6F2
SO6.exe.xtext+38E8A3: F6 C1 40                 - test cl,40
SO6.exe.xtext+38E8A6: 0F 85 3C 0E 6C 00        - jne SO6.exe.xtext+A4F6E8
// ---------- INJECTING HERE ----------
SO6.exe.xtext+38E8AC: FF 80 A4 01 00 00        - inc [rax+000001A4]
// ---------- DONE INJECTING  ----------
SO6.exe.xtext+38E8B2: 4C 8B 15 B7 45 0F 02     - mov r10,[SO6.exe+2483E70]
SO6.exe.xtext+38E8B9: 4D 85 D2                 - test r10,r10
SO6.exe.xtext+38E8BC: 0F 84 6B FB FF FF        - je SO6.exe.xtext+38E42D
SO6.exe.xtext+38E8C2: 49 8B 8A A0 00 00 00     - mov rcx,[r10+000000A0]

}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>116183</ID>
                  <Description>"inf hack gauge"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{  Game Executable   : SO6.exe
   Author            : Tuuup!
   Executable Version: 1.0.0.0
   Script Date       : 2022-11-05

   Used with permission.
}
[ENABLE]
aobscanmodule(timehack,SO6.exe,F3 0F 5C CE F3 0F 11 4B 60)
registersymbol(timehack timehackbkp)
alloc(newmem,128,timehack)
label(return)
label(timehackbkp)
newmem:

  //subss xmm1,xmm6
  movss [rbx+60],xmm1
  jmp return
  
timehackbkp:
readmem(timehack,9)

timehack:
  jmp newmem
  nop 4
return:

[DISABLE]
timehack:
 // db F3 0F 5C CE F3 0F 11 4B 60
readmem(timehackbkp,9)
unregistersymbol(*)
dealloc(*)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe.xtext+99C932

SO6.exe.xtext+99C8B2: 40 88 7B 01              - mov [rbx+01],dil
SO6.exe.xtext+99C8B6: E8 D1 CF 30 00           - call SO6.exe.xtext+CA988C
SO6.exe.xtext+99C8BB: 90                       - nop 
SO6.exe.xtext+99C8BC: E9 7F C8 6D FF           - jmp SO6.exe.xtext+79140
SO6.exe.xtext+99C8C1: CC                       - int 3 
SO6.exe.xtext+99C8C2: 83 F8 01                 - cmp eax,01
SO6.exe.xtext+99C8C5: 75 3C                    - jne SO6.exe.xtext+99C903
SO6.exe.xtext+99C8C7: F3 0F 10 43 70           - movss xmm0,[rbx+70]
SO6.exe.xtext+99C8CC: 0F 2F 43 60              - comiss xmm0,[rbx+60]
SO6.exe.xtext+99C8D0: 0F 82 CA D0 6D FF        - jb SO6.exe.xtext+799A0
SO6.exe.xtext+99C8D6: F3 0F 5E 35 AA CA CA 00  - divss xmm6,[SO6.exe.sbss+134388]
SO6.exe.xtext+99C8DE: F3 0F 58 73 6C           - addss xmm6,[rbx+6C]
SO6.exe.xtext+99C8E3: F3 0F 11 73 6C           - movss [rbx+6C],xmm6
SO6.exe.xtext+99C8E8: F3 0F 59 73 64           - mulss xmm6,[rbx+64]
SO6.exe.xtext+99C8ED: F3 0F 11 73 60           - movss [rbx+60],xmm6
SO6.exe.xtext+99C8F2: 0F 28 CE                 - movaps xmm1,xmm6
SO6.exe.xtext+99C8F5: 48 8B CB                 - mov rcx,rbx
SO6.exe.xtext+99C8F8: E8 17 9E 99 FF           - call SO6.exe.xtext+336714
SO6.exe.xtext+99C8FD: 90                       - nop 
SO6.exe.xtext+99C8FE: E9 9D D0 6D FF           - jmp SO6.exe.xtext+799A0
SO6.exe.xtext+99C903: 83 F8 02                 - cmp eax,02
SO6.exe.xtext+99C906: 75 62                    - jne SO6.exe.xtext+99C96A
SO6.exe.xtext+99C908: F3 0F 10 43 60           - movss xmm0,[rbx+60]
SO6.exe.xtext+99C90D: 0F 2F 05 F8 C4 CA 00     - comiss xmm0,[SO6.exe.sbss+133E0C]
SO6.exe.xtext+99C914: 72 3B                    - jb SO6.exe.xtext+99C951
SO6.exe.xtext+99C916: F3 0F 5E 35 6A CA CA 00  - divss xmm6,[SO6.exe.sbss+134388]
SO6.exe.xtext+99C91E: F3 0F 58 73 6C           - addss xmm6,[rbx+6C]
SO6.exe.xtext+99C923: F3 0F 11 73 6C           - movss [rbx+6C],xmm6
SO6.exe.xtext+99C928: F3 0F 59 73 64           - mulss xmm6,[rbx+64]
SO6.exe.xtext+99C92D: F3 0F 10 4B 70           - movss xmm1,[rbx+70]
// ---------- INJECTING HERE ----------
SO6.exe.xtext+99C932: F3 0F 5C CE              - subss xmm1,xmm6
// ---------- DONE INJECTING  ----------
SO6.exe.xtext+99C936: F3 0F 11 4B 60           - movss [rbx+60],xmm1
SO6.exe.xtext+99C93B: 48 8B CB                 - mov rcx,rbx
SO6.exe.xtext+99C93E: E8 D1 9D 99 FF           - call SO6.exe.xtext+336714
SO6.exe.xtext+99C943: 48 8B CB                 - mov rcx,rbx
SO6.exe.xtext+99C946: E8 B9 B8 30 00           - call SO6.exe.xtext+CA8204
SO6.exe.xtext+99C94B: 90                       - nop 
SO6.exe.xtext+99C94C: E9 4F D0 6D FF           - jmp SO6.exe.xtext+799A0
SO6.exe.xtext+99C951: 48 83 64 24 58 00        - and qword ptr [rsp+58],00
SO6.exe.xtext+99C957: 48 8D 54 24 20           - lea rdx,[rsp+20]
SO6.exe.xtext+99C95C: 48 8B CB                 - mov rcx,rbx
SO6.exe.xtext+99C95F: E8 FC B6 30 00           - call SO6.exe.xtext+CA8060
SO6.exe.xtext+99C964: 90                       - nop 
SO6.exe.xtext+99C965: E9 36 D0 6D FF           - jmp SO6.exe.xtext+799A0
SO6.exe.xtext+99C96A: 83 F8 03                 - cmp eax,03
SO6.exe.xtext+99C96D: 0F 85 2D D0 6D FF        - jne SO6.exe.xtext+799A0
SO6.exe.xtext+99C973: F3 0F 10 43 78           - movss xmm0,[rbx+78]
SO6.exe.xtext+99C978: 0F 2F 05 8D C4 CA 00     - comiss xmm0,[SO6.exe.sbss+133E0C]
SO6.exe.xtext+99C97F: 72 0E                    - jb SO6.exe.xtext+99C98F
SO6.exe.xtext+99C981: F3 0F 5C C6              - subss xmm0,xmm6
SO6.exe.xtext+99C985: F3 0F 11 43 78           - movss [rbx+78],xmm0
SO6.exe.xtext+99C98A: E9 11 D0 6D FF           - jmp SO6.exe.xtext+799A0
SO6.exe.xtext+99C98F: 48 8B CB                 - mov rcx,rbx
SO6.exe.xtext+99C992: E8 99 B6 30 00           - call SO6.exe.xtext+CA8030
SO6.exe.xtext+99C997: 48 83 7B 40 00           - cmp qword ptr [rbx+40],00
SO6.exe.xtext+99C99C: 0F 84 FE CF 6D FF        - je SO6.exe.xtext+799A0
SO6.exe.xtext+99C9A2: 48 8D 4B 08              - lea rcx,[rbx+08]
SO6.exe.xtext+99C9A6: E8 45 C3 70 FF           - call SO6.exe.xtext+A8CF0
SO6.exe.xtext+99C9AB: 90                       - nop 
SO6.exe.xtext+99C9AC: E9 EF CF 6D FF           - jmp SO6.exe.xtext+799A0
SO6.exe.xtext+99C9B1: CC                       - int 3 
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>116186</ID>
                  <Description>"instant full hack  gauge"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{  Game Executable   : SO6.exe
   Author            : Tuuup!
   Executable Version: 1.0.0.0
   Script Date       : 2022-11-05

   Used with permission.
}
[ENABLE]
aobscanmodule(fullhack2,SO6.exe,F3 0F 59 73 64 F3 0F 11)
registersymbol(fullhack2 fullhack2bkp)
alloc(newmem,128,fullhack2)
label(return)
label(fullhack2bkp)
newmem:

  mulss xmm6,[rbx+64]
  movss xmm6,xmm1
  jmp return
  
fullhack2bkp:
readmem(fullhack2,5)

fullhack2:
  jmp newmem
return:

[DISABLE]
fullhack2:
 // db F3 0F 59 73 64
readmem(fullhack2bkp,5)
unregistersymbol(*)
dealloc(*)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe.xtext+99C8E8

SO6.exe.xtext+99C873: 24 EF                    - and al,-11
SO6.exe.xtext+99C875: 48 8B CF                 - mov rcx,rdi
SO6.exe.xtext+99C878: 88 87 06 02 00 00        - mov [rdi+00000206],al
SO6.exe.xtext+99C87E: E8 65 82 AE FF           - call SO6.exe.xtext+484AE8
SO6.exe.xtext+99C883: 44 8B 4D 6F              - mov r9d,[rbp+6F]
SO6.exe.xtext+99C887: E9 E4 C1 6D FF           - jmp SO6.exe.xtext+78A70
SO6.exe.xtext+99C88C: 40 38 7B 01              - cmp [rbx+01],dil
SO6.exe.xtext+99C890: 75 0C                    - jne SO6.exe.xtext+99C89E
SO6.exe.xtext+99C892: 48 8B CB                 - mov rcx,rbx
SO6.exe.xtext+99C895: C6 43 01 01              - mov byte ptr [rbx+01],01
SO6.exe.xtext+99C899: E8 9A CF 30 00           - call SO6.exe.xtext+CA9838
SO6.exe.xtext+99C89E: 41 8B D7                 - mov edx,r15d
SO6.exe.xtext+99C8A1: 48 8B CB                 - mov rcx,rbx
SO6.exe.xtext+99C8A4: E8 93 CC 30 00           - call SO6.exe.xtext+CA953C
SO6.exe.xtext+99C8A9: 90                       - nop 
SO6.exe.xtext+99C8AA: E9 91 C8 6D FF           - jmp SO6.exe.xtext+79140
SO6.exe.xtext+99C8AF: 48 8B CB                 - mov rcx,rbx
SO6.exe.xtext+99C8B2: 40 88 7B 01              - mov [rbx+01],dil
SO6.exe.xtext+99C8B6: E8 D1 CF 30 00           - call SO6.exe.xtext+CA988C
SO6.exe.xtext+99C8BB: 90                       - nop 
SO6.exe.xtext+99C8BC: E9 7F C8 6D FF           - jmp SO6.exe.xtext+79140
SO6.exe.xtext+99C8C1: CC                       - int 3 
SO6.exe.xtext+99C8C2: 83 F8 01                 - cmp eax,01
SO6.exe.xtext+99C8C5: 75 3C                    - jne SO6.exe.xtext+99C903
SO6.exe.xtext+99C8C7: F3 0F 10 43 70           - movss xmm0,[rbx+70]
SO6.exe.xtext+99C8CC: 0F 2F 43 60              - comiss xmm0,[rbx+60]
SO6.exe.xtext+99C8D0: 0F 82 CA D0 6D FF        - jb SO6.exe.xtext+799A0
SO6.exe.xtext+99C8D6: F3 0F 5E 35 AA CA CA 00  - divss xmm6,[SO6.exe.sbss+134388]
SO6.exe.xtext+99C8DE: F3 0F 58 73 6C           - addss xmm6,[rbx+6C]
SO6.exe.xtext+99C8E3: F3 0F 11 73 6C           - movss [rbx+6C],xmm6
// ---------- INJECTING HERE ----------
SO6.exe.xtext+99C8E8: F3 0F 59 73 64           - mulss xmm6,[rbx+64]
// ---------- DONE INJECTING  ----------
SO6.exe.xtext+99C8ED: F3 0F 11 73 60           - movss [rbx+60],xmm6
SO6.exe.xtext+99C8F2: 0F 28 CE                 - movaps xmm1,xmm6
SO6.exe.xtext+99C8F5: 48 8B CB                 - mov rcx,rbx
SO6.exe.xtext+99C8F8: E8 17 9E 99 FF           - call SO6.exe.xtext+336714
SO6.exe.xtext+99C8FD: 90                       - nop 
SO6.exe.xtext+99C8FE: E9 9D D0 6D FF           - jmp SO6.exe.xtext+799A0
SO6.exe.xtext+99C903: 83 F8 02                 - cmp eax,02
SO6.exe.xtext+99C906: 75 62                    - jne SO6.exe.xtext+99C96A
SO6.exe.xtext+99C908: F3 0F 10 43 60           - movss xmm0,[rbx+60]
SO6.exe.xtext+99C90D: 0F 2F 05 F8 C4 CA 00     - comiss xmm0,[SO6.exe.sbss+133E0C]
SO6.exe.xtext+99C914: 72 3B                    - jb SO6.exe.xtext+99C951
SO6.exe.xtext+99C916: F3 0F 5E 35 6A CA CA 00  - divss xmm6,[SO6.exe.sbss+134388]
SO6.exe.xtext+99C91E: F3 0F 58 73 6C           - addss xmm6,[rbx+6C]
SO6.exe.xtext+99C923: F3 0F 11 73 6C           - movss [rbx+6C],xmm6
SO6.exe.xtext+99C928: F3 0F 59 73 64           - mulss xmm6,[rbx+64]
SO6.exe.xtext+99C92D: F3 0F 10 4B 70           - movss xmm1,[rbx+70]
SO6.exe.xtext+99C932: 90                       - nop 
SO6.exe.xtext+99C933: 90                       - nop 
SO6.exe.xtext+99C934: 90                       - nop 
SO6.exe.xtext+99C935: 90                       - nop 
SO6.exe.xtext+99C936: F3 0F 11 4B 60           - movss [rbx+60],xmm1
SO6.exe.xtext+99C93B: 48 8B CB                 - mov rcx,rbx
SO6.exe.xtext+99C93E: E8 D1 9D 99 FF           - call SO6.exe.xtext+336714
SO6.exe.xtext+99C943: 48 8B CB                 - mov rcx,rbx
SO6.exe.xtext+99C946: E8 B9 B8 30 00           - call SO6.exe.xtext+CA8204
SO6.exe.xtext+99C94B: 90                       - nop 
SO6.exe.xtext+99C94C: E9 4F D0 6D FF           - jmp SO6.exe.xtext+799A0
SO6.exe.xtext+99C951: 48 83 64 24 58 00        - and qword ptr [rsp+58],00
SO6.exe.xtext+99C957: 48 8D 54 24 20           - lea rdx,[rsp+20]
SO6.exe.xtext+99C95C: 48 8B CB                 - mov rcx,rbx
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>107</ID>
                  <Description>"Fast VS Charge"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : SO6.exe
  Author : Anon-9

  This script attempts to max out VS gauge

  Used with permission.
}

[ENABLE]

aobscanmodule(fMaxVS,SO6.exe,F3 0F 5D C8 F3 0F 11 8B ?? ?? ?? ?? 44 0F 2E C1) // should be unique


fMaxVS:
  maxss xmm1,xmm0
registersymbol(fMaxVS)

[DISABLE]

fMaxVS:
  db F3 0F 5D C8

unregistersymbol(fMaxVS)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: SO6.msgpack_unpack_next+B7B3

SO6.msgpack_unpack_next+B7AB: 48 8B C8                 - mov rcx,rax
SO6.msgpack_unpack_next+B7AE: E8 D5 A7 EE FF           - call SO6.exe+17762C
// ---------- INJECTING HERE ----------
SO6.msgpack_unpack_next+B7B3: F3 0F 5D C8              - minss xmm1,xmm0
// ---------- DONE INJECTING  ----------
SO6.msgpack_unpack_next+B7B7: F3 0F 11 8B 64 14 00 00  - movss [rbx+00001464],xmm1
SO6.msgpack_unpack_next+B7BF: 44 0F 2E C1              - ucomiss xmm8,xmm1
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>115760</ID>
                  <Description>"Exp Multiplier"</Description>
                  <Options moHideChildren="1"/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{  Game Executable   : SO6.exe
   Author            : Tuuup!
   Executable Version: 1.0.0.0
   Script Date       : 2022-10-28

   Used with permission.
}
[ENABLE]
aobscanmodule(expmpv3,SO6.exe,66 0F 6E F8 0F 5B FF F3 41)
registersymbol(expmpv3 expmpv3bkp xpmpv3)
alloc(newmem,128,expmpv3)
label(return xpmpv3)
label(expmpv3bkp)
newmem:
imul rax,[xpmpv3]
  movd xmm7,eax
  cvtdq2ps xmm7,xmm7
  jmp return
  
expmpv3bkp:
readmem(expmpv3,7)
xpmpv3:
dd #5
expmpv3:
  jmp newmem
  nop 2
return:

[DISABLE]
expmpv3:
 // db 66 0F 6E F8 0F 5B FF
readmem(expmpv3bkp,7)
unregistersymbol(*)
dealloc(*)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe.xtext+39F32B

SO6.exe.xtext+39F28F: 48 8B 98 E0 46 00 00           - mov rbx,[rax+000046E0]
SO6.exe.xtext+39F296: 33 D2                          - xor edx,edx
SO6.exe.xtext+39F298: 41 B8 28 01 00 00              - mov r8d,00000128
SO6.exe.xtext+39F29E: 48 8D 4D 70                    - lea rcx,[rbp+70]
SO6.exe.xtext+39F2A2: E8 93 37 3F 00                 - call SO6.LZ4_versionString+89DA
SO6.exe.xtext+39F2A7: 48 8D 85 98 00 00 00           - lea rax,[rbp+00000098]
SO6.exe.xtext+39F2AE: 48 89 45 88                    - mov [rbp-78],rax
SO6.exe.xtext+39F2B2: 48 8D 55 80                    - lea rdx,[rbp-80]
SO6.exe.xtext+39F2B6: 48 8D 4D 70                    - lea rcx,[rbp+70]
SO6.exe.xtext+39F2BA: E8 D1 98 D0 FF                 - call SO6.exe.xtext+A8B90
SO6.exe.xtext+39F2BF: 48 8D 8D 98 00 00 00           - lea rcx,[rbp+00000098]
SO6.exe.xtext+39F2C6: 48 89 4D 70                    - mov [rbp+70],rcx
SO6.exe.xtext+39F2CA: 48 B8 FF 00 00 00 00 00 00 80  - mov rax,80000000000000FF
SO6.exe.xtext+39F2D4: 48 89 85 80 00 00 00           - mov [rbp+00000080],rax
SO6.exe.xtext+39F2DB: 4C 89 6D 78                    - mov [rbp+78],r13
SO6.exe.xtext+39F2DF: 44 88 AD 98 00 00 00           - mov [rbp+00000098],r13l
SO6.exe.xtext+39F2E6: F3 0F 10 35 1A 9B 2A 01        - movss xmm6,[SO6.exe.sbss+133E08]
SO6.exe.xtext+39F2EE: 44 0F 28 C6                    - movaps xmm8,xmm6
SO6.exe.xtext+39F2F2: 48 8B CF                       - mov rcx,rdi
SO6.exe.xtext+39F2F5: E8 AE 2D E5 FF                 - call SO6.exe.xtext+1F20A8
SO6.exe.xtext+39F2FA: 84 C0                          - test al,al
SO6.exe.xtext+39F2FC: 0F 85 09 05 00 00              - jne SO6.exe.xtext+39F80B
SO6.exe.xtext+39F302: 44 38 AF 37 62 00 00           - cmp [rdi+00006237],r13l
SO6.exe.xtext+39F309: 0F 85 FC 04 00 00              - jne SO6.exe.xtext+39F80B
SO6.exe.xtext+39F30F: 4C 8D B7 78 61 00 00           - lea r14,[rdi+00006178]
SO6.exe.xtext+39F316: 49 8B CE                       - mov rcx,r14
SO6.exe.xtext+39F319: E8 3E 21 D1 FF                 - call SO6.exe.xtext+B145C
SO6.exe.xtext+39F31E: BA 6E 00 00 00                 - mov edx,0000006E
SO6.exe.xtext+39F323: 48 8B C8                       - mov rcx,rax
SO6.exe.xtext+39F326: E8 A9 72 DD FF                 - call SO6.exe.xtext+1765D4
// ---------- INJECTING HERE ----------
SO6.exe.xtext+39F32B: 66 0F 6E F8                    - movd xmm7,eax
// ---------- DONE INJECTING  ----------
SO6.exe.xtext+39F32F: 0F 5B FF                       - cvtdq2ps xmm7,xmm7
SO6.exe.xtext+39F332: F3 41 0F 59 F8                 - mulss xmm7,xmm8
SO6.exe.xtext+39F337: 0F 2F 3D CE 9A 2A 01           - comiss xmm7,[SO6.exe.sbss+133E0C]
SO6.exe.xtext+39F33E: 0F 86 8D 00 00 00              - jbe SO6.exe.xtext+39F3D1
SO6.exe.xtext+39F344: 48 85 DB                       - test rbx,rbx
SO6.exe.xtext+39F347: 74 77                          - je SO6.exe.xtext+39F3C0
SO6.exe.xtext+39F349: 44 0F 28 C7                    - movaps xmm8,xmm7
SO6.exe.xtext+39F34D: 48 8B CE                       - mov rcx,rsi
SO6.exe.xtext+39F350: E8 AB C5 1D 00                 - call SO6.exe.xtext+57B900
SO6.exe.xtext+39F355: 48 85 C0                       - test rax,rax
SO6.exe.xtext+39F358: 74 2B                          - je SO6.exe.xtext+39F385
SO6.exe.xtext+39F35A: 48 8B C8                       - mov rcx,rax
SO6.exe.xtext+39F35D: E8 7E A2 DD FF                 - call SO6.exe.xtext+1795E0
SO6.exe.xtext+39F362: 48 85 C0                       - test rax,rax
SO6.exe.xtext+39F365: 74 1E                          - je SO6.exe.xtext+39F385
SO6.exe.xtext+39F367: 48 8B C8                       - mov rcx,rax
SO6.exe.xtext+39F36A: E8 B5 52 DD FF                 - call SO6.exe.xtext+174624
SO6.exe.xtext+39F36F: 48 85 C0                       - test rax,rax
SO6.exe.xtext+39F372: 74 11                          - je SO6.exe.xtext+39F385
SO6.exe.xtext+39F374: 48 8B C8                       - mov rcx,rax
SO6.exe.xtext+39F377: E8 68 E4 EA FF                 - call SO6.exe.xtext+24D7E4
SO6.exe.xtext+39F37C: 44 0F 28 C0                    - movaps xmm8,xmm0
SO6.exe.xtext+39F380: F3 44 0F 59 C7                 - mulss xmm8,xmm7
SO6.exe.xtext+39F385: F3 45 0F 2C C0                 - cvttss2si r8d,xmm8
SO6.exe.xtext+39F38A: 48 8D 15 2F 3B 1B 01           - lea rdx,[SO6.exe.sbss+3DEC0]
SO6.exe.xtext+39F391: 48 8B CB                       - mov rcx,rbx
SO6.exe.xtext+39F394: 44 38 AF 31 62 00 00           - cmp [rdi+00006231],r13l
SO6.exe.xtext+39F39B: 0F 85 A1 4C 6B 00              - jne SO6.exe.xtext+A54042
SO6.exe.xtext+39F3A1: E8 86 E8 FF FF                 - call SO6.exe.xtext+39DC2C
SO6.exe.xtext+39F3A6: 48 8B 8B A0 01 00 00           - mov rcx,[rbx+000001A0]
}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>115761</ID>
                      <Description>"multiplier"</Description>
                      <ShowAsSigned>1</ShowAsSigned>
                      <VariableType>4 Bytes</VariableType>
                      <Address>xpmpv3</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>115770</ID>
                  <Description>"Fol Multiplier"</Description>
                  <Options moHideChildren="1"/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{  Game Executable   : SO6.exe
   Author            : Tuuup!
   Executable Version: 1.0.0.0
   Script Date       : 2022-10-29

   Used with permission.
}
[ENABLE]
aobscanmodule(folsmp,SO6.exe,F3 44 0F 2C C0 48 8D 9E)
registersymbol(folsmp folsmpbkp folmp)
alloc(newmem,128,folsmp)
label(return folmp)
label(folsmpbkp)
newmem:
mulss xmm0,[folmp]
  cvttss2si r8d,xmm0
  jmp return
  
folsmpbkp:
readmem(folsmp,5)
folmp:
dd (float)5
folsmp:
  jmp newmem
return:

[DISABLE]
folsmp:
 // db F3 44 0F 2C C0
readmem(folsmpbkp,5)
unregistersymbol(*)
dealloc(*)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe.xtext+39F3FC

SO6.exe.xtext+39F377: E8 68 E4 EA FF                 - call SO6.exe.xtext+24D7E4
SO6.exe.xtext+39F37C: 44 0F 28 C0                    - movaps xmm8,xmm0
SO6.exe.xtext+39F380: F3 44 0F 59 C7                 - mulss xmm8,xmm7
SO6.exe.xtext+39F385: F3 45 0F 2C C0                 - cvttss2si r8d,xmm8
SO6.exe.xtext+39F38A: 48 8D 15 2F 3B 1B 01           - lea rdx,[SO6.exe.sbss+3DEC0]
SO6.exe.xtext+39F391: 48 8B CB                       - mov rcx,rbx
SO6.exe.xtext+39F394: 44 38 AF 31 62 00 00           - cmp [rdi+00006231],r13l
SO6.exe.xtext+39F39B: 0F 85 A1 4C 6B 00              - jne SO6.exe.xtext+A54042
SO6.exe.xtext+39F3A1: E8 86 E8 FF FF                 - call SO6.exe.xtext+39DC2C
SO6.exe.xtext+39F3A6: 48 8B 8B A0 01 00 00           - mov rcx,[rbx+000001A0]
SO6.exe.xtext+39F3AD: 48 85 C9                       - test rcx,rcx
SO6.exe.xtext+39F3B0: 74 0E                          - je SO6.exe.xtext+39F3C0
SO6.exe.xtext+39F3B2: 45 33 C9                       - xor r9d,r9d
SO6.exe.xtext+39F3B5: 45 8B C4                       - mov r8d,r12d
SO6.exe.xtext+39F3B8: 48 8B D0                       - mov rdx,rax
SO6.exe.xtext+39F3BB: E8 B4 F5 FF FF                 - call SO6.exe.xtext+39E974
SO6.exe.xtext+39F3C0: F3 48 0F 2C D7                 - cvttss2si rdx,xmm7
SO6.exe.xtext+39F3C5: 48 8B 0D 4C 61 19 02           - mov rcx,[SO6.exe+2536518]
SO6.exe.xtext+39F3CC: E8 37 D2 EA FF                 - call SO6.exe.xtext+24C608
SO6.exe.xtext+39F3D1: 49 8B CE                       - mov rcx,r14
SO6.exe.xtext+39F3D4: E8 83 20 D1 FF                 - call SO6.exe.xtext+B145C
SO6.exe.xtext+39F3D9: BA A2 00 00 00                 - mov edx,000000A2
SO6.exe.xtext+39F3DE: 48 8B C8                       - mov rcx,rax
SO6.exe.xtext+39F3E1: E8 EE 71 DD FF                 - call SO6.exe.xtext+1765D4
SO6.exe.xtext+39F3E6: 8B D8                          - mov ebx,eax
SO6.exe.xtext+39F3E8: E8 A3 D5 EA FF                 - call SO6.exe.xtext+24C990
SO6.exe.xtext+39F3ED: F3 0F 59 C6                    - mulss xmm0,xmm6
SO6.exe.xtext+39F3F1: 66 0F 6E CB                    - movd xmm1,ebx
SO6.exe.xtext+39F3F5: 0F 5B C9                       - cvtdq2ps xmm1,xmm1
SO6.exe.xtext+39F3F8: F3 0F 59 C1                    - mulss xmm0,xmm1
// ---------- INJECTING HERE ----------
SO6.exe.xtext+39F3FC: F3 44 0F 2C C0                 - cvttss2si r8d,xmm0
// ---------- DONE INJECTING  ----------
SO6.exe.xtext+39F401: 48 8D 9E 00 17 00 00           - lea rbx,[rsi+00001700]
SO6.exe.xtext+39F408: 48 B9 6E D7 E3 F2 36 32 E0 B0  - mov rcx,B0E03236F2E3D76E
SO6.exe.xtext+39F412: 45 85 C0                       - test r8d,r8d
SO6.exe.xtext+39F415: 7E 22                          - jle SO6.exe.xtext+39F439
SO6.exe.xtext+39F417: 8A 87 31 62 00 00              - mov al,[rdi+00006231]
SO6.exe.xtext+39F41D: 44 88 6C 24 30                 - mov [rsp+30],r13l
SO6.exe.xtext+39F422: 88 44 24 28                    - mov [rsp+28],al
SO6.exe.xtext+39F426: 44 88 64 24 20                 - mov [rsp+20],r12l
SO6.exe.xtext+39F42B: 45 8A CC                       - mov r9l,r12l
SO6.exe.xtext+39F42E: 48 8B D1                       - mov rdx,rcx
SO6.exe.xtext+39F431: 48 8B CB                       - mov rcx,rbx
SO6.exe.xtext+39F434: E8 9B EF FF FF                 - call SO6.exe.xtext+39E3D4
SO6.exe.xtext+39F439: 49 8B CE                       - mov rcx,r14
SO6.exe.xtext+39F43C: E8 1B 20 D1 FF                 - call SO6.exe.xtext+B145C
SO6.exe.xtext+39F441: BA 70 00 00 00                 - mov edx,00000070
SO6.exe.xtext+39F446: 48 8B C8                       - mov rcx,rax
SO6.exe.xtext+39F449: E8 06 72 DD FF                 - call SO6.exe.xtext+176654
SO6.exe.xtext+39F44E: 48 85 C0                       - test rax,rax
SO6.exe.xtext+39F451: 0F 84 62 01 00 00              - je SO6.exe.xtext+39F5B9
SO6.exe.xtext+39F457: 48 8D 4D C8                    - lea rcx,[rbp-38]
SO6.exe.xtext+39F45B: 48 89 4D C0                    - mov [rbp-40],rcx
SO6.exe.xtext+39F45F: 48 8D 4D C8                    - lea rcx,[rbp-38]
SO6.exe.xtext+39F463: 48 89 4D A8                    - mov [rbp-58],rcx
SO6.exe.xtext+39F467: 48 8D 4D C8                    - lea rcx,[rbp-38]
SO6.exe.xtext+39F46B: 48 89 4D A0                    - mov [rbp-60],rcx
SO6.exe.xtext+39F46F: 48 8D 4D 18                    - lea rcx,[rbp+18]
SO6.exe.xtext+39F473: 48 89 4D B0                    - mov [rbp-50],rcx
SO6.exe.xtext+39F477: 8A 8F 31 62 00 00              - mov cl,[rdi+00006231]
SO6.exe.xtext+39F47D: F3 0F 10 86 FC 53 07 00        - movss xmm0,[rsi+000753FC]
SO6.exe.xtext+39F485: F3 0F 10 15 B3 A0 2A 01        - movss xmm2,[SO6.exe.sbss+134540]
}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>115771</ID>
                      <Description>"Multiplier"</Description>
                      <ShowAsSigned>1</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>folmp</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>63</ID>
                  <Description>"SP Multiplier"</Description>
                  <Options moHideChildren="1"/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : SO6.exe
  Version: 
  Date   : 2022-10-29
  Author : asmor

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(SPMultAOB,SO6.exe,01 83 00 02 00 00) // should be unique
alloc(newmem,$1000,SPMultAOB)

label(code)
label(return)
label(SPMult)

newmem:

code:
  imul eax,[SPMult]
  add [rbx+00000200],eax
  jmp return

SPMult:
  db 05

SPMultAOB:
  jmp newmem
  nop
return:
registersymbol(SPMultAOB)
registersymbol(SPMult)

[DISABLE]

SPMultAOB:
  db 01 83 00 02 00 00

unregistersymbol(SPMultAOB)
unregistersymbol(SPMult)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe+1508F9

SO6.exe+1508D0: 48 8B CE           - mov rcx,rsi
SO6.exe+1508D3: E8 84 1B F6 FF     - call SO6.exe+B245C
SO6.exe+1508D8: BA 08 00 00 00     - mov edx,00000008
SO6.exe+1508DD: 48 8B C8           - mov rcx,rax
SO6.exe+1508E0: E8 37 37 64 00     - call SO6.LZ4_versionString+8FBC
SO6.exe+1508E5: 8D 4F FF           - lea ecx,[rdi-01]
SO6.exe+1508E8: 8B 44 88 04        - mov eax,[rax+rcx*4+04]
SO6.exe+1508EC: 89 83 FC 01 00 00  - mov [rbx+000001FC],eax
SO6.exe+1508F2: EB A9              - jmp SO6.exe+15089D
SO6.exe+1508F4: E8 4F 24 35 00     - call SO6.exe+4A2D48
// ---------- INJECTING HERE ----------
SO6.exe+1508F9: 01 83 00 02 00 00  - add [rbx+00000200],eax
// ---------- DONE INJECTING  ----------
SO6.exe+1508FF: EB B1              - jmp SO6.exe+1508B2
SO6.exe+150901: CC                 - int 3 
SO6.exe+150902: CC                 - int 3 
SO6.exe+150903: CC                 - int 3 
SO6.exe+150904: 48 89 5C 24 20     - mov [rsp+20],rbx
SO6.exe+150909: 55                 - push rbp
SO6.exe+15090A: 56                 - push rsi
SO6.exe+15090B: 57                 - push rdi
SO6.exe+15090C: 41 54              - push r12
SO6.exe+15090E: 41 55              - push r13
}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>64</ID>
                      <Description>"Multiplier"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>4 Bytes</VariableType>
                      <Address>SPMult</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>98</ID>
                  <Description>"Drop Rarity"</Description>
                  <Options moHideChildren="1"/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : SO6.exe
  Version: 
  Date   : 2022-10-30
  Author : asmor

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(DropRatesAOB,SO6.exe,F3 0F 5C F0 44 0F 2F C6 0F) // should be unique
alloc(newmem,$1000,DropRatesAOB)

label(code)
label(return)
label(KeyItemRate)
label(NoDrop)
label(Drop0Rate)
label(Drop1Rate)
label(Drop2Rate)
label(Drop3Rate)
label(Drop4Rate)

newmem:

code:
  comiss xmm0,[KeyItemRate]
  jae @f
  comiss xmm0,[NoDrop]
  jbe @f
  movss xmm0,[Drop0Rate]
  cmp rdi,1
  jne @f
  movss xmm0,[Drop1Rate]
  cmp rdi,2
  jne @f
  movss xmm0,[Drop2Rate]
  cmp rdi,3
  jne @f
  movss xmm0,[Drop3Rate]
  cmp rdi,4
  jne @f
  movss xmm0,[Drop4Rate]
@@:
  subss xmm6,xmm0
  comiss xmm8,xmm6
  jmp return

KeyItemRate:
  dd (float)100

NoDrop:
  dd (float)0

Drop0Rate:
  dd (float)20

Drop1Rate:
  dd (float)25

Drop2Rate:
  dd (float)33

Drop3Rate:
  dd (float)50

Drop4Rate:
  dd (float)100

DropRatesAOB:
  jmp newmem
  nop 3
return:
registersymbol(DropRatesAOB)
registersymbol(KeyItemRate)
registersymbol(NoDrop)
registersymbol(Drop0Rate)
registersymbol(Drop1Rate)
registersymbol(Drop2Rate)
registersymbol(Drop3Rate)
registersymbol(Drop4Rate)

[DISABLE]

DropRatesAOB:
  db F3 0F 5C F0 44 0F 2F C6

unregistersymbol(DropRatesAOB)
unregistersymbol(KeyItemRate)
unregistersymbol(NoDrop)
unregistersymbol(Drop0Rate)
unregistersymbol(Drop1Rate)
unregistersymbol(Drop2Rate)
unregistersymbol(Drop3Rate)
unregistersymbol(Drop4Rate)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe+39F0C0

SO6.exe+39F094: E8 83 4F 3F 00     - call SO6.LZ4_versionString+8FBC
SO6.exe+39F099: 39 38              - cmp [rax],edi
SO6.exe+39F09B: 0F 86 BE 00 00 00  - jbe SO6.exe+39F15F
SO6.exe+39F0A1: 4D 85 D2           - test r10,r10
SO6.exe+39F0A4: 0F 84 2B 01 00 00  - je SO6.exe+39F1D5
SO6.exe+39F0AA: BA 0C 00 00 00     - mov edx,0000000C
SO6.exe+39F0AF: 49 8B CA           - mov rcx,r10
SO6.exe+39F0B2: E8 65 4F 3F 00     - call SO6.LZ4_versionString+8FBC
SO6.exe+39F0B7: 0F 28 C7           - movaps xmm0,xmm7
SO6.exe+39F0BA: F3 0F 59 44 18 04  - mulss xmm0,[rax+rbx+04]
// ---------- INJECTING HERE ----------
SO6.exe+39F0C0: F3 0F 5C F0        - subss xmm6,xmm0
// ---------- DONE INJECTING  ----------
SO6.exe+39F0C4: 44 0F 2F C6        - comiss xmm8,xmm6
SO6.exe+39F0C8: 0F 82 91 00 00 00  - jb SO6.exe+39F15F
SO6.exe+39F0CE: 49 8B CD           - mov rcx,r13
SO6.exe+39F0D1: E8 26 05 00 00     - call SO6.exe+39F5FC
SO6.exe+39F0D6: 49 8B 54 FE 04     - mov rdx,[r14+rdi*8+04]
SO6.exe+39F0DB: 45 33 C0           - xor r8d,r8d
SO6.exe+39F0DE: 48 8B C8           - mov rcx,rax
SO6.exe+39F0E1: 48 8B D8           - mov rbx,rax
SO6.exe+39F0E4: E8 87 64 E1 FF     - call SO6.exe+1B5570
SO6.exe+39F0E9: 48 8B 4D CF        - mov rcx,[rbp-31]
}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>99</ID>
                      <Description>"First Item Chance"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>Drop0Rate</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>100</ID>
                      <Description>"Second Item Chance"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>Drop1Rate</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>101</ID>
                      <Description>"Third Item Chance"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>Drop2Rate</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>102</ID>
                      <Description>"Fourth Item Chance"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>Drop3Rate</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>103</ID>
                      <Description>"Fifth Item Chance"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>Drop4Rate</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>115822</ID>
                  <Description>"Hit Multiplier"</Description>
                  <Options moHideChildren="1"/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{  Game Executable   : SO6.exe
   Author            : Tuuup!
   Executable Version: 1.0.0.0
   Script Date       : 2022-10-30

   Used with permission.
}
[ENABLE]
aobscanmodule(hitscombo,SO6.exe,FFC2E8????????488D8F????????4889DA)
registersymbol(hitscombo hitscombobkp chit)
alloc(newmem,128,hitscombo)
label(return chit)
label(hitscombobkp)
newmem:

 add edx,[chit]/// inc edx
  reassemble(hitscombo+2,5)
  jmp return
  
hitscombobkp:
readmem(hitscombo,7)
chit:
dd #2
hitscombo:
  jmp newmem
  nop 2
return:

[DISABLE]
hitscombo:
 // db FF C2 E8 E3 90 70 F8
readmem(hitscombobkp,7)
unregistersymbol(*)
dealloc(*)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe.udata+54F07E6

SO6.exe.udata+54F0762: 0F 85 8E E7 BD 05                 - jne SO6.exe.udata+B0CEEF6
SO6.exe.udata+54F0768: 52                                - push rdx
SO6.exe.udata+54F0769: F7 14 24                          - not [rsp]
SO6.exe.udata+54F076C: 81 2C 24 FF B8 51 F5              - sub [rsp],F551B8FF
SO6.exe.udata+54F0773: F7 D2                             - not edx
SO6.exe.udata+54F0775: D1 1C 24                          - rcr [rsp],1
SO6.exe.udata+54F0778: 81 F2 FF B8 51 F5                 - xor edx,F551B8FF
SO6.exe.udata+54F077E: D1 EA                             - shr edx,1
SO6.exe.udata+54F0780: 2B 14 24                          - sub edx,[rsp]
SO6.exe.udata+54F0783: C1 C2 02                          - rol edx,02
SO6.exe.udata+54F0786: 48 8D 64 24 08                    - lea rsp,[rsp+08]
SO6.exe.udata+54F078B: 0F 8B 3F 04 4C 02                 - jnp SO6.exe.udata+79B0BD0
SO6.exe.udata+54F0791: 0F 1F 80 00 00 00 00              - nop dword ptr [rax+00000000]
SO6.exe.udata+54F0798: 48 89 5C 24 08                    - mov [rsp+08],rbx
SO6.exe.udata+54F079D: 57                                - push rdi
SO6.exe.udata+54F079E: 48 83 EC 20                       - sub rsp,20
SO6.exe.udata+54F07A2: 48 89 CF                          - mov rdi,rcx
SO6.exe.udata+54F07A5: 48 89 D3                          - mov rbx,rdx
SO6.exe.udata+54F07A8: 48 8B 89 80 00 00 00              - mov rcx,[rcx+00000080]
SO6.exe.udata+54F07AF: 48 85 C9                          - test rcx,rcx
SO6.exe.udata+54F07B2: 74 39                             - je SO6.exe.udata+54F07ED
SO6.exe.udata+54F07B4: E8 2F AD 4E F8                    - call SO6.exe.xtext+1674E8
SO6.exe.udata+54F07B9: 48 81 05 E8 6C A5 09 F1 DB B6 18  - add qword ptr [SO6.exe.udata+EF474AC],18B6DBF1
SO6.exe.udata+54F07C4: 48 B9 2E 55 BC D9 02 C5 BF A3     - mov rcx,A3BFC502D9BC552E
SO6.exe.udata+54F07CE: 48 39 C8                          - cmp rax,rcx
SO6.exe.udata+54F07D1: 75 1A                             - jne SO6.exe.udata+54F07ED
SO6.exe.udata+54F07D3: 80 7B 58 00                       - cmp byte ptr [rbx+58],00
SO6.exe.udata+54F07D7: 75 14                             - jne SO6.exe.udata+54F07ED
SO6.exe.udata+54F07D9: 48 8B 0D 48 65 80 FA              - mov rcx,[SO6.exe+2483D28]
SO6.exe.udata+54F07E0: 8B 91 54 14 00 00                 - mov edx,[rcx+00001454]
// ---------- INJECTING HERE ----------
SO6.exe.udata+54F07E6: FF C2                             - inc edx
// ---------- DONE INJECTING  ----------
SO6.exe.udata+54F07E8: E8 E3 90 70 F8                    - call SO6.exe.xtext+3858D0
SO6.exe.udata+54F07ED: 48 8D 8F D0 21 00 00              - lea rcx,[rdi+000021D0]
SO6.exe.udata+54F07F4: 48 89 DA                          - mov rdx,rbx
SO6.exe.udata+54F07F7: E8 DC 3E 74 F8                    - call SO6.exe.xtext+3C06D8
SO6.exe.udata+54F07FC: 48 8D 8F 88 00 00 00              - lea rcx,[rdi+00000088]
SO6.exe.udata+54F0803: 48 89 DA                          - mov rdx,rbx
SO6.exe.udata+54F0806: 48 8B 5C 24 30                    - mov rbx,[rsp+30]
SO6.exe.udata+54F080B: 48 83 C4 20                       - add rsp,20
SO6.exe.udata+54F080F: 5F                                - pop rdi
SO6.exe.udata+54F0810: E9 37 3E 74 F8                    - jmp SO6.exe.xtext+3C064C
SO6.exe.udata+54F0815: CC                                - int 3 
SO6.exe.udata+54F0816: BF 7C 5F 69 70                    - mov edi,70695F7C
SO6.exe.udata+54F081B: 19 FD                             - sbb ebp,edi
SO6.exe.udata+54F081D: 31 FD                             - xor ebp,edi
SO6.exe.udata+54F081F: 0F 8D FB 3C 83 FD                 - jnl SO6.exe.udata+2D24520
SO6.exe.udata+54F0825: C1 FF 07                          - sar edi,07
SO6.exe.udata+54F0828: 81 D5 FA D4 D2 25                 - adc ebp,25D2D4FA
SO6.exe.udata+54F082E: 41 52                             - push r10
SO6.exe.udata+54F0830: 83 F7 FF                          - xor edi,-01
SO6.exe.udata+54F0833: 83 EF FF                          - sub edi,-01
SO6.exe.udata+54F0836: 01 FD                             - add ebp,edi
SO6.exe.udata+54F0838: 29 EF                             - sub edi,ebp
SO6.exe.udata+54F083A: F7 DF                             - neg edi
SO6.exe.udata+54F083C: 41 89 EA                          - mov r10d,ebp
SO6.exe.udata+54F083F: 44 29 D7                          - sub edi,r10d
SO6.exe.udata+54F0842: 41 5A                             - pop r10
SO6.exe.udata+54F0844: 0F 83 A2 AD 1B 04                 - jae SO6.exe.udata+96AB5EC
SO6.exe.udata+54F084A: 49 C7 C3 F1 0F A2 C3              - mov r11,FFFFFFFFC3A20FF1
SO6.exe.udata+54F0851: 4C 8D 17                          - lea r10,[rdi]
SO6.exe.udata+54F0854: 4C 03 1D 76 39 D9 FB              - add r11,[SO6.exe.udata+12841D1]
}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>115823</ID>
                      <Description>"Multiplier"</Description>
                      <ShowAsSigned>1</ShowAsSigned>
                      <VariableType>4 Bytes</VariableType>
                      <Address>chit</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>89</ID>
                  <Description>"Chain Multiplier"</Description>
                  <Options moHideChildren="1"/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : SO6.exe
  Version: 
  Date   : 2022-10-30
  Author : asmor

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(ChainMultAOB,SO6.exe,89 86 04 54 07 00) // should be unique
alloc(newmem,$1000,ChainMultAOB)

label(code)
label(return)
label(ChainMult)

newmem:

code:
  mov eax,[ChainMult]
  mov [rsi+00075404],eax
  mov eax,(float)1  //return eax to 1
  jmp return

ChainMult:
  dd (float)5

ChainMultAOB:
  jmp newmem
  nop
return:
registersymbol(ChainMultAOB)
registersymbol(ChainMult)

[DISABLE]

ChainMultAOB:
  db 89 86 04 54 07 00

unregistersymbol(ChainMultAOB)
unregistersymbol(ChainMult)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe+173D88

SO6.exe+173D54: 0F 85 86 02 00 00     - jne SO6.exe+173FE0
SO6.exe+173D5A: 44 38 B6 75 14 00 00  - cmp [rsi+00001475],r14l
SO6.exe+173D61: 0F 85 6E 03 00 00     - jne SO6.exe+1740D5
SO6.exe+173D67: 44 88 A6 76 14 00 00  - mov [rsi+00001476],r12l
SO6.exe+173D6E: 48 85 DB              - test rbx,rbx
SO6.exe+173D71: 0F 85 22 01 00 00     - jne SO6.exe+173E99
SO6.exe+173D77: B8 00 00 80 3F        - mov eax,3F800000
DropRateMultAOB: E9 7F C2 E4 FF        - jmp 13FFC0000
SO6.exe+173D81: 90                    - nop 
SO6.exe+173D82: 89 86 00 54 07 00     - mov [rsi+00075400],eax
// ---------- INJECTING HERE ----------
SO6.exe+173D88: 89 86 04 54 07 00     - mov [rsi+00075404],eax
// ---------- DONE INJECTING  ----------
SO6.exe+173D8E: 44 38 AE F0 16 00 00  - cmp [rsi+000016F0],r13l
SO6.exe+173D95: 0F 85 D4 02 00 00     - jne SO6.exe+17406F
SO6.exe+173D9B: 48 8B 86 C8 14 00 00  - mov rax,[rsi+000014C8]
SO6.exe+173DA2: 48 39 86 C0 14 00 00  - cmp [rsi+000014C0],rax
SO6.exe+173DA9: 0F 85 E7 02 00 00     - jne SO6.exe+174096
SO6.exe+173DAF: E8 44 04 00 00        - call SO6.exe+1741F8
SO6.exe+173DB4: 0F 28 D0              - movaps xmm2,xmm0
SO6.exe+173DB7: 44 38 AE 0C 54 07 00  - cmp [rsi+0007540C],r13l
SO6.exe+173DBE: 0F 85 8B 6F 85 00     - jne SO6.exe+9CAD4F
SO6.exe+173DC4: 48 8B CE              - mov rcx,rsi
}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>90</ID>
                      <Description>"Multiplier"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>ChainMult</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>115851</ID>
              <Description>"Field"</Description>
              <Options moHideChildren="1"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>115829</ID>
                  <Description>"DP Multiplier"</Description>
                  <Options moHideChildren="1"/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : SO6.exe
  Version: 
  Date   : 2022-11-03
  Author : asmor

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(dpMultAOB,SO6.exe,03 93 04 01 00 00 E8 60) // should be unique
alloc(newmem,$1000,dpMultAOB)

label(code)
label(return)
label(dpMult)

newmem:

code:
  push eax
  mov eax,[rbx+104]
  imul eax,[dpMult]
  add edx,eax
  pop eax
  jmp return

dpMult:
  db #05

dpMultAOB:
  jmp newmem
  nop
return:
registersymbol(dpMultAOB)
registersymbol(dpMult)

[DISABLE]

dpMultAOB:
  db 03 93 04 01 00 00

unregistersymbol(dpMultAOB)
unregistersymbol(dpMult)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe+B21EED

SO6.exe+B21EBB: 48 8D 15 DE 4E C8 00  - lea rdx,[SO6.exe+17A6DA0]
SO6.exe+B21EC2: 48 8B 89 E0 46 00 00  - mov rcx,[rcx+000046E0]
SO6.exe+B21EC9: E8 5E CD 87 FF        - call SO6.exe+39EC2C
SO6.exe+B21ECE: 45 33 C9              - xor r9d,r9d
SO6.exe+B21ED1: 48 8B D0              - mov rdx,rax
SO6.exe+B21ED4: 48 8B CE              - mov rcx,rsi
SO6.exe+B21ED7: 45 8D 41 0A           - lea r8d,[r9+0A]
SO6.exe+B21EDB: E8 78 DA 87 FF        - call SO6.exe+39F958
SO6.exe+B21EE0: 48 8B 0D 41 1E 96 01  - mov rcx,[SO6.exe+2483D28]
SO6.exe+B21EE7: 8B 91 10 54 07 00     - mov edx,[rcx+00075410]
// ---------- INJECTING HERE ----------
SO6.exe+B21EED: 03 93 04 01 00 00     - add edx,[rbx+00000104]
// ---------- DONE INJECTING  ----------
SO6.exe+B21EF3: E8 60 56 05 00        - call SO6.exe+B77558
SO6.exe+B21EF8: 45 84 FF              - test r15l,r15l
SO6.exe+B21EFB: 75 27                 - jne SO6.exe+B21F24
SO6.exe+B21EFD: 48 8D B3 90 01 00 00  - lea rsi,[rbx+00000190]
SO6.exe+B21F04: 48 8B 0E              - mov rcx,[rsi]
SO6.exe+B21F07: 48 85 C9              - test rcx,rcx
SO6.exe+B21F0A: 74 18                 - je SO6.exe+B21F24
SO6.exe+B21F0C: 41 B1 01              - mov r9l,01
SO6.exe+B21F0F: 4C 8B C7              - mov r8,rdi
SO6.exe+B21F12: 0F 57 C9              - xorps xmm1,xmm1
}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>115830</ID>
                      <Description>"Multiplier"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>4 Bytes</VariableType>
                      <Address>dpMult</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>115844</ID>
                  <Description>"Always Scan - Combat Disables"</Description>
                  <Options moHideChildren="1"/>
                  <Color>000000</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : SO6.exe
  Version:
  Date   : 2022-11-03
  Author : asmor

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(AlwaysScanAOB,SO6.exe,83 A3 98 05 00 00 00 E9 47) // should be unique
aobscanmodule(BattleStartAOB,SO6.exe,C7 83 98 0D 00 00 01 00 00 00) // should be unique
aobscanmodule(BossStartAOB,SO6.exe,89 BB 98 0D 00 00) // should be unique
aobscanmodule(BattleStopAOB,SO6.exe,83 A3 98 0D 00 00 00 EB) // should be unique
alloc(AlwaysScannewmem,$1000,AlwaysScanAOB)
alloc(BattleStartnewmem,$1000,BattleStartAOB)
alloc(BossStartnewmem,$1000,BossStartAOB)
alloc(BattleStopnewmem,$1000,BattleStopAOB)

label(AlwaysScancode)
label(AlwaysScanreturn)
label(BattleStartcode)
label(BattleStartreturn)
label(BossStartcode)
label(BossStartreturn)
label(BattleStopcode)
label(BattleStopreturn)
label(ScanState)
label(BattleState)

registersymbol(AlwaysScanAOB)
registersymbol(BattleStartAOB)
registersymbol(BossStartAOB)
registersymbol(BattleStopAOB)
registersymbol(ScanState)
registersymbol(BattleState)


//Logic to turn Scan off
AlwaysScannewmem:

AlwaysScancode:
  push rax
  mov rax,[rbx+598]                //This byte toggles when scan starts.
  mov [ScanState],rax
  pop rax
  cmp byte ptr [BattleState],00   //If not in battle...
  je @f                           //skip the...
  and dword ptr [rbx+00000598],00 //scan disable.
  mov [ScanState],00
  jmp AlwaysScanreturn
@@:
  jmp AlwaysScanreturn

ScanState:
  dd 00 00

BattleState:
  dd 00 00

AlwaysScanAOB:
  jmp AlwaysScannewmem
  nop 2
AlwaysScanreturn:

//Logic to flag Battle Start
BattleStartnewmem:

BattleStartcode:
  mov [rbx+00000D98],00000001
  mov [BattleState],00000001
  jmp BattleStartreturn

BattleStartAOB:
  jmp BattleStartnewmem
  nop 5
BattleStartreturn:

//Logic to flag Boss Start
BossStartnewmem:

BossStartcode:
  mov [rbx+00000D98],edi
  mov [BattleState],edi
  jmp BossStartreturn

BossStartAOB:
  jmp BossStartnewmem
  nop
BossStartreturn:

//Logic to flag Battle Stop
BattleStopnewmem:

BattleStopcode:
  and dword ptr [rbx+00000D98],00
  mov dword ptr [BattleState],00
  jmp BattleStopreturn

BattleStopAOB:
  jmp BattleStopnewmem
  nop 2
BattleStopreturn:

[DISABLE]

AlwaysScanAOB:
  db 83 A3 98 05 00 00 00

BattleStartAOB:
  db C7 83 98 0D 00 00 01 00 00 00

BossStartAOB:
  db 89 BB 98 0D 00 00

BattleStopAOB:
  db 83 A3 98 0D 00 00 00 EB

unregistersymbol(AlwaysScanAOB)
unregistersymbol(ScanState)
unregistersymbol(BattleState)
unregistersymbol(BattleStartAOB)
unregistersymbol(BossStartAOB)
unregistersymbol(BattleStopAOB)
dealloc(AlwaysScannewmem)
dealloc(BattleStartnewmem)
dealloc(BattleStopnewmem)
dealloc(BossStartnewmem)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe+AEFC6

SO6.exe+AEF95: 89 B0 28 06 00 00        - mov [rax+00000628],esi
SO6.exe+AEF9B: F3 0F 10 0D D9 B7 59 01  - movss xmm1,[SO6.exe+164A77C]
SO6.exe+AEFA3: 48 8B 0F                 - mov rcx,[rdi]
SO6.exe+AEFA6: E8 85 16 2E 00           - call SO6.exe+390630
SO6.exe+AEFAB: 48 8B CF                 - mov rcx,rdi
SO6.exe+AEFAE: E8 51 A2 0A 00           - call SO6.exe+159204
SO6.exe+AEFB3: 48 8D BB 90 05 00 00     - lea rdi,[rbx+00000590]
SO6.exe+AEFBA: 48 8B 0F                 - mov rcx,[rdi]
SO6.exe+AEFBD: 48 85 C9                 - test rcx,rcx
SO6.exe+AEFC0: 0F 85 AC 44 8A 00        - jne SO6.exe+953472
// ---------- INJECTING HERE ----------
SO6.exe+AEFC6: 83 A3 98 05 00 00 00     - and dword ptr [rbx+00000598],00
// ---------- DONE INJECTING  ----------
SO6.exe+AEFCD: E9 47 FF FF FF           - jmp SO6.exe+AEF19
SO6.exe+AEFD2: CC                       - int 3
SO6.exe+AEFD3: CC                       - int 3
SO6.exe+AEFD4: 48 83 EC 28              - sub rsp,28
SO6.exe+AEFD8: E8 17 00 00 00           - call SO6.exe+AEFF4
SO6.exe+AEFDD: 48 85 C0                 - test rax,rax
SO6.exe+AEFE0: 75 05                    - jne SO6.exe+AEFE7
SO6.exe+AEFE2: 48 83 C4 28              - add rsp,28
SO6.exe+AEFE6: C3                       - ret
SO6.exe+AEFE7: 83 B8 80 00 00 00 06     - cmp dword ptr [rax+00000080],06
}

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe+3A0E0B

SO6.exe+3A0DE6: 48 8B 41 60                    - mov rax,[rcx+60]
SO6.exe+3A0DEA: 48 39 41 58                    - cmp [rcx+58],rax
SO6.exe+3A0DEE: 74 27                          - je SO6.exe+3A0E17
SO6.exe+3A0DF0: 83 B9 98 0D 00 00 01           - cmp dword ptr [rcx+00000D98],01
SO6.exe+3A0DF7: 75 06                          - jne SO6.exe+3A0DFF
SO6.exe+3A0DF9: 48 83 C4 20                    - add rsp,20
SO6.exe+3A0DFD: 5B                             - pop rbx
SO6.exe+3A0DFE: C3                             - ret
SO6.exe+3A0DFF: E8 58 5E F3 FF                 - call SO6.exe+2D6C5C
SO6.exe+3A0E04: 83 A3 90 0D 00 00 00           - and dword ptr [rbx+00000D90],00
// ---------- INJECTING HERE ----------
SO6.exe+3A0E0B: C7 83 98 0D 00 00 01 00 00 00  - mov [rbx+00000D98],00000001
// ---------- DONE INJECTING  ----------
SO6.exe+3A0E15: EB E2                          - jmp SO6.exe+3A0DF9
SO6.exe+3A0E17: 83 B9 98 0D 00 00 00           - cmp dword ptr [rcx+00000D98],00
SO6.exe+3A0E1E: 74 D9                          - je SO6.exe+3A0DF9
SO6.exe+3A0E20: E8 67 0C 15 00                 - call SO6.exe+4F1A8C
SO6.exe+3A0E25: 83 A3 98 0D 00 00 00           - and dword ptr [rbx+00000D98],00
SO6.exe+3A0E2C: EB CB                          - jmp SO6.exe+3A0DF9
SO6.exe+3A0E2E: CC                             - int 3
SO6.exe+3A0E2F: CC                             - int 3
SO6.exe+3A0E30: 48 89 5C 24 08                 - mov [rsp+08],rbx
SO6.exe+3A0E35: 57                             - push rdi
}

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe+3A0E25

SO6.exe+3A0DF9: 48 83 C4 20                    - add rsp,20
SO6.exe+3A0DFD: 5B                             - pop rbx
SO6.exe+3A0DFE: C3                             - ret
SO6.exe+3A0DFF: E8 58 5E F3 FF                 - call SO6.exe+2D6C5C
SO6.exe+3A0E04: 83 A3 90 0D 00 00 00           - and dword ptr [rbx+00000D90],00
SO6.exe+3A0E0B: C7 83 98 0D 00 00 01 00 00 00  - mov [rbx+00000D98],00000001
SO6.exe+3A0E15: EB E2                          - jmp SO6.exe+3A0DF9
SO6.exe+3A0E17: 83 B9 98 0D 00 00 00           - cmp dword ptr [rcx+00000D98],00
SO6.exe+3A0E1E: 74 D9                          - je SO6.exe+3A0DF9
SO6.exe+3A0E20: E8 67 0C 15 00                 - call SO6.exe+4F1A8C
// ---------- INJECTING HERE ----------
SO6.exe+3A0E25: 83 A3 98 0D 00 00 00           - and dword ptr [rbx+00000D98],00
// ---------- DONE INJECTING  ----------
SO6.exe+3A0E2C: EB CB                          - jmp SO6.exe+3A0DF9
SO6.exe+3A0E2E: CC                             - int 3
SO6.exe+3A0E2F: CC                             - int 3
SO6.exe+3A0E30: 48 89 5C 24 08                 - mov [rsp+08],rbx
SO6.exe+3A0E35: 57                             - push rdi
SO6.exe+3A0E36: 48 83 EC 20                    - sub rsp,20
SO6.exe+3A0E3A: 8B FA                          - mov edi,edx
SO6.exe+3A0E3C: 48 8B D9                       - mov rbx,rcx
SO6.exe+3A0E3F: 39 91 98 0D 00 00              - cmp [rcx+00000D98],edx
SO6.exe+3A0E45: 75 0B                          - jne SO6.exe+3A0E52
}

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe+3A0E6B

SO6.exe+3A0E4C: 48 83 C4 20           - add rsp,20
SO6.exe+3A0E50: 5F                    - pop rdi
SO6.exe+3A0E51: C3                    - ret
SO6.exe+3A0E52: 44 8B C7              - mov r8d,edi
SO6.exe+3A0E55: 85 FF                 - test edi,edi
SO6.exe+3A0E57: 74 1A                 - je SO6.exe+3A0E73
SO6.exe+3A0E59: 41 83 E8 01           - sub r8d,01
SO6.exe+3A0E5D: 75 1B                 - jne SO6.exe+3A0E7A
SO6.exe+3A0E5F: E8 F8 5D F3 FF        - call SO6.exe+2D6C5C
SO6.exe+3A0E64: 83 A3 90 0D 00 00 00  - and dword ptr [rbx+00000D90],00
// ---------- INJECTING HERE ----------
SO6.exe+3A0E6B: 89 BB 98 0D 00 00     - mov [rbx+00000D98],edi
// ---------- DONE INJECTING  ----------
SO6.exe+3A0E71: EB D4                 - jmp SO6.exe+3A0E47
SO6.exe+3A0E73: E8 14 0C 15 00        - call SO6.exe+4F1A8C
SO6.exe+3A0E78: EB F1                 - jmp SO6.exe+3A0E6B
SO6.exe+3A0E7A: 41 83 F8 01           - cmp r8d,01
SO6.exe+3A0E7E: 75 EB                 - jne SO6.exe+3A0E6B
SO6.exe+3A0E80: EB DD                 - jmp SO6.exe+3A0E5F
SO6.exe+3A0E82: CC                    - int 3
SO6.exe+3A0E83: CC                    - int 3
SO6.exe+3A0E84: 48 89 5C 24 18        - mov [rsp+18],rbx
SO6.exe+3A0E89: 55                    - push rbp
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>115833</ID>
                  <Description>"Faster Scan"</Description>
                  <Color>000000</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : SO6.exe
  Version: 
  Date   : 2022-11-03
  Author : asmor

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(FasterScanAOB,SO6.exe,83 BF 9C 05 00 00 01) // should be unique
alloc(newmem,$1000,FasterScanAOB)

label(code)
label(return)

newmem:

code:
  cmp dword ptr [rdi+0000059C],00
  jmp return

FasterScanAOB:
  jmp newmem
  nop 2
return:
registersymbol(FasterScanAOB)

[DISABLE]

FasterScanAOB:
  db 83 BF 9C 05 00 00 01

unregistersymbol(FasterScanAOB)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe+3A4DDF

SO6.exe+3A4DAE: 48 85 C9                       - test rcx,rcx
SO6.exe+3A4DB1: 74 12                          - je SO6.exe+3A4DC5
SO6.exe+3A4DB3: 41 B1 01                       - mov r9l,01
SO6.exe+3A4DB6: 4C 8B 83 C0 00 00 00           - mov r8,[rbx+000000C0]
SO6.exe+3A4DBD: 0F 57 C9                       - xorps xmm1,xmm1
SO6.exe+3A4DC0: E8 5F DA E2 FF                 - call SO6.exe+1D2824
SO6.exe+3A4DC5: C7 87 98 05 00 00 01 00 00 00  - mov [rdi+00000598],00000001
SO6.exe+3A4DCF: C6 87 A0 05 00 00 00           - mov byte ptr [rdi+000005A0],00
SO6.exe+3A4DD6: 48 8D 4D EF                    - lea rcx,[rbp-11]
SO6.exe+3A4DDA: E8 89 4D D0 FF                 - call SO6.exe+A9B68
// ---------- INJECTING HERE ----------
SO6.exe+3A4DDF: 83 BF 9C 05 00 00 01           - cmp dword ptr [rdi+0000059C],01
// ---------- DONE INJECTING  ----------
SO6.exe+3A4DE6: 0F 85 29 FF FF FF              - jne SO6.exe+3A4D15
SO6.exe+3A4DEC: E9 87 10 6B 00                 - jmp SO6.exe+A55E78
SO6.exe+3A4DF1: CC                             - int 3 
SO6.exe+3A4DF2: CC                             - int 3 
SO6.exe+3A4DF3: CC                             - int 3 
SO6.exe+3A4DF4: 48 81 EC 88 01 00 00           - sub rsp,00000188
SO6.exe+3A4DFB: 48 83 B9 A8 01 00 00 00        - cmp qword ptr [rcx+000001A8],00
SO6.exe+3A4E03: 74 43                          - je SO6.exe+3A4E48
SO6.exe+3A4E05: 48 8B 89 50 01 00 00           - mov rcx,[rcx+00000150]
SO6.exe+3A4E0C: 48 85 C9                       - test rcx,rcx
}
</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>45</ID>
              <Description>"Menu"</Description>
              <Options moHideChildren="1"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>115850</ID>
                  <Description>"Enable Chaos Option"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : SO6.exe
  Version:
  Date   : 2022-11-05
  Author : asmor

  New Code based on findings by talimity
  In the original code, the method that checks
  if chaos was available was skipped entirely.
  For reasons, this made it difficult to
  implement as the code surrounding the blocks
  was unrelated to what needed to be changed.
  The solution was manually implement a jmp,
  but this made the code prone to breaking.

  This version leaves the method in-place.
  Instead, just before returning,
  the value is assigned.  Functionally,
  this is identical, but should be
  resistant to breaking.
}

[ENABLE]

aobscanmodule(EnableChaosOptionAOB,SO6.exe,48 8B 6C 24 38 48 8B 74 24 40 48 83 C4 20 5F C3 88) // should be unique
alloc(newmem,$1000,EnableChaosOptionAOB)

label(code)
label(return)

newmem:

code:
  mov rbp,[rsp+38]
  mov rax,01
  jmp return

EnableChaosOptionAOB:
  jmp newmem
return:
registersymbol(EnableChaosOptionAOB)

[DISABLE]

EnableChaosOptionAOB:
  db 48 8B 6C 24 38

unregistersymbol(EnableChaosOptionAOB)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe+61CCBFD

SO6.exe+61CCBDA: BA 01 00 00 00        - mov edx,00000001
SO6.exe+61CCBDF: 48 D3 E2              - shl rdx,cl
SO6.exe+61CCBE2: 4C 21 C2              - and rdx,r8
SO6.exe+61CCBE5: 48 F7 C2 FF FF FF 7F  - test rdx,7FFFFFFF
SO6.exe+61CCBEC: 0F 95 D1              - setne cl
SO6.exe+61CCBEF: 40 84 F6              - test sil,sil
SO6.exe+61CCBF2: 75 1D                 - jne SO6.exe+61CCC11
SO6.exe+61CCBF4: 84 C9                 - test cl,cl
SO6.exe+61CCBF6: 75 19                 - jne SO6.exe+61CCC11
SO6.exe+61CCBF8: 48 8B 5C 24 30        - mov rbx,[rsp+30]
// ---------- INJECTING HERE ----------
SO6.exe+61CCBFD: 48 8B 6C 24 38        - mov rbp,[rsp+38]
// ---------- DONE INJECTING  ----------
SO6.exe+61CCC02: 48 8B 74 24 40        - mov rsi,[rsp+40]
SO6.exe+61CCC07: 48 83 C4 20           - add rsp,20
SO6.exe+61CCC0B: 5F                    - pop rdi
SO6.exe+61CCC0C: C3                    - ret 
SO6.exe+61CCC0D: 88 C1                 - mov cl,al
SO6.exe+61CCC0F: EB DE                 - jmp SO6.exe+61CCBEF
SO6.exe+61CCC11: B0 01                 - mov al,01
SO6.exe+61CCC13: EB E3                 - jmp SO6.exe+61CCBF8
SO6.exe+61CCC15: CC                    - int 3 
SO6.exe+61CCC16: 09 C3                 - or ebx,eax
}




//ORIGINAL SCRIPT BY talimity
//Modified by Asmoranomar
//Used with permission.
{
  Game   : SO6.exe
  Version: 1.0.0, build 22689
  Date   : 2022-11-05
  Author : Talim

  Bypasses function which checks game clear SystemEventFlag, instead always
  returning true.

  Will break during updates; to find it again, look for a calling function with
  references to strings like "SYS_DIFFICULTY_04".

  The jmp instruction seems to be surrounded by garbage instructions or data.
  IDA did a better job at figuring out x-refs than CE or x64dbg.
}
//define(address,"SO6.exe"+30E0AC)
//define(bytes,E9 B9 EA EB 05)
//
//[ENABLE]
//
//assert(address,bytes)
//alloc(newmem,$1000,"SO6.exe"+30E0AC)
//
//label(code)
//
//newmem:
//
//code:
//  mov al,1
//  ret
//  nop 2
//
//address:
//  jmp newmem
//
//[DISABLE]
//
//address:
//  db bytes
//  // jmp SO6.exe+61CCB6A
//
//dealloc(newmem)
{
// ORIGINAL CODE - INJECTION POINT: SO6.exe+30E0AC

SO6.exe+30E08D: 59                       - pop rcx
SO6.exe+30E08E: F0 0F 89 17 DE 13 00     - lock jns SO6.exe+44BEAC
SO6.exe+30E095: FA                       - cli
SO6.exe+30E096: 98                       - cwde
SO6.exe+30E097: 8D F1                    - lea esi,ecx
SO6.exe+30E099: 67 0F 8D EA 22 DD FF     - jnl SO6.exe+E038A
SO6.exe+30E0A0: 0F 86 30 A2 DD FF        - jbe SO6.exe+E82D6
SO6.exe+30E0A6: C9                       - leave
SO6.exe+30E0A7: 33 2F                    - xor ebp,[rdi]
SO6.exe+30E0A9: 86 78 1E                 - xchg [rax+1E],bh
// ---------- INJECTING HERE ----------
SO6.exe+30E0AC: E9 B9 EA EB 05           - jmp SO6.exe+61CCB6A
// ---------- DONE INJECTING  ----------
SO6.exe+30E0B1: E9 70 82 17 00           - jmp SO6.exe+486326
SO6.exe+30E0B6: DC 62 95                 - fsub qword ptr [rdx-6B]
SO6.exe+30E0B9: 21 96 E9 6E F4 0E        - and [rsi+0EF46EE9],edx
SO6.exe+30E0BF: 00 0F                    - add [rdi],cl
SO6.exe+30E0C1: 83 A4 D0 00 00 AF 0F 8E  - and dword ptr [rax+rdx*8+0FAF0000],-72
SO6.exe+30E0C9: F2 84 1F                 - repne test [rdi],bl
SO6.exe+30E0CC: 00 26                    - add [rsi],ah
SO6.exe+30E0CE: 22 F9                    - and bh,cl
SO6.exe+30E0D0: AD                       - lodsd
SO6.exe+30E0D1: EB 5E                    - jmp SO6.exe+30E131
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>0</ID>
                  <Description>"No Fol Decrease"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : SO6.exe
  Version: 
  Date   : 2022-10-27
  Author : asmor

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(moneyreduc,SO6.exe,89 38 45 84 FF) // should be unique
alloc(newmem,$1000,moneyreduc)

label(code)
label(return)

newmem:

code:
  cmp [rax],edi
  jge @f
  mov [rax],edi
@@:
  test r15l,r15l
  jmp return

moneyreduc:
  jmp newmem
return:
registersymbol(moneyreduc)

[DISABLE]

moneyreduc:
  db 89 38 45 84 FF

unregistersymbol(moneyreduc)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe+39F569

SO6.exe+39F53D: 48 8D 4C 24 38     - lea rcx,[rsp+38]
SO6.exe+39F542: E8 61 4E DB FF     - call SO6.exe+1543A8
SO6.exe+39F547: BA 1A 00 00 00     - mov edx,0000001A
SO6.exe+39F54C: 48 8B C8           - mov rcx,rax
SO6.exe+39F54F: E8 80 80 DD FF     - call SO6.exe+1775D4
SO6.exe+39F554: 3B F8              - cmp edi,eax
SO6.exe+39F556: 0F 8F 22 59 6B 00  - jg SO6.exe+A54E7E
SO6.exe+39F55C: 48 8D 54 24 20     - lea rdx,[rsp+20]
SO6.exe+39F561: 48 8B CE           - mov rcx,rsi
SO6.exe+39F564: E8 D7 12 E1 FF     - call SO6.exe+1B0840
// ---------- INJECTING HERE ----------
SO6.exe+39F569: 89 38              - mov [rax],edi
// ---------- DONE INJECTING  ----------
SO6.exe+39F56B: 45 84 FF           - test r15l,r15l
SO6.exe+39F56E: 74 11              - je SO6.exe+39F581
SO6.exe+39F570: 44 8A 4D 70        - mov r9l,[rbp+70]
SO6.exe+39F574: 45 8B C6           - mov r8d,r14d
SO6.exe+39F577: 48 8D 54 24 30     - lea rdx,[rsp+30]
SO6.exe+39F57C: E8 EF 01 00 00     - call SO6.exe+39F770
SO6.exe+39F581: B3 01              - mov bl,01
SO6.exe+39F583: 48 8D 4D A0        - lea rcx,[rbp-60]
SO6.exe+39F587: E8 EC 67 DD FF     - call SO6.exe+175D78
SO6.exe+39F58C: 8A C3              - mov al,bl
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>1</ID>
                  <Description>"No SP Decrease (Skill Tree)"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : SO6.exe
  Version: 
  Date   : 2022-10-27
  Author : asmor

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(SPreduc,SO6.exe,41 29 86 00 02 00 00) // should be unique
alloc(newmem,$1000,SPreduc)

label(code)
label(return)

newmem:

code:
  sub [r14+00000200],0
  jmp return

SPreduc:
  jmp newmem
  nop 2
return:
registersymbol(SPreduc)

[DISABLE]

SPreduc:
  db 41 29 86 00 02 00 00

unregistersymbol(SPreduc)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe+C151D0

SO6.exe+C151A7: 41 83 C9 FF              - or r9d,-01
SO6.exe+C151AB: 48 8D 4F 58              - lea rcx,[rdi+58]
SO6.exe+C151AF: 44 8B C3                 - mov r8d,ebx
SO6.exe+C151B2: 48 8B D0                 - mov rdx,rax
SO6.exe+C151B5: E8 2E B4 59 FF           - call SO6.exe+1B05E8
SO6.exe+C151BA: 48 8D 4D D7              - lea rcx,[rbp-29]
SO6.exe+C151BE: E8 C5 A0 E9 FF           - call SO6.exe+AAF288
SO6.exe+C151C3: BA 12 00 00 00           - mov edx,00000012
SO6.exe+C151C8: 48 8B C8                 - mov rcx,rax
SO6.exe+C151CB: E8 04 24 56 FF           - call SO6.exe+1775D4
// ---------- INJECTING HERE ----------
SO6.exe+C151D0: 41 29 86 00 02 00 00     - sub [r14+00000200],eax
// ---------- DONE INJECTING  ----------
SO6.exe+C151D7: 79 07                    - jns SO6.exe+C151E0
SO6.exe+C151D9: 41 89 B6 00 02 00 00     - mov [r14+00000200],esi
SO6.exe+C151E0: 40 B6 01                 - mov sil,01
SO6.exe+C151E3: 40 8A C6                 - mov al,sil
SO6.exe+C151E6: 48 8B 4D 3F              - mov rcx,[rbp+3F]
SO6.exe+C151EA: 48 33 CC                 - xor rcx,rsp
SO6.exe+C151ED: E8 3E F3 B1 FF           - call SO6.exe+734530
SO6.exe+C151F2: 4C 8D 9C 24 A0 00 00 00  - lea r11,[rsp+000000A0]
SO6.exe+C151FA: 49 8B 5B 28              - mov rbx,[r11+28]
SO6.exe+C151FE: 49 8B 73 30              - mov rsi,[r11+30]
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>6</ID>
                  <Description>"No SP Decrease (Upgrades)"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : SO6.exe
  Version: 
  Date   : 2022-10-27
  Author : asmor

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(SPreduc2,SO6.exe,29 81 E8 01 00 00) // should be unique
alloc(newmem,$1000,SPreduc2)

label(code)
label(return)

newmem:

code:
  sub [rcx+000001E8],0
  jmp return

SPreduc2:
  jmp newmem
  nop
return:
registersymbol(SPreduc2)

[DISABLE]

SPreduc2:
  db 29 81 E8 01 00 00

unregistersymbol(SPreduc2)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe+7B3E31

SO6.exe+7B3E12: 83 F8 04                 - cmp eax,04
SO6.exe+7B3E15: 75 07                    - jne SO6.exe+7B3E1E
SO6.exe+7B3E17: E8 F8 AB 34 00           - call SO6.exe+AFEA14
SO6.exe+7B3E1C: EB 05                    - jmp SO6.exe+7B3E23
SO6.exe+7B3E1E: E8 DD B2 34 00           - call SO6.exe+AFF100
SO6.exe+7B3E23: 48 8B 4B 10              - mov rcx,[rbx+10]
SO6.exe+7B3E27: 33 F6                    - xor esi,esi
SO6.exe+7B3E29: 48 85 C9                 - test rcx,rcx
SO6.exe+7B3E2C: 74 18                    - je SO6.exe+7B3E46
SO6.exe+7B3E2E: 8B 43 1C                 - mov eax,[rbx+1C]
// ---------- INJECTING HERE ----------
SO6.exe+7B3E31: 29 81 E8 01 00 00        - sub [rcx+000001E8],eax
// ---------- DONE INJECTING  ----------
SO6.exe+7B3E37: 8B 81 E8 01 00 00        - mov eax,[rcx+000001E8]
SO6.exe+7B3E3D: 0F 48 C6                 - cmovs eax,esi
SO6.exe+7B3E40: 89 81 E8 01 00 00        - mov [rcx+000001E8],eax
SO6.exe+7B3E46: 48 8B 0B                 - mov rcx,[rbx]
SO6.exe+7B3E49: 48 8B B9 A8 01 00 00     - mov rdi,[rcx+000001A8]
SO6.exe+7B3E50: 48 85 FF                 - test rdi,rdi
SO6.exe+7B3E53: 74 45                    - je SO6.exe+7B3E9A
SO6.exe+7B3E55: F3 0F 10 15 4B 5F E9 00  - movss xmm2,[SO6.exe+1649DA8]
SO6.exe+7B3E5D: 48 8D 15 24 7D 00 01     - lea rdx,[SO6.exe+17BBB88]
SO6.exe+7B3E64: 48 8B CF                 - mov rcx,rdi
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>2</ID>
                  <Description>"No DP Decrease"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : SO6.exe
  Version: 
  Date   : 2022-10-27
  Author : asmor

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(DPreduc,SO6.exe,29 81 10 54 07 00) // should be unique
alloc(newmem,$1000,DPreduc)

label(code)
label(return)

newmem:

code:
  sub [rcx+00075410],0
  jmp return

DPreduc:
  jmp newmem
  nop
return:
registersymbol(DPreduc)

[DISABLE]

DPreduc:
  db 29 81 10 54 07 00

unregistersymbol(DPreduc)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe+7AD7B9

SO6.exe+7AD78A: 41 B8 01 00 00 00     - mov r8d,00000001
SO6.exe+7AD790: 48 8B D0              - mov rdx,rax
SO6.exe+7AD793: E8 50 2E A0 FF        - call SO6.exe+1B05E8
SO6.exe+7AD798: 48 8B 17              - mov rdx,[rdi]
SO6.exe+7AD79B: 44 8B 47 30           - mov r8d,[rdi+30]
SO6.exe+7AD79F: 48 8B 4F 08           - mov rcx,[rdi+08]
SO6.exe+7AD7A3: 48 8B 92 18 02 00 00  - mov rdx,[rdx+00000218]
SO6.exe+7AD7AA: E8 21 FC 39 00        - call SO6.exe+B4D3D0
SO6.exe+7AD7AF: 48 8B 0D 72 65 CD 01  - mov rcx,[SO6.exe+2483D28]
SO6.exe+7AD7B6: 8B 47 34              - mov eax,[rdi+34]
// ---------- INJECTING HERE ----------
SO6.exe+7AD7B9: 29 81 10 54 07 00     - sub [rcx+00075410],eax
// ---------- DONE INJECTING  ----------
SO6.exe+7AD7BF: 79 07                 - jns SO6.exe+7AD7C8
SO6.exe+7AD7C1: 83 A1 10 54 07 00 00  - and dword ptr [rcx+00075410],00
SO6.exe+7AD7C8: 48 8D 05 A9 93 00 01  - lea rax,[SO6.exe+17B6B78]
SO6.exe+7AD7CF: 48 89 44 24 30        - mov [rsp+30],rax
SO6.exe+7AD7D4: 48 8D 4C 24 30        - lea rcx,[rsp+30]
SO6.exe+7AD7D9: 48 89 4C 24 20        - mov [rsp+20],rcx
SO6.exe+7AD7DE: 48 8D 05 BB 95 00 01  - lea rax,[SO6.exe+17B6DA0]
SO6.exe+7AD7E5: 48 89 44 24 38        - mov [rsp+38],rax
SO6.exe+7AD7EA: 48 8D 4C 24 48        - lea rcx,[rsp+48]
SO6.exe+7AD7EF: 48 8D 05 0A 6E E2 00  - lea rax,[SO6.exe+15D4600]
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>110</ID>
                  <Description>"No Item Decrease"</Description>
                  <Options moHideChildren="1"/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : SO6.exe
  Version: 
  Date   : 2022-11-01
  Author : asmor

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(ItemReducAOB,SO6.exe,29 77 30 44 8B 77 30) // should be unique
alloc(newmem,$1000,ItemReducAOB)

label(code)
label(return)
label(ItemLimit)


newmem:

code:
  push rdx
  mov rdx,[ItemLimit]
  cmp [rdi+30],rdx      //Credit Anon9
  jng @f                //Modified by Asmoranomar
  sub [rdi+30],esi      //Used with Permission
@@:
  pop rdx
  mov r14d,[rdi+30]
  test r14d,r14d
  jmp return

ItemLimit:
  db #16

ItemReducAOB:
  jmp newmem
  nop 2
return:
registersymbol(ItemReducAOB)
registersymbol(ItemLimit)

[DISABLE]

ItemReducAOB:
  db 29 77 30 44 8B 77 30

unregistersymbol(ItemReducAOB)
unregistersymbol(ItemLimit)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe+B80076

SO6.exe+B80053: 0F 4F F0              - cmovg esi,eax
SO6.exe+B80056: 4D 8D 67 08           - lea r12,[r15+08]
SO6.exe+B8005A: 49 8B 3C 24           - mov rdi,[r12]
SO6.exe+B8005E: 49 8B 5C 24 08        - mov rbx,[r12+08]
SO6.exe+B80063: 48 3B FB              - cmp rdi,rbx
SO6.exe+B80066: 74 4B                 - je SO6.exe+B800B3
SO6.exe+B80068: 48 8B CF              - mov rcx,rdi
SO6.exe+B8006B: E8 F0 A4 6D FF        - call SO6.exe+25A560
SO6.exe+B80070: 48 3B 45 E7           - cmp rax,[rbp-19]
SO6.exe+B80074: 75 23                 - jne SO6.exe+B80099
// ---------- INJECTING HERE ----------
SO6.exe+B80076: 29 77 30              - sub [rdi+30],esi
// ---------- DONE INJECTING  ----------
SO6.exe+B80079: 44 8B 77 30           - mov r14d,[rdi+30]
SO6.exe+B8007D: 79 07                 - jns SO6.exe+B80086
SO6.exe+B8007F: 83 67 30 00           - and dword ptr [rdi+30],00
SO6.exe+B80083: 45 33 F6              - xor r14d,r14d
SO6.exe+B80086: 48 8B CF              - mov rcx,rdi
SO6.exe+B80089: E8 46 6D 91 FF        - call SO6.exe+496DD4
SO6.exe+B8008E: 84 C0                 - test al,al
SO6.exe+B80090: 0F 85 F4 00 00 00     - jne SO6.exe+B8018A
SO6.exe+B80096: 45 32 ED              - xor r13l,r13l
SO6.exe+B80099: 48 81 C7 D8 00 00 00  - add rdi,000000D8
}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>111</ID>
                      <Description>"Below this amount"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Byte</VariableType>
                      <Address>ItemLimit</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>115993</ID>
                  <Description>"No armor lost sell"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{  Game Executable   : SO6.exe
   Author            : Tuuup!
   Executable Version: 1.0.0.0
   Script Date       : 2022-11-01

   Used with permission.
}
[ENABLE]
aobscanmodule(sellarmor,SO6.exe,0F84????????0F57C0F30F7F45D84533F64C8975E8488B7DE0493BDF)
registersymbol(sellarmor sellarmorbkp)
alloc(newmem,128,sellarmor)
label(return)
label(sellarmorbkp)
newmem:

 // je SO6.exe+D0C972
  jmp return
  
sellarmorbkp:
readmem(sellarmor,6)

sellarmor:
  jmp newmem
  nop
return:

[DISABLE]
sellarmor:
 // db 0F 84 04 01 00 00
readmem(sellarmorbkp,6)
unregistersymbol(*)
dealloc(*)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe.xtext+D0B868

SO6.exe.xtext+D0B7F1: CC                             - int 3 
SO6.exe.xtext+D0B7F2: CC                             - int 3 
SO6.exe.xtext+D0B7F3: CC                             - int 3 
SO6.exe.xtext+D0B7F4: 48 89 5C 24 18                 - mov [rsp+18],rbx
SO6.exe.xtext+D0B7F9: 55                             - push rbp
SO6.exe.xtext+D0B7FA: 56                             - push rsi
SO6.exe.xtext+D0B7FB: 57                             - push rdi
SO6.exe.xtext+D0B7FC: 41 56                          - push r14
SO6.exe.xtext+D0B7FE: 41 57                          - push r15
SO6.exe.xtext+D0B800: 48 8B EC                       - mov rbp,rsp
SO6.exe.xtext+D0B803: 48 81 EC 80 00 00 00           - sub rsp,00000080
SO6.exe.xtext+D0B80A: 48 8B 05 47 90 BA 00           - mov rax,[SO6.exe.rsrc+1858]
SO6.exe.xtext+D0B811: 48 33 C4                       - xor rax,rsp
SO6.exe.xtext+D0B814: 48 89 45 F0                    - mov [rbp-10],rax
SO6.exe.xtext+D0B818: 48 8B F1                       - mov rsi,rcx
SO6.exe.xtext+D0B81B: 48 8B 0D 06 75 77 01           - mov rcx,[SO6.exe+2483D28]
SO6.exe.xtext+D0B822: 48 81 C1 00 17 00 00           - add rcx,00001700
SO6.exe.xtext+D0B829: C6 44 24 30 00                 - mov byte ptr [rsp+30],00
SO6.exe.xtext+D0B82E: C6 44 24 28 00                 - mov byte ptr [rsp+28],00
SO6.exe.xtext+D0B833: C6 44 24 20 01                 - mov byte ptr [rsp+20],01
SO6.exe.xtext+D0B838: 45 33 C9                       - xor r9d,r9d
SO6.exe.xtext+D0B83B: 44 8B C2                       - mov r8d,edx
SO6.exe.xtext+D0B83E: 48 BA 6E D7 E3 F2 36 32 E0 B0  - mov rdx,B0E03236F2E3D76E
SO6.exe.xtext+D0B848: E8 87 2B 69 FF                 - call SO6.exe.xtext+39E3D4
SO6.exe.xtext+D0B84D: 4C 8B BE A8 01 00 00           - mov r15,[rsi+000001A8]
SO6.exe.xtext+D0B854: 48 8B 9E A0 01 00 00           - mov rbx,[rsi+000001A0]
SO6.exe.xtext+D0B85B: 49 8B C7                       - mov rax,r15
SO6.exe.xtext+D0B85E: 48 2B C3                       - sub rax,rbx
SO6.exe.xtext+D0B861: 48 C1 F8 04                    - sar rax,04
SO6.exe.xtext+D0B865: 48 85 C0                       - test rax,rax
// ---------- INJECTING HERE ----------
SO6.exe.xtext+D0B868: 0F 84 04 01 00 00              - je SO6.exe.xtext+D0B972
// ---------- DONE INJECTING  ----------
SO6.exe.xtext+D0B86E: 0F 57 C0                       - xorps xmm0,xmm0
SO6.exe.xtext+D0B871: F3 0F 7F 45 D8                 - movdqu [rbp-28],xmm0
SO6.exe.xtext+D0B876: 45 33 F6                       - xor r14d,r14d
SO6.exe.xtext+D0B879: 4C 89 75 E8                    - mov [rbp-18],r14
SO6.exe.xtext+D0B87D: 48 8B 7D E0                    - mov rdi,[rbp-20]
SO6.exe.xtext+D0B881: 49 3B DF                       - cmp rbx,r15
SO6.exe.xtext+D0B884: 0F 84 84 00 00 00              - je SO6.exe.xtext+D0B90E
SO6.exe.xtext+D0B88A: 48 8B 0B                       - mov rcx,[rbx]
SO6.exe.xtext+D0B88D: E8 CE DC 54 FF                 - call SO6.exe.xtext+259560
SO6.exe.xtext+D0B892: 48 89 45 C0                    - mov [rbp-40],rax
SO6.exe.xtext+D0B896: 48 8B 0B                       - mov rcx,[rbx]
SO6.exe.xtext+D0B899: 48 8B 41 38                    - mov rax,[rcx+38]
SO6.exe.xtext+D0B89D: 48 89 45 C8                    - mov [rbp-38],rax
SO6.exe.xtext+D0B8A1: 8B 43 08                       - mov eax,[rbx+08]
SO6.exe.xtext+D0B8A4: 89 45 D4                       - mov [rbp-2C],eax
SO6.exe.xtext+D0B8A7: E8 DC D2 5D FF                 - call SO6.exe.xtext+2E8B88
SO6.exe.xtext+D0B8AC: 84 C0                          - test al,al
SO6.exe.xtext+D0B8AE: 75 1C                          - jne SO6.exe.xtext+D0B8CC
SO6.exe.xtext+D0B8B0: 48 8B 0B                       - mov rcx,[rbx]
SO6.exe.xtext+D0B8B3: E8 08 D1 5D FF                 - call SO6.exe.xtext+2E89C0
SO6.exe.xtext+D0B8B8: 84 C0                          - test al,al
SO6.exe.xtext+D0B8BA: 75 10                          - jne SO6.exe.xtext+D0B8CC
SO6.exe.xtext+D0B8BC: 48 8B 0B                       - mov rcx,[rbx]
SO6.exe.xtext+D0B8BF: E8 DC D0 5D FF                 - call SO6.exe.xtext+2E89A0
SO6.exe.xtext+D0B8C4: 84 C0                          - test al,al
SO6.exe.xtext+D0B8C6: C6 45 D0 00                    - mov byte ptr [rbp-30],00
SO6.exe.xtext+D0B8CA: 74 04                          - je SO6.exe.xtext+D0B8D0
SO6.exe.xtext+D0B8CC: C6 45 D0 01                    - mov byte ptr [rbp-30],01
SO6.exe.xtext+D0B8D0: 49 3B FE                       - cmp rdi,r14
SO6.exe.xtext+D0B8D3: 73 1B                          - jae SO6.exe.xtext+D0B8F0
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>55</ID>
                  <Description>"Item Creation Exp Multiplier"</Description>
                  <Options moHideChildren="1"/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : SO6.exe
  Version: 
  Date   : 2022-10-29
  Author : asmor

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(ICExpAOB,SO6.exe,44 01 70 04 44 8D 73 04) // should be unique
alloc(newmem,$1000,ICExpAOB)

label(code)
label(return)
label(ICExpMult)

newmem:

code:
  imul r14d,[ICExpMult]
  add [rax+04],r14d
  lea r14d,[rbx+04]
  jmp return

ICExpMult:
  db 05

ICExpAOB:
  jmp newmem
  nop 3
return:
registersymbol(ICExpAOB)
registersymbol(ICExpMult)

[DISABLE]

ICExpAOB:
  db 44 01 70 04 44 8D 73 04

unregistersymbol(ICExpAOB)
unregistersymbol(ICExpMult)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe+AFDE91

SO6.exe+AFDE67: 48 85 C0              - test rax,rax
SO6.exe+AFDE6A: 0F 84 9F 01 00 00     - je SO6.exe+AFE00F
SO6.exe+AFDE70: 45 85 F6              - test r14d,r14d
SO6.exe+AFDE73: 0F 8E 98 01 00 00     - jng SO6.exe+AFE011
SO6.exe+AFDE79: 48 8D 55 E0           - lea rdx,[rbp-20]
SO6.exe+AFDE7D: 49 8B CB              - mov rcx,r11
SO6.exe+AFDE80: 8B F3                 - mov esi,ebx
SO6.exe+AFDE82: E8 F5 16 00 00        - call SO6.exe+AFF57C
SO6.exe+AFDE87: 48 8B F8              - mov rdi,rax
SO6.exe+AFDE8A: 4C 8D 25 CF DD 64 FF  - lea r12,[SO6.exe+14BC60]
// ---------- INJECTING HERE ----------
SO6.exe+AFDE91: 44 01 70 04           - add [rax+04],r14d
// ---------- DONE INJECTING  ----------
SO6.exe+AFDE95: 44 8D 73 04           - lea r14d,[rbx+04]
SO6.exe+AFDE99: 48 8B 4D D8           - mov rcx,[rbp-28]
SO6.exe+AFDE9D: 48 85 C9              - test rcx,rcx
SO6.exe+AFDEA0: 0F 85 87 00 00 00     - jne SO6.exe+AFDF2D
SO6.exe+AFDEA6: 48 8B 55 C0           - mov rdx,[rbp-40]
SO6.exe+AFDEAA: 48 8D 4D C0           - lea rcx,[rbp-40]
SO6.exe+AFDEAE: FF 52 08              - call qword ptr [rdx+08]
SO6.exe+AFDEB1: 48 85 C0              - test rax,rax
SO6.exe+AFDEB4: 74 73                 - je SO6.exe+AFDF29
SO6.exe+AFDEB6: 39 5D D0              - cmp [rbp-30],ebx
}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>56</ID>
                      <Description>"Multiplier"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>4 Bytes</VariableType>
                      <Address>ICExpMult</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>190837</ID>
                  <Description>"Inventory Editor"</Description>
                  <Options moHideChildren="1"/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

-- READ CAREFULLY!
-- The Scan Method is based on the Development version of this tool.
-- In order to use this method, you MUST enable the following settings:

-- CE Settings: Extra: Query memory region routines
-- CE Settings: Extra: Read/Write Process Memory
-- CE Settings: Extra: Open Process
-- CE Settings: Extra: Enable use of the Process Watcher

-- In addition, CE will load a Kernel Driver known as DBK64.
-- It will appear as a glowing notification in the upper left
-- corner of the screen if successfully loaded.
-- If the DBK64 cannot be loaded, this method will not work.
-- Restart Cheat Engine after making these changes.

-- This step does sections outlined in https://framedsc.com/GeneralGuides/using_rtti.htm
-- The first 3 scans are pointer addresses and can be skipped

-- If a game update occurs, enter the 3rd scan's address here
local ScanString = getAddress('SO6.exe+1553D80')
ScanString = ScanString + 0x8

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

local AoB = AOBScan(ScanString)

unregisterSymbol("SO6_Inventory")
if (AoB) then
   registerSymbol("SO6_Inventory",AoB[0])
else
   print("ERROR: Scan Failed!")
   print("[OPTION 1]")
   print("Check:")
   print("The game is loaded.")
   print("Cheat Engine is attached")
   print("Enable Cheat Engine Settings: Extra: Query memory region routines")
   print("Enable Cheat Engine Settings: Extra: Read/Write Process Memory")
   print("Enable Cheat Engine Settings: Extra: Open Process")
   print("")
   print("[OPTION 2]")
   print("Manual Override Required")
   print("Assign address to 'SO6_Inventory'")
   mySymbol = allocateMemory(4096)
   registerSymbol("SO6_Inventory",mySymbol)
end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

unregisterSymbol("SO6_Inventory")
{$asm}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>215028</ID>
                      <Description>"Manual Override"</Description>
                      <Options moHideChildren="1"/>
                      <Color>C0C0C0</Color>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>215056</ID>
                          <Description>"Override"</Description>
                          <Options moHideChildren="1"/>
                          <VariableType>Auto Assembler Script</VariableType>
                          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end
registerSymbol('SO6_Inventory',readQword(getAddress('SO6_Inventory')))
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end
{$asm}
</AssemblerScript>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>215027</ID>
                          <Description>"SO6_Inventory"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>8 Bytes</VariableType>
                          <Address>SO6_Inventory</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>16</ID>
                          <Description>"pointerscan result"</Description>
                          <VariableType>8 Bytes</VariableType>
                          <Address>"SO6.exe"+02483D20</Address>
                          <Offsets>
                            <Offset>F60</Offset>
                            <Offset>28</Offset>
                            <Offset>38</Offset>
                            <Offset>30</Offset>
                            <Offset>8</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>217262</ID>
                          <Description>"pointerscan result"</Description>
                          <VariableType>8 Bytes</VariableType>
                          <Address>"SO6.exe"+02483D20</Address>
                          <Offsets>
                            <Offset>F50</Offset>
                            <Offset>B8</Offset>
                            <Offset>38</Offset>
                            <Offset>30</Offset>
                            <Offset>8</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>217263</ID>
                          <Description>"pointerscan result"</Description>
                          <VariableType>8 Bytes</VariableType>
                          <Address>"SO6.exe"+02483D20</Address>
                          <Offsets>
                            <Offset>980</Offset>
                            <Offset>28</Offset>
                            <Offset>40</Offset>
                            <Offset>30</Offset>
                            <Offset>8</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>19</ID>
                          <Description>"pointerscan result"</Description>
                          <VariableType>8 Bytes</VariableType>
                          <Address>"SO6.exe"+02483D20</Address>
                          <Offsets>
                            <Offset>970</Offset>
                            <Offset>B8</Offset>
                            <Offset>40</Offset>
                            <Offset>30</Offset>
                            <Offset>8</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>217264</ID>
                          <Description>"pointerscan result"</Description>
                          <VariableType>8 Bytes</VariableType>
                          <Address>"SO6.exe"+02483D20</Address>
                          <Offsets>
                            <Offset>980</Offset>
                            <Offset>50</Offset>
                            <Offset>1C8</Offset>
                            <Offset>80</Offset>
                            <Offset>8</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>217265</ID>
                          <Description>"pointerscan result"</Description>
                          <VariableType>8 Bytes</VariableType>
                          <Address>"SO6.exe"+02483D28</Address>
                          <Offsets>
                            <Offset>F60</Offset>
                            <Offset>110</Offset>
                            <Offset>C0</Offset>
                            <Offset>198</Offset>
                            <Offset>D0</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>22</ID>
                          <Description>"pointerscan result"</Description>
                          <VariableType>8 Bytes</VariableType>
                          <Address>"SO6.exe"+02483D28</Address>
                          <Offsets>
                            <Offset>F60</Offset>
                            <Offset>60</Offset>
                            <Offset>C8</Offset>
                            <Offset>198</Offset>
                            <Offset>D0</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>23</ID>
                          <Description>"pointerscan result"</Description>
                          <VariableType>8 Bytes</VariableType>
                          <Address>"SO6.exe"+02483D28</Address>
                          <Offsets>
                            <Offset>F60</Offset>
                            <Offset>10</Offset>
                            <Offset>D0</Offset>
                            <Offset>198</Offset>
                            <Offset>D0</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24</ID>
                          <Description>"pointerscan result"</Description>
                          <VariableType>8 Bytes</VariableType>
                          <Address>"SO6.exe"+02483D28</Address>
                          <Offsets>
                            <Offset>F60</Offset>
                            <Offset>110</Offset>
                            <Offset>E0</Offset>
                            <Offset>198</Offset>
                            <Offset>D0</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25</ID>
                          <Description>"pointerscan result"</Description>
                          <VariableType>8 Bytes</VariableType>
                          <Address>"SO6.exe"+02483D28</Address>
                          <Offsets>
                            <Offset>F60</Offset>
                            <Offset>110</Offset>
                            <Offset>C0</Offset>
                            <Offset>1A0</Offset>
                            <Offset>D0</Offset>
                          </Offsets>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>190836</ID>
                      <Description>"Items 000-099"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

--Set up customizable variables

local iStart = 0
local iEnd = 99

--copy custom variables to [Disabled] section

local mr_inv = AddressList.getMemoryRecordByDescription("Items " .. string.format('%03d',iStart) .. "-" .. string.format('%03d',iEnd))
local aFirstItem = readQword(getAddress('SO6_Inventory + 8'))
local aLastItem = readQword(getAddress('SO6_Inventory + 10'))
local iItemCount = (aLastItem - aFirstItem) / 0xD8 - 1
local iEnd = math.min(iEnd,iItemCount)

for i = iStart,iEnd do

  local aItemBase = string.format('%X',aFirstItem + i * 0xD8)
  local sDescription = "Slot " .. i

  local mr = AddressList.createMemoryRecord()
  mr.Description = sDescription
  mr.Type = vtString
  mr.String.Size = 100
  mr.Options = 'moHideChildren'
  mr.Address = aItemBase .. ' + 98'
  mr.appendToEntry(mr_inv)

  local mr_inv2 = AddressList.getMemoryRecordByDescription(sDescription)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Quantity"
    mr.Type = vtDword
    mr.Address = aItemBase .. ' + 30'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Sort Recent Counter"
    mr.Type = vtDword
    mr.Address = aItemBase .. ' + 38'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Equipped User"
    mr.Type = vtDword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 40'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.ItemEquip'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Factor 1"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 50'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Factor 2"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 58'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Factor 3"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 60'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Factor 4"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 68'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Item Base Pointer " .. i
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 20'
    mr.appendToEntry(mr_inv2)

    local mr_inv3 = AddressList.getMemoryRecordByDescription("Item Base Pointer " .. i)

          local aItemBase2 = string.format('%X',readQword(aItemBase .. ' + 20'))

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Weakness"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 50'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Confused"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 54'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Scorched"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 58'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Frozen"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 5C'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Poisoned"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 60'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Wind"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 64'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Fire"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 68'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Water"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 6C'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Earth"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 70'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "GUTS"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 74'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "DEF"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 78'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "INT"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 7C'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "ATK"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 80'
          mr.appendToEntry(mr_inv3)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local iStart = 0
local iEnd = 99

local mr_inv = AddressList.getMemoryRecordByDescription("Items " .. string.format('%03d',iStart) .. "-" .. string.format('%03d',iEnd))

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>215016</ID>
                      <Description>"Items 100-199"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

--Set up customizable variables

local iStart = 100
local iEnd = 199

--copy custom variables to [Disabled] section

local mr_inv = AddressList.getMemoryRecordByDescription("Items " .. string.format('%03d',iStart) .. "-" .. string.format('%03d',iEnd))
local aFirstItem = readQword(getAddress('SO6_Inventory + 8'))
local aLastItem = readQword(getAddress('SO6_Inventory + 10'))
local iItemCount = (aLastItem - aFirstItem) / 0xD8 - 1
local iEnd = math.min(iEnd,iItemCount)

for i = iStart,iEnd do

  local aItemBase = string.format('%X',aFirstItem + i * 0xD8)
  local sDescription = "Slot " .. i

  local mr = AddressList.createMemoryRecord()
  mr.Description = sDescription
  mr.Type = vtString
  mr.String.Size = 100
  mr.Options = 'moHideChildren'
  mr.Address = aItemBase .. ' + 98'
  mr.appendToEntry(mr_inv)

  local mr_inv2 = AddressList.getMemoryRecordByDescription(sDescription)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Quantity"
    mr.Type = vtDword
    mr.Address = aItemBase .. ' + 30'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Sort Recent Counter"
    mr.Type = vtDword
    mr.Address = aItemBase .. ' + 38'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Equipped User"
    mr.Type = vtDword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 40'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.ItemEquip'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Factor 1"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 50'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Factor 2"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 58'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Factor 3"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 60'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Factor 4"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 68'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Item Base Pointer " .. i
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 20'
    mr.appendToEntry(mr_inv2)

    local mr_inv3 = AddressList.getMemoryRecordByDescription("Item Base Pointer " .. i)

          local aItemBase2 = string.format('%X',readQword(aItemBase .. ' + 20'))

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Weakness"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 50'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Confused"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 54'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Scorched"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 58'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Frozen"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 5C'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Poisoned"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 60'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Wind"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 64'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Fire"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 68'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Water"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 6C'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Earth"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 70'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "GUTS"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 74'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "DEF"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 78'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "INT"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 7C'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "ATK"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 80'
          mr.appendToEntry(mr_inv3)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local iStart = 100
local iEnd = 199

local mr_inv = AddressList.getMemoryRecordByDescription("Items " .. string.format('%03d',iStart) .. "-" .. string.format('%03d',iEnd))

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>215017</ID>
                      <Description>"Items 200-299"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

--Set up customizable variables

local iStart = 200
local iEnd = 299

--copy custom variables to [Disabled] section

local mr_inv = AddressList.getMemoryRecordByDescription("Items " .. string.format('%03d',iStart) .. "-" .. string.format('%03d',iEnd))
local aFirstItem = readQword(getAddress('SO6_Inventory + 8'))
local aLastItem = readQword(getAddress('SO6_Inventory + 10'))
local iItemCount = (aLastItem - aFirstItem) / 0xD8 -1
local iEnd = math.min(iEnd,iItemCount)

for i = iStart,iEnd do

  local aItemBase = string.format('%X',aFirstItem + i * 0xD8)
  local sDescription = "Slot " .. i

  local mr = AddressList.createMemoryRecord()
  mr.Description = sDescription
  mr.Type = vtString
  mr.String.Size = 100
  mr.Options = 'moHideChildren'
  mr.Address = aItemBase .. ' + 98'
  mr.appendToEntry(mr_inv)

  local mr_inv2 = AddressList.getMemoryRecordByDescription(sDescription)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Quantity"
    mr.Type = vtDword
    mr.Address = aItemBase .. ' + 30'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Sort Recent Counter"
    mr.Type = vtDword
    mr.Address = aItemBase .. ' + 38'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Equipped User"
    mr.Type = vtDword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 40'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.ItemEquip'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Factor 1"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 50'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Factor 2"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 58'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Factor 3"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 60'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Factor 4"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 68'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Item Base Pointer " .. i
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 20'
    mr.appendToEntry(mr_inv2)

    local mr_inv3 = AddressList.getMemoryRecordByDescription("Item Base Pointer " .. i)

          local aItemBase2 = string.format('%X',readQword(aItemBase .. ' + 20'))

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Weakness"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 50'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Confused"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 54'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Scorched"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 58'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Frozen"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 5C'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Poisoned"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 60'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Wind"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 64'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Fire"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 68'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Water"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 6C'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Earth"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 70'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "GUTS"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 74'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "DEF"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 78'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "INT"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 7C'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "ATK"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 80'
          mr.appendToEntry(mr_inv3)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local iStart = 200
local iEnd = 299

local mr_inv = AddressList.getMemoryRecordByDescription("Items " .. string.format('%03d',iStart) .. "-" .. string.format('%03d',iEnd))

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>215018</ID>
                      <Description>"Items 300-399"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

--Set up customizable variables

local iStart = 300
local iEnd = 399

--copy custom variables to [Disabled] section

local mr_inv = AddressList.getMemoryRecordByDescription("Items " .. string.format('%03d',iStart) .. "-" .. string.format('%03d',iEnd))
local aFirstItem = readQword(getAddress('SO6_Inventory + 8'))
local aLastItem = readQword(getAddress('SO6_Inventory + 10'))
local iItemCount = (aLastItem - aFirstItem) / 0xD8 -1
local iEnd = math.min(iEnd,iItemCount)

for i = iStart,iEnd do

  local aItemBase = string.format('%X',aFirstItem + i * 0xD8)
  local sDescription = "Slot " .. i

  local mr = AddressList.createMemoryRecord()
  mr.Description = sDescription
  mr.Type = vtString
  mr.String.Size = 100
  mr.Options = 'moHideChildren'
  mr.Address = aItemBase .. ' + 98'
  mr.appendToEntry(mr_inv)

  local mr_inv2 = AddressList.getMemoryRecordByDescription(sDescription)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Quantity"
    mr.Type = vtDword
    mr.Address = aItemBase .. ' + 30'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Sort Recent Counter"
    mr.Type = vtDword
    mr.Address = aItemBase .. ' + 38'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Equipped User"
    mr.Type = vtDword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 40'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.ItemEquip'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Factor 1"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 50'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Factor 2"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 58'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Factor 3"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 60'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Factor 4"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 68'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Item Base Pointer " .. i
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 20'
    mr.appendToEntry(mr_inv2)

    local mr_inv3 = AddressList.getMemoryRecordByDescription("Item Base Pointer " .. i)

          local aItemBase2 = string.format('%X',readQword(aItemBase .. ' + 20'))

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Weakness"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 50'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Confused"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 54'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Scorched"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 58'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Frozen"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 5C'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Poisoned"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 60'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Wind"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 64'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Fire"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 68'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Water"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 6C'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Earth"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 70'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "GUTS"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 74'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "DEF"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 78'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "INT"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 7C'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "ATK"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 80'
          mr.appendToEntry(mr_inv3)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local iStart = 300
local iEnd = 399

local mr_inv = AddressList.getMemoryRecordByDescription("Items " .. string.format('%03d',iStart) .. "-" .. string.format('%03d',iEnd))

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>215019</ID>
                      <Description>"Items 400-499"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

--Set up customizable variables

local iStart = 400
local iEnd = 499

--copy custom variables to [Disabled] section

local mr_inv = AddressList.getMemoryRecordByDescription("Items " .. string.format('%03d',iStart) .. "-" .. string.format('%03d',iEnd))
local aFirstItem = readQword(getAddress('SO6_Inventory + 8'))
local aLastItem = readQword(getAddress('SO6_Inventory + 10'))
local iItemCount = (aLastItem - aFirstItem) / 0xD8 -1
local iEnd = math.min(iEnd,iItemCount)

for i = iStart,iEnd do

  local aItemBase = string.format('%X',aFirstItem + i * 0xD8)
  local sDescription = "Slot " .. i

  local mr = AddressList.createMemoryRecord()
  mr.Description = sDescription
  mr.Type = vtString
  mr.String.Size = 100
  mr.Options = 'moHideChildren'
  mr.Address = aItemBase .. ' + 98'
  mr.appendToEntry(mr_inv)

  local mr_inv2 = AddressList.getMemoryRecordByDescription(sDescription)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Quantity"
    mr.Type = vtDword
    mr.Address = aItemBase .. ' + 30'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Sort Recent Counter"
    mr.Type = vtDword
    mr.Address = aItemBase .. ' + 38'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Equipped User"
    mr.Type = vtDword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 40'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.ItemEquip'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Factor 1"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 50'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Factor 2"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 58'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Factor 3"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 60'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Factor 4"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 68'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Item Base Pointer " .. i
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 20'
    mr.appendToEntry(mr_inv2)

    local mr_inv3 = AddressList.getMemoryRecordByDescription("Item Base Pointer " .. i)

          local aItemBase2 = string.format('%X',readQword(aItemBase .. ' + 20'))

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Weakness"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 50'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Confused"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 54'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Scorched"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 58'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Frozen"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 5C'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Poisoned"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 60'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Wind"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 64'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Fire"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 68'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Water"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 6C'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Earth"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 70'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "GUTS"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 74'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "DEF"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 78'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "INT"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 7C'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "ATK"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 80'
          mr.appendToEntry(mr_inv3)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local iStart = 400
local iEnd = 499

local mr_inv = AddressList.getMemoryRecordByDescription("Items " .. string.format('%03d',iStart) .. "-" .. string.format('%03d',iEnd))

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>215023</ID>
                      <Description>"Items 500-599"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

--Set up customizable variables

local iStart = 500
local iEnd = 599

--copy custom variables to [Disabled] section

local mr_inv = AddressList.getMemoryRecordByDescription("Items " .. string.format('%03d',iStart) .. "-" .. string.format('%03d',iEnd))
local aFirstItem = readQword(getAddress('SO6_Inventory + 8'))
local aLastItem = readQword(getAddress('SO6_Inventory + 10'))
local iItemCount = (aLastItem - aFirstItem) / 0xD8 -1
local iEnd = math.min(iEnd,iItemCount)

for i = iStart,iEnd do

  local aItemBase = string.format('%X',aFirstItem + i * 0xD8)
  local sDescription = "Slot " .. i

  local mr = AddressList.createMemoryRecord()
  mr.Description = sDescription
  mr.Type = vtString
  mr.String.Size = 100
  mr.Options = 'moHideChildren'
  mr.Address = aItemBase .. ' + 98'
  mr.appendToEntry(mr_inv)

  local mr_inv2 = AddressList.getMemoryRecordByDescription(sDescription)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Quantity"
    mr.Type = vtDword
    mr.Address = aItemBase .. ' + 30'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Sort Recent Counter"
    mr.Type = vtDword
    mr.Address = aItemBase .. ' + 38'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Equipped User"
    mr.Type = vtDword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 40'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.ItemEquip'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Factor 1"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 50'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Factor 2"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 58'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Factor 3"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 60'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Factor 4"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 68'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Item Base Pointer " .. i
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 20'
    mr.appendToEntry(mr_inv2)

    local mr_inv3 = AddressList.getMemoryRecordByDescription("Item Base Pointer " .. i)

          local aItemBase2 = string.format('%X',readQword(aItemBase .. ' + 20'))

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Weakness"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 50'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Confused"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 54'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Scorched"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 58'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Frozen"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 5C'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Poisoned"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 60'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Wind"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 64'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Fire"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 68'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Water"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 6C'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Earth"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 70'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "GUTS"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 74'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "DEF"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 78'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "INT"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 7C'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "ATK"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 80'
          mr.appendToEntry(mr_inv3)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local iStart = 500
local iEnd = 599

local mr_inv = AddressList.getMemoryRecordByDescription("Items " .. string.format('%03d',iStart) .. "-" .. string.format('%03d',iEnd))

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>215021</ID>
                      <Description>"Items 600-699"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

--Set up customizable variables

local iStart = 600
local iEnd = 699

--copy custom variables to [Disabled] section

local mr_inv = AddressList.getMemoryRecordByDescription("Items " .. string.format('%03d',iStart) .. "-" .. string.format('%03d',iEnd))
local aFirstItem = readQword(getAddress('SO6_Inventory + 8'))
local aLastItem = readQword(getAddress('SO6_Inventory + 10'))
local iItemCount = (aLastItem - aFirstItem) / 0xD8 -1
local iEnd = math.min(iEnd,iItemCount)

for i = iStart,iEnd do

  local aItemBase = string.format('%X',aFirstItem + i * 0xD8)
  local sDescription = "Slot " .. i

  local mr = AddressList.createMemoryRecord()
  mr.Description = sDescription
  mr.Type = vtString
  mr.String.Size = 100
  mr.Options = 'moHideChildren'
  mr.Address = aItemBase .. ' + 98'
  mr.appendToEntry(mr_inv)

  local mr_inv2 = AddressList.getMemoryRecordByDescription(sDescription)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Quantity"
    mr.Type = vtDword
    mr.Address = aItemBase .. ' + 30'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Sort Recent Counter"
    mr.Type = vtDword
    mr.Address = aItemBase .. ' + 38'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Equipped User"
    mr.Type = vtDword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 40'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.ItemEquip'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Factor 1"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 50'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Factor 2"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 58'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Factor 3"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 60'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Factor 4"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 68'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Item Base Pointer " .. i
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 20'
    mr.appendToEntry(mr_inv2)

    local mr_inv3 = AddressList.getMemoryRecordByDescription("Item Base Pointer " .. i)

          local aItemBase2 = string.format('%X',readQword(aItemBase .. ' + 20'))

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Weakness"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 50'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Confused"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 54'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Scorched"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 58'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Frozen"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 5C'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Poisoned"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 60'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Wind"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 64'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Fire"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 68'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Water"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 6C'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Earth"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 70'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "GUTS"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 74'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "DEF"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 78'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "INT"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 7C'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "ATK"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 80'
          mr.appendToEntry(mr_inv3)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local iStart = 600
local iEnd = 699

local mr_inv = AddressList.getMemoryRecordByDescription("Items " .. string.format('%03d',iStart) .. "-" .. string.format('%03d',iEnd))

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>215024</ID>
                      <Description>"Items 700-799"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

--Set up customizable variables

local iStart = 700
local iEnd = 799

--copy custom variables to [Disabled] section

local mr_inv = AddressList.getMemoryRecordByDescription("Items " .. string.format('%03d',iStart) .. "-" .. string.format('%03d',iEnd))
local aFirstItem = readQword(getAddress('SO6_Inventory + 8'))
local aLastItem = readQword(getAddress('SO6_Inventory + 10'))
local iItemCount = (aLastItem - aFirstItem) / 0xD8 -1
local iEnd = math.min(iEnd,iItemCount)

for i = iStart,iEnd do

  local aItemBase = string.format('%X',aFirstItem + i * 0xD8)
  local sDescription = "Slot " .. i

  local mr = AddressList.createMemoryRecord()
  mr.Description = sDescription
  mr.Type = vtString
  mr.String.Size = 100
  mr.Options = 'moHideChildren'
  mr.Address = aItemBase .. ' + 98'
  mr.appendToEntry(mr_inv)

  local mr_inv2 = AddressList.getMemoryRecordByDescription(sDescription)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Quantity"
    mr.Type = vtDword
    mr.Address = aItemBase .. ' + 30'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Sort Recent Counter"
    mr.Type = vtDword
    mr.Address = aItemBase .. ' + 38'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Equipped User"
    mr.Type = vtDword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 40'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.ItemEquip'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Factor 1"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 50'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Factor 2"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 58'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Factor 3"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 60'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Factor 4"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 68'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Item Base Pointer " .. i
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 20'
    mr.appendToEntry(mr_inv2)

    local mr_inv3 = AddressList.getMemoryRecordByDescription("Item Base Pointer " .. i)

          local aItemBase2 = string.format('%X',readQword(aItemBase .. ' + 20'))

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Weakness"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 50'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Confused"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 54'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Scorched"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 58'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Frozen"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 5C'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Poisoned"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 60'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Wind"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 64'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Fire"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 68'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Water"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 6C'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Earth"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 70'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "GUTS"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 74'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "DEF"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 78'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "INT"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 7C'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "ATK"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 80'
          mr.appendToEntry(mr_inv3)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local iStart = 700
local iEnd = 799

local mr_inv = AddressList.getMemoryRecordByDescription("Items " .. string.format('%03d',iStart) .. "-" .. string.format('%03d',iEnd))

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>215025</ID>
                      <Description>"Items 800-899"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

--Set up customizable variables

local iStart = 800
local iEnd = 899

--copy custom variables to [Disabled] section

local mr_inv = AddressList.getMemoryRecordByDescription("Items " .. string.format('%03d',iStart) .. "-" .. string.format('%03d',iEnd))
local aFirstItem = readQword(getAddress('SO6_Inventory + 8'))
local aLastItem = readQword(getAddress('SO6_Inventory + 10'))
local iItemCount = (aLastItem - aFirstItem) / 0xD8 -1
local iEnd = math.min(iEnd,iItemCount)

for i = iStart,iEnd do

  local aItemBase = string.format('%X',aFirstItem + i * 0xD8)
  local sDescription = "Slot " .. i

  local mr = AddressList.createMemoryRecord()
  mr.Description = sDescription
  mr.Type = vtString
  mr.String.Size = 100
  mr.Options = 'moHideChildren'
  mr.Address = aItemBase .. ' + 98'
  mr.appendToEntry(mr_inv)

  local mr_inv2 = AddressList.getMemoryRecordByDescription(sDescription)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Quantity"
    mr.Type = vtDword
    mr.Address = aItemBase .. ' + 30'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Sort Recent Counter"
    mr.Type = vtDword
    mr.Address = aItemBase .. ' + 38'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Equipped User"
    mr.Type = vtDword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 40'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.ItemEquip'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Factor 1"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 50'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Factor 2"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 58'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Factor 3"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 60'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Factor 4"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 68'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Item Base Pointer " .. i
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 20'
    mr.appendToEntry(mr_inv2)

    local mr_inv3 = AddressList.getMemoryRecordByDescription("Item Base Pointer " .. i)

          local aItemBase2 = string.format('%X',readQword(aItemBase .. ' + 20'))

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Weakness"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 50'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Confused"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 54'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Scorched"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 58'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Frozen"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 5C'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Poisoned"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 60'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Wind"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 64'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Fire"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 68'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Water"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 6C'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Earth"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 70'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "GUTS"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 74'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "DEF"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 78'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "INT"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 7C'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "ATK"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 80'
          mr.appendToEntry(mr_inv3)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local iStart = 800
local iEnd = 899

local mr_inv = AddressList.getMemoryRecordByDescription("Items " .. string.format('%03d',iStart) .. "-" .. string.format('%03d',iEnd))

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>215026</ID>
                      <Description>"Items 900-999"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

--Set up customizable variables

local iStart = 900
local iEnd = 999

--copy custom variables to [Disabled] section

local mr_inv = AddressList.getMemoryRecordByDescription("Items " .. string.format('%03d',iStart) .. "-" .. string.format('%03d',iEnd))
local aFirstItem = readQword(getAddress('SO6_Inventory + 8'))
local aLastItem = readQword(getAddress('SO6_Inventory + 10'))
local iItemCount = (aLastItem - aFirstItem) / 0xD8 -1
local iEnd = math.min(iEnd,iItemCount)

for i = iStart,iEnd do

  local aItemBase = string.format('%X',aFirstItem + i * 0xD8)
  local sDescription = "Slot " .. i

  local mr = AddressList.createMemoryRecord()
  mr.Description = sDescription
  mr.Type = vtString
  mr.String.Size = 100
  mr.Options = 'moHideChildren'
  mr.Address = aItemBase .. ' + 98'
  mr.appendToEntry(mr_inv)

  local mr_inv2 = AddressList.getMemoryRecordByDescription(sDescription)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Quantity"
    mr.Type = vtDword
    mr.Address = aItemBase .. ' + 30'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Sort Recent Counter"
    mr.Type = vtDword
    mr.Address = aItemBase .. ' + 38'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Equipped User"
    mr.Type = vtDword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 40'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.ItemEquip'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Factor 1"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 50'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Factor 2"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 58'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Factor 3"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 60'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Factor 4"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 68'
    mr.DropDownLinked = true
    mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
    mr.DisplayAsDropDownListItem = true
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Item Base Pointer " .. i
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = aItemBase .. ' + 20'
    mr.appendToEntry(mr_inv2)

    local mr_inv3 = AddressList.getMemoryRecordByDescription("Item Base Pointer " .. i)

          local aItemBase2 = string.format('%X',readQword(aItemBase .. ' + 20'))

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Weakness"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 50'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Confused"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 54'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Scorched"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 58'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Frozen"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 5C'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Poisoned"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 60'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Wind"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 64'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Fire"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 68'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Water"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 6C'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "Earth"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 70'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "GUTS"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 74'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "DEF"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 78'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "INT"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 7C'
          mr.appendToEntry(mr_inv3)

          local mr = AddressList.createMemoryRecord()
          mr.Description = "ATK"
          mr.Type = vtDword
          mr.Address = aItemBase2 .. ' + 80'
          mr.appendToEntry(mr_inv3)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local iStart = 900
local iEnd = 999

local mr_inv = AddressList.getMemoryRecordByDescription("Items " .. string.format('%03d',iStart) .. "-" .. string.format('%03d',iEnd))

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>52</ID>
              <Description>"Es'owa"</Description>
              <Options moHideChildren="1"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>115875</ID>
                  <Description>"Easy Win"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{  Game Executable   : SO6.exe
   Author            : Tuuup!
   Executable Version: 1.0.0.0
   Script Date       : 2022-10-30

   Used with Permission.
}
[ENABLE]
aobscanmodule(minigamecard,SO6.exe,0F 4E C5 89 42 6C)
registersymbol(minigamecard minigamecardbkp)
alloc(minigamecardbkp,3,minigamecard)

minigamecardbkp:
readmem(minigamecard,3)

minigamecard:
db 8B C5 90

[DISABLE]
minigamecard:
 // db 0F 4E C5
readmem(minigamecardbkp,3)
unregistersymbol(*)
dealloc(*)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe.xtext+C02070

SO6.exe.xtext+C01FF2: 48 89 74 24 18        - mov [rsp+18],rsi
SO6.exe.xtext+C01FF7: 57                    - push rdi
SO6.exe.xtext+C01FF8: 48 83 EC 30           - sub rsp,30
SO6.exe.xtext+C01FFC: 48 8B 05 55 0D 88 01  - mov rax,[SO6.exe+2483D58]
SO6.exe.xtext+C02003: 33 ED                 - xor ebp,ebp
SO6.exe.xtext+C02005: 40 8A F2              - mov sil,dl
SO6.exe.xtext+C02008: 48 8B F9              - mov rdi,rcx
SO6.exe.xtext+C0200B: 4C 8B 90 00 47 00 00  - mov r10,[rax+00004700]
SO6.exe.xtext+C02012: 4D 85 D2              - test r10,r10
SO6.exe.xtext+C02015: 0F 84 DF 01 00 00     - je SO6.exe.xtext+C021FA
SO6.exe.xtext+C0201B: 41 38 AA 80 01 00 00  - cmp [r10+00000180],bpl
SO6.exe.xtext+C02022: 75 0A                 - jne SO6.exe.xtext+C0202E
SO6.exe.xtext+C02024: 40 38 69 4D           - cmp [rcx+4D],bpl
SO6.exe.xtext+C02028: 0F 84 CC 01 00 00     - je SO6.exe.xtext+C021FA
SO6.exe.xtext+C0202E: 48 8B 41 30           - mov rax,[rcx+30]
SO6.exe.xtext+C02032: 40 88 69 4D           - mov [rcx+4D],bpl
SO6.exe.xtext+C02036: 40 38 69 4C           - cmp [rcx+4C],bpl
SO6.exe.xtext+C0203A: 0F 84 BA 00 00 00     - je SO6.exe.xtext+C020FA
SO6.exe.xtext+C02040: 40 84 F6              - test sil,sil
SO6.exe.xtext+C02043: 74 09                 - je SO6.exe.xtext+C0204E
SO6.exe.xtext+C02045: 44 8B 88 A8 11 00 00  - mov r9d,[rax+000011A8]
SO6.exe.xtext+C0204C: EB 07                 - jmp SO6.exe.xtext+C02055
SO6.exe.xtext+C0204E: 44 8B 88 A0 0E 00 00  - mov r9d,[rax+00000EA0]
SO6.exe.xtext+C02055: 45 85 C9              - test r9d,r9d
SO6.exe.xtext+C02058: 0F 8E 78 01 00 00     - jng SO6.exe.xtext+C021D6
SO6.exe.xtext+C0205E: 48 8B 51 40           - mov rdx,[rcx+40]
SO6.exe.xtext+C02062: 40 88 6C 24 20        - mov [rsp+20],bpl
SO6.exe.xtext+C02067: 44 29 4A 6C           - sub [rdx+6C],r9d
SO6.exe.xtext+C0206B: 8B 42 6C              - mov eax,[rdx+6C]
SO6.exe.xtext+C0206E: 85 C0                 - test eax,eax
// ---------- INJECTING HERE ----------
SO6.exe.xtext+C02070: 0F 4E C5              - cmovle eax,ebp
// ---------- DONE INJECTING  ----------
SO6.exe.xtext+C02073: 89 42 6C              - mov [rdx+6C],eax
SO6.exe.xtext+C02076: 48 8B 41 40           - mov rax,[rcx+40]
SO6.exe.xtext+C0207A: 40 38 69 4C           - cmp [rcx+4C],bpl
SO6.exe.xtext+C0207E: 49 8B CA              - mov rcx,r10
SO6.exe.xtext+C02081: 0F 94 C2              - sete dl
SO6.exe.xtext+C02084: 44 8B 40 6C           - mov r8d,[rax+6C]
SO6.exe.xtext+C02088: E8 8B 8A 0D 00        - call SO6.exe.xtext+CDAB18
SO6.exe.xtext+C0208D: 48 8B 47 40           - mov rax,[rdi+40]
SO6.exe.xtext+C02091: 39 68 6C              - cmp [rax+6C],ebp
SO6.exe.xtext+C02094: 0F 8F 17 01 00 00     - jg SO6.exe.xtext+C021B1
SO6.exe.xtext+C0209A: 40 38 68 78           - cmp [rax+78],bpl
SO6.exe.xtext+C0209E: 0F 85 0D 01 00 00     - jne SO6.exe.xtext+C021B1
SO6.exe.xtext+C020A4: 48 8B 0D AD 0C 88 01  - mov rcx,[SO6.exe+2483D58]
SO6.exe.xtext+C020AB: 48 8B 89 F8 46 00 00  - mov rcx,[rcx+000046F8]
SO6.exe.xtext+C020B2: E8 A1 F5 69 FF        - call SO6.exe.xtext+2A1658
SO6.exe.xtext+C020B7: 48 8B 1D 62 0C 88 01  - mov rbx,[SO6.exe+2483D20]
SO6.exe.xtext+C020BE: 48 8D 15 93 D8 BA 00  - lea rdx,[SO6.exe.sbss+29A958]
SO6.exe.xtext+C020C5: 48 8D 0D 04 37 96 00  - lea rcx,[SO6.exe.sbss+507D0]
SO6.exe.xtext+C020CC: E8 FF 6D 6E FF        - call SO6.exe.xtext+2E8ED0
SO6.exe.xtext+C020D1: 48 8B D0              - mov rdx,rax
SO6.exe.xtext+C020D4: 48 8B CB              - mov rcx,rbx
SO6.exe.xtext+C020D7: E8 98 66 83 FF        - call SO6.exe.xtext+438774
SO6.exe.xtext+C020DC: 48 8B 05 B5 35 93 01  - mov rax,[SO6.exe+2536698]
SO6.exe.xtext+C020E3: 48 85 C0              - test rax,rax
SO6.exe.xtext+C020E6: 74 06                 - je SO6.exe.xtext+C020EE
SO6.exe.xtext+C020E8: FF 80 70 04 00 00     - inc [rax+00000470]
SO6.exe.xtext+C020EE: C7 47 20 0E 00 00 00  - mov [rdi+20],0000000E
SO6.exe.xtext+C020F5: E9 00 01 00 00        - jmp SO6.exe.xtext+C021FA
SO6.exe.xtext+C020FA: 40 84 F6              - test sil,sil
SO6.exe.xtext+C020FD: 74 09                 - je SO6.exe.xtext+C02108
}
</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>5</ID>
          <Description>"Testing - Use at Risk - Feedback Requested"</Description>
          <Options moHideChildren="1"/>
          <Color>0000FF</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>116214</ID>
              <Description>"Script Helpers"</Description>
              <Options moHideChildren="1"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>115834</ID>
                  <Description>"Always Scan - Scan State (Read Only)"</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">*:Scan Disabled
01:Scan Enabled
</DropDownList>
                  <ShowAsHex>1</ShowAsHex>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Byte</VariableType>
                  <Address>ScanState</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>115841</ID>
                  <Description>"Always Scan - Battle State (Read Only)"</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">*:In Combat
00:No Combat
01:Normal Combat
02:Boss Combat
</DropDownList>
                  <ShowAsHex>1</ShowAsHex>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Byte</VariableType>
                  <Address>BattleState</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>165588</ID>
                  <Description>"DropDownLinkedMemrec.Factors"</Description>
                  <DropDownList DescriptionOnly="1" DisplayValueAsItem="1">0000000000000000:No Factor.
0087F8AF9009BC21:Casting time -16%
0087F8AF9009BC23:Casting time - 8%
0087F8AF9009BC26:Casting time - 20%
0087F8AF9009BC27:Casting time - 24%
0239251D037CC06A:+33% DMG dealt at long range
029A75745F9B98A1:Fire Res set to +32 when HP is full.
050000E0CD04CF28:INT +17%.
050000E0CD04CF2C:INT +5%.
050000E0CD04CF2E:INT +10%.
05B8D9300A2E8DE2:195% EXP gained when HIT counter is at or above 100
05B8D9300A2E8DE4:165% EXP gained when HIT counter is at or above 100.
05B8D9300A2E8DE7:150% EXP gained when HIT counter is at above 100
07CDF8B846E74659:+300% Res to stagger when in standby
07CDF8B846E7465F:+500% Res to stagger when in standby
0986F2E16A4A0CF9:+48% to bestowed buff effects.
0986F2E16A4A0CFD:+15% to bestowed buff effects.
0A990E5E782A1EA2:-39% semiomancy casting time at full HP.
101ABDD275849200:+15% damage dealt to Demons.
101ABDD275849202:+45% damage dealt to Demons
101ABDD275849205:+60% damage dealt to Demons
123B1205AD12174A:Deal +65% DMG when the HIT count is 100 or above.
140909836BC59196:Water Res set to +32 in standby.
157DFC54A219D7EE:+20% DMG dealt at full HP.
15864B6C43302742:+75% stagger power
15864B6C43302746:+25% stagger power
15B2B85E4274B678:GUTS +10%
15B2B85E4274B679:GUTS +7%
15B2B85E4274B67A:GUTS +5%
15B2B85E4274B67E:GUTS +17%
15B2B85E4274B67F:GUTS +13%
16256697CB057374:Weakness Res set to +32 in midair.
1AA62B9F4B4218C6:Bestows 15% GUTS + for 12s.
1AB02B9F4B4A6D4B:Cures all status aliments.
1ABAEB9F4B54080A:Chance of causing Frozen for 18s.
1ABAEB9F4B54080C:Chance of causing 7% Scorched for 10s
1ABAEB9F4B54080D:Chance of causing 45% Poisoned for 10s
1CC98B271536C37C:Chance of causing 50% GUTS + for 12s.
2059B9E1F01F6698:60% duration of bestowed buffs when AP is under 50%.
2086EE33C3B01B35:-20% DMG sustained when on standby.
2086EE33C3B01B36:-16% DMG sustained when on standby.
213F9D4704AA90A4:+20% DMG dealt when target is downed.
218B85D0A0CE0BF9:+30% to bestowed status aliments.
218B85D0A0CE0BFE:+38% to bestowed status ailments
218B85D0A0CE0BFF:+48% to bestowed status ailments.
22EF6042C2F3B77B:Restores 5 AP when defeating enemies. 55% trigger rate.
22EF6042C2F3B77F:Restore 1 AP after defeating enemis. 50% trigger rate
243DD8421CE3F88C:Poisoned Res set to +24
243DD8421CE3F88E:Poinsed Res set to +8
2492813900D272EE:Bestows the element of Wind to attacks.
25B2D6B38BD6C661:Chance of causing 15% DEF - for 15s.
25B2D6B38BD6C665:Chance of causing 30% DEF- for 15s
25DFB4271A7B08B1:Chance of causing 50% INT + for 12s.
25E7CA45FD7FDA0B:Water Res set to +24.
29F5D87599201634:+20% DMG dealt when target is enchanting.
2A698AF033099773:Weakness Res set to +40 when HP is full.
2AA446289D202267:Weakness Res set to +24.
2B1E2931003C30B1:100% chance of shockwave ATK if not staggered on hit
2B204674469B5574:+25% Fol gained when HIT counter is at or above 50.
2B204674469B5577:+35% Fol gained when HIT counter is at or above 50
2B244674469F3E2F:+80% Fol gained when Hit counter is 100+
2F872344D6E48782:Surprise attack bonus +80%.
2F872344D6E48784:Surprise attack bonus +60%.
2F872344D6E48787:Surprise attack bonus +50%.
3262958AC39F452C:+43% when healing others if HIT counter is at or above 100.
3265958AC3A17AC7:+43% when healing others if HIT counter is at or above 50
34F797B78F979841:+13% DEF when HP is full.
34F797B78F979842:+17% DEF when HP is full
352AEADFC472DC68:+15% to Armor factor effect.
352AEADFC472DC6C:+48% to Armor factor effect.
3566C3964C1B5D8E:Wind Res set to +54 in midair.
35EA129636062C5E:When healing someone, you also recover 30% of that value.
35EADAAD4AA39E1C:Casts Ice Needles.
35EADBAD4AA39FEF:Casts Wind Blade.
35EAE1AD4AA3AA21:Casts Fire Bolt.
35EAE2AD4AA3ABF4:Chance of causing 40 Water Res - for 15s.
35EAE3AD4AA3AD47:Chance of causing 40 Fire Res - for 15s.
35EAE4AD4AA3AF1A:Chance of causing 40 Wind Res - for 15s.
35EE5FAD4AA6B632:Chance of causing 40 Earth Res - for 15s.
35EE60AD4AA6B785:Chance of causing 40% MVSPD - for 10s.
35EE61AD4AA6B958:Chance of causing 15% GUTS - for 15s.
35EE67AD4AA6C3AA:Chance of causing 70% INT + for 12s.
35EE68AD4AA6C57D:Chance of causing 70% ATK + for 12s.
35F4CFAD4AABE030:Fires a shockwave dealing moderate flinching effect.
35F4D2AD4AABE529:Damages target. Power: very low.
35F4D3AD4AABE6FC:Damages target. Power: low.
35F4D4AD4AABE84F:Casts Earth Glaive.
35F4D6AD4AABEBD5:Damages Target. Power: medium.
36FAE97D28941FF8:+13% DEF when on the ground.
3754F4AC89E22F5C:chance of causing 35% Poisoned for 10s
3B7EC4266E4F7E55:Poisoned Res set to +32 in midair.
433EE93B5EB2BC6E:Deal +33% Damage when AP is 50% or lower
433EE93B5EB2BC6F:+40% DMG when AP is 50% or lower.
43F344273E25A2FF:+30% to Weapon factor effect.
45151A4842594C79:This item takes your place when you are incapacitated.
4753050517A4A51C:Chance of causing 70% MVSPD - for 10s.
47644B9A278C3171:+10% when healing others
47644B9A278C3172:+15% when healing others
47644B9A278C3173:+20% when healing others
47644B9A278C3174:+25% when healing others.
47644B9A278C3175:+33% when healing others
54832ABDD259B55E:+20% DMG sustained when HP is under 25%.
5BD4E2254E92262A:+300% Res to stagger when using skills.
5BD4E2254E92262F:+100% Res to stagger when using skills.
5D84995EC10CEA13:60% chance to fire ice projectiles upon casting
5E155D89FD56F668:+10% semiomancy casting time for all enemies
5E155D89FD56F66B:+15% semiomancy casting time for all enemies.
5E155D89FD56F66C:+30% semiomancy casting time for all enemies
6002B869B4A522EF:+78% damage dealt to Machines
61B5E1F481AB5021:Chance of 95% Flinch Res + for 20s
655E8EAA9E72DFAF:Bestows the element of Water to attacks
680C151E225D4F2C:Bestows 20 Water Res + for 12s
680C151E225D4F2D:Bestows 20 Earth Res + for 12s
684B135B64CB8269:+45% damage dealt to Divinities
6C86039BDE52454A:Gained +20% Fol from Battle
6D2BF0943DD51E87:+150% less likely to flinch when attacked.
6E5072DC4F870286:+400% Res to stagger when casting semiomancy.
70B53E1E2744C246:Bestows 15% INT + for 12s
71A7B515B4111507:Chance of causing 15% GUTS - for 15s
72E057BED1358C91:+15% to Accessories factor effect
72E057BED1358C94:+38% to Accessories factor effect
72E057BED1358C95:+48% to Accessories factor effect
7820E2771F7C2E49:Chance of causing 3% Scorched for 10s
7820E2771F7C2E4B:chance of causing 5% Scorched for 10s
796F2CF33DF62DD8:-10% enemy field of vision before combat
796F2CF33DF62DDB:-18% enemy field of vision before combat.
799E0F485AF02243:Is this factor changing after the battle...?
799E0F485AF02246:Is this factor changing after the battle...?
7AFFA02AB499FC64:Bestows the element of Earth to attacks
7B0DE206268E0232:+78% damage dealt to Avians
7B9DF8275E774BF0:Fire Res set to +24
7E21485B5CE35C71:+60% damage dealt to Undead
7E21485B5CE35C76:+45% damage dealt to Undead
8195BF86BF85ECA8:+20% Fol gained when HIT counter is at or above 20
83E4FCFEEBEBC74D:-8% DMG sustained when on the ground
89456212D50B6AF8:Scorched Res set to +32 in midair
89456212D50B6AFA:Scorched Res set to +48 in midair
89AD21BDFF4C1ABD:+60% DMG dealt to weak spots
8B98AC1D8D0DD01D:-27% DMG sustained from critical hits
8B98AC1D8D0DD01E:-17% DMG sustained from critical hits.
8F272196A57C8A30:-16% DMG sustained in midair
8F272196A57C8A32:-24% DMG sustained in midair
8F4F28427A053F1B:+21% GUTS in midair
927FD56023271300:47% chance of activating skills without consuming AP
927FD56023271301:40% change of activating skill without using AP.
927FD56023271304:20% chance of activating skills without consuming AP
927FD56023271306:33% chance of activating skills without consuming AP
935BA21E3AE5893A:Bestows 15% DEF + for 12s
97302F0F18709B70:+15% to factor effects when using items
97302F0F18709B73:+10% to factor effects when using items
982C7E3C81364152:Gain 110% EXP from battle
982C7E3C81364156:Gain 135% EXP from battle
99251CB5353EEDB5:+67% stagger power when target is enchanting
9A9FAE3EEBA87E54:+35% INT when HP is under 25%
9C04B5DA118EE792:+52% damage dealt to Humanoids
9C04B5DA118EE794:+30% damage dealt to Humanoids
9CA7A62CD373E638:+140% item drop rate
9CA7A62CD373E639:+160% item drop rate
9CA7A62CD373E63B:+120% item drop rate
9CA7A62CD373E63E:+180% item drop rate
9CA7A62CD373E63F:+210% item drop rate
A1A0949679F96156:Bestows 15% DEF + for 12s
A1A0949679F96157:Bestows 15% INT + for 12s
A1D2A70491EAE764:Are someone's feelings for me changing...?
A1D2A90491EAEA8A:Chance of causing 70% MVSPD - for 10s
A1E3A40491F9555E:Recovers 30% HP
A1E3A50491F95711:Recovers 30% HP
A1E3A80491F95C0A:Recovers 50% HP
A1E3A90491F95DDD:Recovers 30% HP
A1E72A0491FC6EC7:Recovers 30% HP
A1E72B0491FC709A:Recovers 30% HP
A332A337459F83C3:Please Report this factor : A332A337459F83C3
A50DE68FF9246FB8:Chance of causing 40 Fire Res - for 15s
A50DE68FF9246FBC:chance of causing 70 Fire Res - for 10s
A5354103C1E98604:-24% DMG sustained when HIT counter is at or above 100
A54FFFC989348E38:Restores 1.5% HP when chaining combos
A54FFFC989348E39:Restores 2% HP when chaining combos
A54FFFC989348E3B:Restores 1% HP when chaining combos
A7BB2A84E52ECD91:-28% DMG received at full HP
A7BB2A84E52ECD94:-16% DMG received at full HP
A7BB2A84E52ECD97:-20% DMG received at full HP
AA1E41A11F9EB954:60% chance pierce thru elemental res.
B0AA2506645A1416:Chance of causing Frozen for 12s.
B0F0703701B4B8D8:+60% bestowed buff effects when AP is under 50%.
B18F23F9191FD0C0:Extend invincibility when dodging 10/60 seconds.
B18F23F9191FD0C4:Extends invincibility when dodging 4/60 seconds
B3AD67049C2E22B0:Revives from Incapacitated &amp; recovers 30% HP
B3AD68049C2E2403:Revives from Incapacitated &amp; recovers 70% HP
B3AD6C049C2E2ACF:Recovers 25% HP
B3AD6D049C2E2C82:Recovers 30% HP
B3AD6E049C2E2E55:Recovers 50% HP
B3AD76049C2E3BC8:Bestows 15% ATK + for 12s
B3B0F2049C3144B8:Cures all status ailments
B3B0F5049C314991:Cures all status ailments
B3B0F5049C314994:Recovers 30% HP
B3B0F5049C314997:Recovers 100% HP
B3B0F8049C314E8A:Bestows 50 SP
B4C20831A7357228:70% chance of Earth Glaive counter ATK when down.
B50AF154E4EC69DC:Restore 1.2% HP at regular intervals
B84BA6B1FB0A55BF:125% EXP gained when HIT counter is at or above 20
BA9E5CBE102F9110:+33% DMG dealt when HP is under 25%
BA9E5CBE102F9113:+40% DMG dealt when HP is under 25%
BA9E5CBE102F9115:+54% DMG dealt when HP is under 25%
BB0DA2049FFEBBC4:Bestows 60% Expended AP - for 6s
BB0DA4049FFEBF6A:Bestows Invisible for 12s
BB10A004A000EE55:Bestows 35 Wind Res + for 12s
BB10A104A000F028:Bestows 35 Fire Res + for 12s
BB10A204A000F1FB:Bestows 35 Water Res + for 12s
BB10A304A000F34E:Bestows 35 Earth Res + for 12s
BB10A404A000F501:Bestows 30% MVSPD + for 12s.
BB10A504A000F6D4:Bestows 15% GUTS + for 12s
BB10A604A000F8A7:Bestows 15% DEF + for 12s
BB10A704A000FA7A:Bestows 50% INT + for 4s
BB10A804A000FBCD:Bestows 50% ATK + for 4s
BC90996239FCDAC5:+13% GUTS in standby
BD5E20F02A8F7204:+10% healing received
BD5E20F02A8F7206:+20% healing received.
BEBB4C27A327D088:Absorbs 4% of DMG dealt
BEBB4C27A327D089:Absorbs 5% of DMG dealt
BEBB4C27A327D08B:Absorbs 3% of DMG dealt
BEBB4C27A327D08E:Absorbs 6% of DMG dealt
BEBB4C27A327D08F:Absorbs 8% of DMG dealt
C5D40228BAD160D8:+52% DMG dealt on a critical hit
C5D40228BAD160D9:+40% DMG dealt on a critical hit
C5D40228BAD160DC:+10% DMG dealt on a critical hit.
C5D40228BAD160DE:+30% DMG dealt on a critical hit
C5D40228BAD160DF:+20% DMG dealt on critical hit
C6088C7C43162B02:ATK +13%
C6088C7C43162B03:ATK +17%
C6088C7C43162B05:ATK +10%
C6088C7C43162B07:ATK +5%
C686EE39D0C0A6BB:Max AP +2 when successfully executing a perfect dodge
C686EE39D0C0A6BD:Max AP +3 when successfully executing a perfect dodge.
C7E5DDBE72A4BB3C:-30% prep time when using items
C7E5DDBE72A4BB3F:-20% prep time when using items
C8AA1C1F90238273:Chance of causing 15% INT - for 15s
C94799092C80BEFE:Confused Res set to +16 when on ground
CBC4D72B2664EBBC:Frozen Res set to +8
CC140C8873921491:VA gauge set to +1 when chaining combos
CC140C8873921496:VA gauge set to +3 when chaining combos
CC6B625FD67FB069:Wind Res set to + 48 when HP full
CC6B625FD67FB06B:Wind Res set to + 32 when HP full
CCA47E5E452BE851:DEF + 7%
CCA47E5E452BE852:DEF + 5%
CCA47E5E452BE856:DEF + 17%
CFAAC4897FFA0D6D:Fire Res set to +32 in standby
D1FCBED713D57AEA:+53% healing received if HP is under25%.
D1FCBED713D57AEB:+63% healing received if HP is under 25%
D6E9B96DDC3980B0:Absorbs 10% of DMG dealt when HP is under 25%
DB0CF52CDD075B24:Absorbs 6% of DMG dealt when target is in midair
DB0CF52CDD075B26:Absorbs 10% of DMG dealt when target is in midair
DD6852F390C384CA:-24% DMG sustained when downed
DE37D668310244B5:14% chance to fire lightning projectiles upon ATK.
DE37D668310244B6:10% chance to fire lightning projectiles upon ATK
DEF73F4DDEEB7CB5:+15% DMG dealt to insects
DFEFD0262B6E2523:Frozen Res set to +32 in midair
E193DCB703DBACF4:Bestows the element of Fire to attacks
EA4DFE98F8F3C09E:-20% semiomancy cast time when at 3m+ altitude
EAADFBFEC109C722:20% change of activating skill without using AP.
EAADFBFEC109C723:16% chance of activating skills without consuming AP
ED99041651959149:+26% DMG dealt by frontal attacks.
ED9904165195914A:+20% DMG dealt by front attacks
EE61AF31FDACAA1A:+420% item drop rate when Hit counter is100+
EE64EF31FDAF4CF3:+330% item drop rate when Hit counter is 50+
EE64EF31FDAF4CF4:+210% item drop rate when HIT counter is at or above 50
EE64EF31FDAF4CF7:+180% item drop rate when HIT counter is at or above 50
F0367B48C827EB54:Chance of causing 56 Wind Res- for 15s.
F19216056F9DF7F1:Weakness Res set to + 16 when on ground
F226685A18601459:Earth Res set to + 32 when HP full
F3D3F5DC70DF65EC:+21% atk when HP below 25%
F64A86246A37CA80:Absorbs 14% DMG dealt when target downed
F64A86246A37CA84:Absorbs 6% DMG dealt when target downed
FA4ECE4B444AD80E:+180% item drop rate when HIT counter is at or above 20
FDF0DEEF2B904DD8:+26% DMG dealt to targets at point-blank range
FDF0DEEF2B904DD9:+20% DMG dealt to targets at point-blank range
FDF0DEEF2B904DDA:+15% DMG dealt to targets at point-blank range
FDF0DEEF2B904DDE:+40% DMG dealt at point-blank range
FDF0DEEF2B904DDF:+33% DMG dealt to targets at point-blank range
FF2F957AE01B8034:Water Res set to + 32 when HP full
FF8E5682E90AFB08:+15% to amount of knockback produced by attacks
FF8E5682E90AFB0A:+45% to amount of knockback produced by attacks.
*:Please report this factor.
</DropDownList>
                  <GroupHeader>1</GroupHeader>
                </CheatEntry>
                <CheatEntry>
                  <ID>217261</ID>
                  <Description>"DropDownLinkedMemrec.ItemEquip"</Description>
                  <DropDownList DescriptionOnly="1" DisplayValueAsItem="1">00000000:Unequipped
CA6EAEA9:Equipped (Laeticia)
52AE375C:Equipped (Albaird)
3EB592FE:Equipped (Raymond)
67CB15DE:Equipped (Midas)
2E189208:Equipped (Nina)
</DropDownList>
                  <GroupHeader>1</GroupHeader>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>17</ID>
              <Description>"Pointers"</Description>
              <Options moHideChildren="1"/>
              <Color>000000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
//P1 - Starting Point for Fol
define(SO6_P1,"SO6.exe"+025371D8)
//P2 - Starting Point for SP
define(SO6_P2,"SO6.exe"+024E7418)
//P3 - Staring Point for DP
registersymbol(SO6_P1)
registersymbol(SO6_P2)


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
unregistersymbol(SO6_P1)
unregistersymbol(SO6_P2)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>21</ID>
                  <Description>"Base Addresses - DO NOT EDIT"</Description>
                  <Options moHideChildren="1"/>
                  <Color>C0C0C0</Color>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>20</ID>
                      <Description>"P1 Address"</Description>
                      <ShowAsHex>1</ShowAsHex>
                      <ShowAsSigned>0</ShowAsSigned>
                      <Color>000000</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>SO6_P1</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>35</ID>
                      <Description>"P2 Address"</Description>
                      <ShowAsHex>1</ShowAsHex>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>4 Bytes</VariableType>
                      <Address>SO6_P2</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>18</ID>
                  <Description>"Fol"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>4 Bytes</VariableType>
                  <Address>SO6_P1</Address>
                  <Offsets>
                    <Offset>528</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>28</ID>
                  <Description>"Player 1 (not first player...etc)"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>41</ID>
                      <Description>"SP"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>4 Bytes</VariableType>
                      <Address>SO6_P2</Address>
                      <Offsets>
                        <Offset>360</Offset>
                        <Offset>90</Offset>
                        <Offset>30</Offset>
                      </Offsets>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>29</ID>
                  <Description>"Player 2"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>36</ID>
                      <Description>"SP"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>4 Bytes</VariableType>
                      <Address>SO6_P2</Address>
                      <Offsets>
                        <Offset>360+5828</Offset>
                        <Offset>90</Offset>
                        <Offset>30</Offset>
                      </Offsets>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>30</ID>
                  <Description>"Player 3"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>37</ID>
                      <Description>"SP"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>4 Bytes</VariableType>
                      <Address>SO6_P2</Address>
                      <Offsets>
                        <Offset>360+5828+5828</Offset>
                        <Offset>90</Offset>
                        <Offset>30</Offset>
                      </Offsets>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>59</ID>
                  <Description>"Player 4"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>60</ID>
                      <Description>"SP"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>4 Bytes</VariableType>
                      <Address>SO6_P2</Address>
                      <Offsets>
                        <Offset>360+5828+5828+5828</Offset>
                        <Offset>90</Offset>
                        <Offset>30</Offset>
                      </Offsets>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>61</ID>
                  <Description>"Player 5"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>62</ID>
                      <Description>"SP"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>4 Bytes</VariableType>
                      <Address>SO6_P2</Address>
                      <Offsets>
                        <Offset>360+5828+5828+5828+5828</Offset>
                        <Offset>90</Offset>
                        <Offset>30</Offset>
                      </Offsets>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>115845</ID>
                  <Description>"DifficultyAccessor Values"</Description>
                  <Options moHideChildren="1"/>
                  <ShowAsHex>1</ShowAsHex>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>8 Bytes</VariableType>
                  <Address>SO6.exe+2536548</Address>
                  <Offsets>
                    <Offset>148+18</Offset>
                  </Offsets>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>3</ID>
                      <Description>"EnemyAtkMod"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>[(DifficultyAccessor Values)]+4</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>115846</ID>
                      <Description>"EnemyIntMod"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>[(DifficultyAccessor Values)]+8</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>115847</ID>
                      <Description>"EnemyDefMod"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>[(DifficultyAccessor Values)]+C</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>115848</ID>
                      <Description>"EnemyGutsMod"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>[(DifficultyAccessor Values)]+10</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7</ID>
                      <Description>"EnemyMaxHpMod"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>[(DifficultyAccessor Values)]+14</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>115856</ID>
                  <Description>"User manager (pointers for VA,Vatting and hits/combo + more)"</Description>
                  <Options moHideChildren="1"/>
                  <ShowAsSigned>1</ShowAsSigned>
                  <GroupHeader>1</GroupHeader>
                  <Address>SO6.exe+2483D28</Address>
                  <Offsets>
                    <Offset>0</Offset>
                  </Offsets>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>115857</ID>
                      <Description>"VA gauge"</Description>
                      <VariableType>Float</VariableType>
                      <Address>+1460</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>115858</ID>
                      <Description>"Vatting gauge"</Description>
                      <ShowAsSigned>1</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>+1464</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>115859</ID>
                      <Description>"Hit/combo"</Description>
                      <VariableType>4 Bytes</VariableType>
                      <Address>+1454</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>115860</ID>
                      <Description>"DP"</Description>
                      <ShowAsSigned>1</ShowAsSigned>
                      <VariableType>4 Bytes</VariableType>
                      <Address>+75410</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>115861</ID>
                      <Description>"Food time"</Description>
                      <ShowAsSigned>1</ShowAsSigned>
                      <VariableType>4 Bytes</VariableType>
                      <Address>+753F8</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>115862</ID>
                      <Description>"??"</Description>
                      <VariableType>Float</VariableType>
                      <Address>+1468</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>115863</ID>
                      <Description>"??"</Description>
                      <VariableType>Float</VariableType>
                      <Address>+147C</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>115864</ID>
                      <Description>"Drop rate"</Description>
                      <ShowAsSigned>1</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>+753FC</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>115878</ID>
                      <Description>"Drop rate?"</Description>
                      <ShowAsSigned>1</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>+75400</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>115877</ID>
                      <Description>"Drop rate?"</Description>
                      <ShowAsSigned>1</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>+75404</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>116169</ID>
                      <Description>"hate radar/Duma stuff?"</Description>
                      <GroupHeader>1</GroupHeader>
                      <Address/>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>116147</ID>
                          <Description>"4 Bytes"</Description>
                          <ShowAsSigned>1</ShowAsSigned>
                          <VariableType>Byte</VariableType>
                          <Address>+7B0</Address>
                          <Offsets>
                            <Offset>594</Offset>
                            <Offset>250</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116148</ID>
                          <Description>"2 Bytes"</Description>
                          <VariableType>Byte</VariableType>
                          <Address>+7B0</Address>
                          <Offsets>
                            <Offset>598</Offset>
                            <Offset>250</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116149</ID>
                          <Description>"2 Bytes"</Description>
                          <VariableType>Byte</VariableType>
                          <Address>+7B0</Address>
                          <Offsets>
                            <Offset>59C</Offset>
                            <Offset>250</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116150</ID>
                          <Description>"4 Bytes"</Description>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+7B0</Address>
                          <Offsets>
                            <Offset>5A0</Offset>
                            <Offset>250</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116151</ID>
                          <Description>"4 Bytes"</Description>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+7B0</Address>
                          <Offsets>
                            <Offset>5A4</Offset>
                            <Offset>250</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116152</ID>
                          <Description>"4 Bytes"</Description>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+7B0</Address>
                          <Offsets>
                            <Offset>5A8</Offset>
                            <Offset>250</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116153</ID>
                          <Description>"4 Bytes"</Description>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+7B0</Address>
                          <Offsets>
                            <Offset>5AC</Offset>
                            <Offset>250</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116154</ID>
                          <Description>"Float"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+7B0</Address>
                          <Offsets>
                            <Offset>5B0</Offset>
                            <Offset>250</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116155</ID>
                          <Description>"Float"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+7B0</Address>
                          <Offsets>
                            <Offset>5B4</Offset>
                            <Offset>250</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116156</ID>
                          <Description>"Float"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+7B0</Address>
                          <Offsets>
                            <Offset>5B8</Offset>
                            <Offset>250</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116157</ID>
                          <Description>"Float"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+7B0</Address>
                          <Offsets>
                            <Offset>5BC</Offset>
                            <Offset>250</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116158</ID>
                          <Description>"Float"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+7B0</Address>
                          <Offsets>
                            <Offset>5C0</Offset>
                            <Offset>250</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116159</ID>
                          <Description>"Float"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+7B0</Address>
                          <Offsets>
                            <Offset>5C4</Offset>
                            <Offset>250</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116160</ID>
                          <Description>"Byte"</Description>
                          <VariableType>Byte</VariableType>
                          <Address>+7B0</Address>
                          <Offsets>
                            <Offset>5C5</Offset>
                            <Offset>250</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116161</ID>
                          <Description>"Byte"</Description>
                          <VariableType>Byte</VariableType>
                          <Address>+7B0</Address>
                          <Offsets>
                            <Offset>5C6</Offset>
                            <Offset>250</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116162</ID>
                          <Description>"Byte"</Description>
                          <VariableType>Byte</VariableType>
                          <Address>+7B0</Address>
                          <Offsets>
                            <Offset>5C7</Offset>
                            <Offset>250</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116163</ID>
                          <Description>"4 Bytes"</Description>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+7B0</Address>
                          <Offsets>
                            <Offset>5C8</Offset>
                            <Offset>250</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116164</ID>
                          <Description>"Float"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+7B0</Address>
                          <Offsets>
                            <Offset>5CC</Offset>
                            <Offset>250</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116165</ID>
                          <Description>"Float"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+7B0</Address>
                          <Offsets>
                            <Offset>5D0</Offset>
                            <Offset>250</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116166</ID>
                          <Description>"4 Bytes"</Description>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+7B0</Address>
                          <Offsets>
                            <Offset>5D4</Offset>
                            <Offset>250</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116167</ID>
                          <Description>"4 Bytes"</Description>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+7B0</Address>
                          <Offsets>
                            <Offset>5D8</Offset>
                            <Offset>250</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116168</ID>
                          <Description>"4 Bytes"</Description>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+7B0</Address>
                          <Offsets>
                            <Offset>5DC</Offset>
                            <Offset>250</Offset>
                          </Offsets>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>115966</ID>
                  <Description>"money pointers"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>115967</ID>
                      <Description>"FOL"</Description>
                      <VariableType>4 Bytes</VariableType>
                      <Address>"SO6.exe"+02484CC0</Address>
                      <Offsets>
                        <Offset>150</Offset>
                        <Offset>10</Offset>
                        <Offset>8</Offset>
                        <Offset>678</Offset>
                        <Offset>108</Offset>
                        <Offset>30</Offset>
                        <Offset>5D0</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>115968</ID>
                      <Description>"FOL"</Description>
                      <VariableType>4 Bytes</VariableType>
                      <Address>"SO6.exe"+02484CC0</Address>
                      <Offsets>
                        <Offset>150</Offset>
                        <Offset>10</Offset>
                        <Offset>8</Offset>
                        <Offset>678</Offset>
                        <Offset>108</Offset>
                        <Offset>30</Offset>
                        <Offset>5D0</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>115969</ID>
                      <Description>"FOL"</Description>
                      <VariableType>4 Bytes</VariableType>
                      <Address>"SO6.exe"+02484CC0</Address>
                      <Offsets>
                        <Offset>150</Offset>
                        <Offset>10</Offset>
                        <Offset>8</Offset>
                        <Offset>678</Offset>
                        <Offset>108</Offset>
                        <Offset>30</Offset>
                        <Offset>5D0</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>115977</ID>
                      <Description>"FOL"</Description>
                      <VariableType>4 Bytes</VariableType>
                      <Address>"SO6.exe"+025355E0</Address>
                      <Offsets>
                        <Offset>768</Offset>
                        <Offset>58</Offset>
                        <Offset>118</Offset>
                        <Offset>858</Offset>
                        <Offset>20</Offset>
                        <Offset>EE0</Offset>
                        <Offset>28</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>115978</ID>
                      <Description>"FOL"</Description>
                      <VariableType>4 Bytes</VariableType>
                      <Address>"SO6.exe"+025355E0</Address>
                      <Offsets>
                        <Offset>768</Offset>
                        <Offset>58</Offset>
                        <Offset>18</Offset>
                        <Offset>300</Offset>
                        <Offset>70</Offset>
                        <Offset>F20</Offset>
                        <Offset>80</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>115979</ID>
                      <Description>"FOL"</Description>
                      <VariableType>4 Bytes</VariableType>
                      <Address>"SO6.exe"+025355E0</Address>
                      <Offsets>
                        <Offset>768</Offset>
                        <Offset>58</Offset>
                        <Offset>18</Offset>
                        <Offset>100</Offset>
                        <Offset>0</Offset>
                        <Offset>818</Offset>
                        <Offset>88</Offset>
                      </Offsets>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>116038</ID>
                  <Description>"Current character"</Description>
                  <Options moHideChildren="1"/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript Async="1">{  Game Executable   : SO6.exe
   Author            : Tuuup!
   Executable Version: 1.0.0.0
   Script Date       : 2022-11-03
}
[ENABLE]
aobscanmodule(curcharacter,SO6.exe,44 8B 60 10 49 8B CE)
registersymbol(curcharacter curcharacterbkp char)
alloc(newmem,128,curcharacter)
label(return char)
label(curcharacterbkp)
newmem:
mov [char],rax
  mov r12d,[rax+10]
  mov rcx,r14
  jmp return
  
curcharacterbkp:
readmem(curcharacter,7)
char:
dq 0
curcharacter:
  jmp newmem
  nop 2
return:

[DISABLE]
curcharacter:
 // db 44 8B 60 10 49 8B CE
readmem(curcharacterbkp,7)
unregistersymbol(*)
dealloc(*)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe.xtext+1D3CE1

SO6.exe.xtext+1D3C65: 48 33 C4              - xor rax,rsp
SO6.exe.xtext+1D3C68: 48 89 45 E8           - mov [rbp-18],rax
SO6.exe.xtext+1D3C6C: 48 8B F1              - mov rsi,rcx
SO6.exe.xtext+1D3C6F: 48 8B 0D B2 F0 2A 02  - mov rcx,[SO6.exe+2483D28]
SO6.exe.xtext+1D3C76: 8B B9 C8 04 00 00     - mov edi,[rcx+000004C8]
SO6.exe.xtext+1D3C7C: 8B 41 70              - mov eax,[rcx+70]
SO6.exe.xtext+1D3C7F: 45 33 E4              - xor r12d,r12d
SO6.exe.xtext+1D3C82: 45 8A EC              - mov r13l,r12l
SO6.exe.xtext+1D3C85: 8B 96 AC 06 00 00     - mov edx,[rsi+000006AC]
SO6.exe.xtext+1D3C8B: 3B D0                 - cmp edx,eax
SO6.exe.xtext+1D3C8D: 0F 85 A4 02 00 00     - jne SO6.exe.xtext+1D3F37
SO6.exe.xtext+1D3C93: E8 68 7C 3A 00        - call SO6.exe.xtext+57B900
SO6.exe.xtext+1D3C98: 4C 8B F8              - mov r15,rax
SO6.exe.xtext+1D3C9B: 48 85 C0              - test rax,rax
SO6.exe.xtext+1D3C9E: 0F 84 A6 00 00 00     - je SO6.exe.xtext+1D3D4A
SO6.exe.xtext+1D3CA4: 48 8B C8              - mov rcx,rax
SO6.exe.xtext+1D3CA7: E8 34 59 FA FF        - call SO6.exe.xtext+1795E0
SO6.exe.xtext+1D3CAC: 4C 8B F0              - mov r14,rax
SO6.exe.xtext+1D3CAF: 48 85 C0              - test rax,rax
SO6.exe.xtext+1D3CB2: 0F 84 92 00 00 00     - je SO6.exe.xtext+1D3D4A
SO6.exe.xtext+1D3CB8: 48 8B 98 58 61 00 00  - mov rbx,[rax+00006158]
SO6.exe.xtext+1D3CBF: 48 89 5D E0           - mov [rbp-20],rbx
SO6.exe.xtext+1D3CC3: 48 85 DB              - test rbx,rbx
SO6.exe.xtext+1D3CC6: 74 08                 - je SO6.exe.xtext+1D3CD0
SO6.exe.xtext+1D3CC8: F0 FF 43 08           - lock inc [rbx+08]
SO6.exe.xtext+1D3CCC: 48 8B 5D E0           - mov rbx,[rbp-20]
SO6.exe.xtext+1D3CD0: 48 85 DB              - test rbx,rbx
SO6.exe.xtext+1D3CD3: 0F 85 55 01 00 00     - jne SO6.exe.xtext+1D3E2E
SO6.exe.xtext+1D3CD9: 49 8B CE              - mov rcx,r14
SO6.exe.xtext+1D3CDC: E8 BF 2E FA FF        - call SO6.exe.xtext+176BA0
// ---------- INJECTING HERE ----------
SO6.exe.xtext+1D3CE1: 44 8B 60 10           - mov r12d,[rax+10]
// ---------- DONE INJECTING  ----------
SO6.exe.xtext+1D3CE5: 49 8B CE              - mov rcx,r14
SO6.exe.xtext+1D3CE8: E8 B3 2E FA FF        - call SO6.exe.xtext+176BA0
SO6.exe.xtext+1D3CED: F3 0F 2C 78 24        - cvttss2si edi,[rax+24]
SO6.exe.xtext+1D3CF2: 49 8B CE              - mov rcx,r14
SO6.exe.xtext+1D3CF5: E8 A6 2E FA FF        - call SO6.exe.xtext+176BA0
SO6.exe.xtext+1D3CFA: 66 0F 6E 70 10        - movd xmm6,[rax+10]
SO6.exe.xtext+1D3CFF: 0F 5B F6              - cvtdq2ps xmm6,xmm6
SO6.exe.xtext+1D3D02: 66 0F 6E C7           - movd xmm0,edi
SO6.exe.xtext+1D3D06: 0F 5B C0              - cvtdq2ps xmm0,xmm0
SO6.exe.xtext+1D3D09: F3 0F 5E F0           - divss xmm6,xmm0
SO6.exe.xtext+1D3D0D: 45 84 ED              - test r13l,r13l
SO6.exe.xtext+1D3D10: 75 0A                 - jne SO6.exe.xtext+1D3D1C
SO6.exe.xtext+1D3D12: 44 3B 66 38           - cmp r12d,[rsi+38]
SO6.exe.xtext+1D3D16: 0F 8C 2C 02 00 00     - jl SO6.exe.xtext+1D3F48
SO6.exe.xtext+1D3D1C: 44 89 66 38           - mov [rsi+38],r12d
SO6.exe.xtext+1D3D20: F3 0F 11 76 5C        - movss [rsi+5C],xmm6
SO6.exe.xtext+1D3D25: BA 09 00 00 00        - mov edx,00000009
SO6.exe.xtext+1D3D2A: 49 8B CE              - mov rcx,r14
SO6.exe.xtext+1D3D2D: E8 12 D6 ED FF        - call SO6.exe.xtext+B1344
SO6.exe.xtext+1D3D32: 44 8A D8              - mov r11l,al
SO6.exe.xtext+1D3D35: 45 33 E4              - xor r12d,r12d
SO6.exe.xtext+1D3D38: 38 46 34              - cmp [rsi+34],al
SO6.exe.xtext+1D3D3B: 0F 85 17 01 00 00     - jne SO6.exe.xtext+1D3E58
SO6.exe.xtext+1D3D41: 48 85 DB              - test rbx,rbx
SO6.exe.xtext+1D3D44: 0F 85 D7 00 00 00     - jne SO6.exe.xtext+1D3E21
SO6.exe.xtext+1D3D4A: 48 8B 0D D7 EF 2A 02  - mov rcx,[SO6.exe+2483D28]
SO6.exe.xtext+1D3D51: E8 6A F9 F9 FF        - call SO6.exe.xtext+1736C0
SO6.exe.xtext+1D3D56: 8A D8                 - mov bl,al
SO6.exe.xtext+1D3D58: 44 38 66 31           - cmp [rsi+31],r12l
SO6.exe.xtext+1D3D5C: 75 67                 - jne SO6.exe.xtext+1D3DC5
}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>116189</ID>
                      <Description>"Only the % stats seems to stick?"</Description>
                      <Color>0000FF</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>116039</ID>
                      <Description>"base address"</Description>
                      <ShowAsSigned>1</ShowAsSigned>
                      <VariableType>4 Bytes</VariableType>
                      <Address>char</Address>
                      <Offsets>
                        <Offset>0</Offset>
                      </Offsets>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>116040</ID>
                          <Description>"??"</Description>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116041</ID>
                          <Description>"Cur HP"</Description>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+10</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116044</ID>
                          <Description>"max HP"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+24</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116042</ID>
                          <Description>"Max AP"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+18</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116043</ID>
                          <Description>"cur AP"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+1C</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116045</ID>
                          <Description>"GUTS"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+34</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116046</ID>
                          <Description>"DEF"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+30</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116047</ID>
                          <Description>"INT"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+2C</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116048</ID>
                          <Description>"ATK"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+28</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116049</ID>
                          <Description>"??"</Description>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+1E0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116209</ID>
                          <Description>"XP"</Description>
                          <ShowAsSigned>1</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+10</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116210</ID>
                          <Description>"Level"</Description>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+C</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116051</ID>
                          <Description>"SP"</Description>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+1E8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116200</ID>
                          <Description>"Earth"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+3C</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116201</ID>
                          <Description>"Water"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+40</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116202</ID>
                          <Description>"Fire"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+44</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116203</ID>
                          <Description>"Wind"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+48</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116204</ID>
                          <Description>"Poisoned"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+4C</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116205</ID>
                          <Description>"Frozen"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+50</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116206</ID>
                          <Description>"Scorched"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+54</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116207</ID>
                          <Description>"Confused"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+58</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116208</ID>
                          <Description>"Weakness"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+5C</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116199</ID>
                          <Description>"▼  These values stick after restarting game? ▼"</Description>
                          <Color>0000FF</Color>
                          <GroupHeader>1</GroupHeader>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116211</ID>
                          <Description>"Thanks to Kloze for some offsets!!"</Description>
                          <Color>0000FF</Color>
                          <GroupHeader>1</GroupHeader>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116212</ID>
                          <Description>"+HP%"</Description>
                          <ShowAsSigned>1</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+27c</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>115882</ID>
                          <Description>"+ATK%"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+280</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>115883</ID>
                          <Description>"+INT%"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+284</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>115884</ID>
                          <Description>"+DEF%"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+288</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>115885</ID>
                          <Description>"+GUTS%"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+28C</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116190</ID>
                          <Description>"Earth"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+290</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116191</ID>
                          <Description>"Water"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+294</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116192</ID>
                          <Description>"Fire"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+298</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116193</ID>
                          <Description>"Wind"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+29C</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116198</ID>
                          <Description>"Poisened"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+2A0</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116194</ID>
                          <Description>"Frozen"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+2A4</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116195</ID>
                          <Description>"Scorched"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+2A8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116196</ID>
                          <Description>"Confused"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+2AC</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116197</ID>
                          <Description>"Weakness"</Description>
                          <VariableType>Float</VariableType>
                          <Address>+2B0</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>116213</ID>
                  <Description>"Unstable/not working"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>115754</ID>
                      <Description>"Selected item/materials in inventory ONLY!!(turn off when not using!!)"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{  Game Executable   : SO6.exe
   Author            : Tuuup!
   Executable Version: 1.0.0.0
   Script Date       : 2022-10-28
}
[ENABLE]
aobscanmodule(selecteditem,SO6.exe,8B 43 30 48 8B 5C 24 60)
registersymbol(selecteditem selecteditembkp sitem)
alloc(newmem,128,selecteditem)
label(return sitem)
label(selecteditembkp)
newmem:
mov rax,sitem
mov [rax],rbx
  mov eax,[rbx+30]
  mov rbx,[rsp+60]
  jmp return
  
selecteditembkp:
readmem(selecteditem,8)
sitem:
dq 0
selecteditem:
  jmp newmem
  nop 3
return:

[DISABLE]
selecteditem:
 // db 8B 43 30 48 8B 5C 24 60
readmem(selecteditembkp,8)
unregistersymbol(*)
dealloc(*)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe.xtext+258F1B

SO6.exe.xtext+258EB2: E8 45 6A F5 FF        - call SO6.exe.xtext+1AF8FC
SO6.exe.xtext+258EB7: 48 85 C0              - test rax,rax
SO6.exe.xtext+258EBA: 0F 85 9F 00 00 00     - jne SO6.exe.xtext+258F5F
SO6.exe.xtext+258EC0: 49 8B 5B 08           - mov rbx,[r11+08]
SO6.exe.xtext+258EC4: 85 F6                 - test esi,esi
SO6.exe.xtext+258EC6: 74 6B                 - je SO6.exe.xtext+258F33
SO6.exe.xtext+258EC8: 4D 8B 7B 10           - mov r15,[r11+10]
SO6.exe.xtext+258ECC: 33 FF                 - xor edi,edi
SO6.exe.xtext+258ECE: 49 3B DF              - cmp rbx,r15
SO6.exe.xtext+258ED1: 74 5C                 - je SO6.exe.xtext+258F2F
SO6.exe.xtext+258ED3: 48 8B CB              - mov rcx,rbx
SO6.exe.xtext+258ED6: E8 85 06 00 00        - call SO6.exe.xtext+259560
SO6.exe.xtext+258EDB: 49 3B C6              - cmp rax,r14
SO6.exe.xtext+258EDE: 74 09                 - je SO6.exe.xtext+258EE9
SO6.exe.xtext+258EE0: 48 81 C3 D8 00 00 00  - add rbx,000000D8
SO6.exe.xtext+258EE7: EB E5                 - jmp SO6.exe.xtext+258ECE
SO6.exe.xtext+258EE9: 40 F6 C6 01           - test sil,01
SO6.exe.xtext+258EED: 74 0D                 - je SO6.exe.xtext+258EFC
SO6.exe.xtext+258EEF: 48 83 7B 40 00        - cmp qword ptr [rbx+40],00
SO6.exe.xtext+258EF4: 75 EA                 - jne SO6.exe.xtext+258EE0
SO6.exe.xtext+258EF6: 80 7B 4C 00           - cmp byte ptr [rbx+4C],00
SO6.exe.xtext+258EFA: 75 E4                 - jne SO6.exe.xtext+258EE0
SO6.exe.xtext+258EFC: 40 F6 C6 02           - test sil,02
SO6.exe.xtext+258F00: 0F 85 B4 E0 79 00     - jne SO6.exe.xtext+9F6FBA
SO6.exe.xtext+258F06: 48 85 ED              - test rbp,rbp
SO6.exe.xtext+258F09: 0F 85 BA E0 79 00     - jne SO6.exe.xtext+9F6FC9
SO6.exe.xtext+258F0F: 48 8B CB              - mov rcx,rbx
SO6.exe.xtext+258F12: E8 BD CE 23 00        - call SO6.exe.xtext+495DD4
SO6.exe.xtext+258F17: 84 C0                 - test al,al
SO6.exe.xtext+258F19: 74 56                 - je SO6.exe.xtext+258F71
// ---------- INJECTING HERE ----------
SO6.exe.xtext+258F1B: 8B 43 30              - mov eax,[rbx+30]
// ---------- DONE INJECTING  ----------
SO6.exe.xtext+258F1E: 48 8B 5C 24 60        - mov rbx,[rsp+60]
SO6.exe.xtext+258F23: 48 83 C4 20           - add rsp,20
SO6.exe.xtext+258F27: 41 5F                 - pop r15
SO6.exe.xtext+258F29: 41 5E                 - pop r14
SO6.exe.xtext+258F2B: 5F                    - pop rdi
SO6.exe.xtext+258F2C: 5E                    - pop rsi
SO6.exe.xtext+258F2D: 5D                    - pop rbp
SO6.exe.xtext+258F2E: C3                    - ret 
SO6.exe.xtext+258F2F: 8B C7                 - mov eax,edi
SO6.exe.xtext+258F31: EB EB                 - jmp SO6.exe.xtext+258F1E
SO6.exe.xtext+258F33: 49 8B 7B 10           - mov rdi,[r11+10]
SO6.exe.xtext+258F37: EB 1D                 - jmp SO6.exe.xtext+258F56
SO6.exe.xtext+258F39: 48 8B CB              - mov rcx,rbx
SO6.exe.xtext+258F3C: 48 85 ED              - test rbp,rbp
SO6.exe.xtext+258F3F: 0F 85 9B E0 79 00     - jne SO6.exe.xtext+9F6FE0
SO6.exe.xtext+258F45: E8 16 06 00 00        - call SO6.exe.xtext+259560
SO6.exe.xtext+258F4A: 49 3B C6              - cmp rax,r14
SO6.exe.xtext+258F4D: 74 CC                 - je SO6.exe.xtext+258F1B
SO6.exe.xtext+258F4F: 48 81 C3 D8 00 00 00  - add rbx,000000D8
SO6.exe.xtext+258F56: 48 3B DF              - cmp rbx,rdi
SO6.exe.xtext+258F59: 75 DE                 - jne SO6.exe.xtext+258F39
SO6.exe.xtext+258F5B: 33 C0                 - xor eax,eax
SO6.exe.xtext+258F5D: EB BF                 - jmp SO6.exe.xtext+258F1E
SO6.exe.xtext+258F5F: 48 8D 54 24 58        - lea rdx,[rsp+58]
SO6.exe.xtext+258F64: 49 8D 4B 40           - lea rcx,[r11+40]
SO6.exe.xtext+258F68: E8 C3 5E F5 FF        - call SO6.exe.xtext+1AEE30
SO6.exe.xtext+258F6D: 8B 00                 - mov eax,[rax]
SO6.exe.xtext+258F6F: EB AD                 - jmp SO6.exe.xtext+258F1E
SO6.exe.xtext+258F71: FF C7                 - inc edi
SO6.exe.xtext+258F73: E9 68 FF FF FF        - jmp SO6.exe.xtext+258EE0
}
</AssemblerScript>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>115755</ID>
                          <Description>"base address"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>8 Bytes</VariableType>
                          <Address>sitem</Address>
                          <Offsets>
                            <Offset>0</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>115991</ID>
                          <Description>"??"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>sitem</Address>
                          <Offsets>
                            <Offset>38</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>115938</ID>
                          <Description>"Item name"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>String</VariableType>
                          <Length>20</Length>
                          <Unicode>0</Unicode>
                          <CodePage>0</CodePage>
                          <ZeroTerminate>1</ZeroTerminate>
                          <Address>sitem</Address>
                          <Offsets>
                            <Offset>98</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>115756</ID>
                          <Description>"amount"</Description>
                          <ShowAsSigned>1</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>sitem</Address>
                          <Offsets>
                            <Offset>30</Offset>
                          </Offsets>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>116114</ID>
                      <Description>"Selected armor"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{  Game Executable   : SO6.exe
   Author            : Tuuup!
   Executable Version: 1.0.0.0
   Script Date       : 2022-11-05
}
[ENABLE]
aobscanmodule(selecteditem,SO6.exe,48 8B 47 38 48 89 03 48 8B 5C)
registersymbol(selecteditem selecteditembkp sitem)
alloc(newmem,128,selecteditem)
label(return sitem)
label(selecteditembkp)
newmem:
 mov [sitem],rdi
  mov rax,[rdi+38]
  mov [rbx],rax
  jmp return
  
selecteditembkp:
readmem(selecteditem,7)
sitem:
dq 0
selecteditem:
  jmp newmem
  nop 2
return:

[DISABLE]
selecteditem:
 // db 48 8B 47 38 48 89 03
readmem(selecteditembkp,7)
unregistersymbol(*)
dealloc(*)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe.xtext+CADFF1

SO6.exe.xtext+CADF88: 4D 85 C0                       - test r8,r8
SO6.exe.xtext+CADF8B: 74 75                          - je SO6.exe.xtext+CAE002
SO6.exe.xtext+CADF8D: 48 89 5C 24 08                 - mov [rsp+08],rbx
SO6.exe.xtext+CADF92: 57                             - push rdi
SO6.exe.xtext+CADF93: 48 83 EC 20                    - sub rsp,20
SO6.exe.xtext+CADF97: 49 8B C8                       - mov rcx,r8
SO6.exe.xtext+CADF9A: 49 8B F8                       - mov rdi,r8
SO6.exe.xtext+CADF9D: 48 8B DA                       - mov rbx,rdx
SO6.exe.xtext+CADFA0: E8 E3 AB 63 FF                 - call SO6.exe.xtext+2E8B88
SO6.exe.xtext+CADFA5: 84 C0                          - test al,al
SO6.exe.xtext+CADFA7: 74 09                          - je SO6.exe.xtext+CADFB2
SO6.exe.xtext+CADFA9: C7 43 18 02 00 00 00           - mov [rbx+18],00000002
SO6.exe.xtext+CADFB0: EB 28                          - jmp SO6.exe.xtext+CADFDA
SO6.exe.xtext+CADFB2: 48 8B CF                       - mov rcx,rdi
SO6.exe.xtext+CADFB5: E8 06 AA 63 FF                 - call SO6.exe.xtext+2E89C0
SO6.exe.xtext+CADFBA: 84 C0                          - test al,al
SO6.exe.xtext+CADFBC: 74 09                          - je SO6.exe.xtext+CADFC7
SO6.exe.xtext+CADFBE: C7 43 18 03 00 00 00           - mov [rbx+18],00000003
SO6.exe.xtext+CADFC5: EB 13                          - jmp SO6.exe.xtext+CADFDA
SO6.exe.xtext+CADFC7: 48 8B CF                       - mov rcx,rdi
SO6.exe.xtext+CADFCA: E8 D1 A9 63 FF                 - call SO6.exe.xtext+2E89A0
SO6.exe.xtext+CADFCF: 84 C0                          - test al,al
SO6.exe.xtext+CADFD1: 74 07                          - je SO6.exe.xtext+CADFDA
SO6.exe.xtext+CADFD3: C7 43 18 04 00 00 00           - mov [rbx+18],00000004
SO6.exe.xtext+CADFDA: 48 8B CF                       - mov rcx,rdi
SO6.exe.xtext+CADFDD: E8 C2 0A 6F FF                 - call SO6.exe.xtext+39EAA4
SO6.exe.xtext+CADFE2: 48 8B CF                       - mov rcx,rdi
SO6.exe.xtext+CADFE5: 89 43 1C                       - mov [rbx+1C],eax
SO6.exe.xtext+CADFE8: E8 73 B5 5A FF                 - call SO6.exe.xtext+259560
SO6.exe.xtext+CADFED: 48 89 43 08                    - mov [rbx+08],rax
// ---------- INJECTING HERE ----------
SO6.exe.xtext+CADFF1: 48 8B 47 38                    - mov rax,[rdi+38]
// ---------- DONE INJECTING  ----------
SO6.exe.xtext+CADFF5: 48 89 03                       - mov [rbx],rax
SO6.exe.xtext+CADFF8: 48 8B 5C 24 30                 - mov rbx,[rsp+30]
SO6.exe.xtext+CADFFD: 48 83 C4 20                    - add rsp,20
SO6.exe.xtext+CAE001: 5F                             - pop rdi
SO6.exe.xtext+CAE002: C3                             - ret 
SO6.exe.xtext+CAE003: CC                             - int 3 
SO6.exe.xtext+CAE004: 48 89 5C 24 18                 - mov [rsp+18],rbx
SO6.exe.xtext+CAE009: 55                             - push rbp
SO6.exe.xtext+CAE00A: 56                             - push rsi
SO6.exe.xtext+CAE00B: 57                             - push rdi
SO6.exe.xtext+CAE00C: 41 54                          - push r12
SO6.exe.xtext+CAE00E: 41 55                          - push r13
SO6.exe.xtext+CAE010: 41 56                          - push r14
SO6.exe.xtext+CAE012: 41 57                          - push r15
SO6.exe.xtext+CAE014: 48 83 EC 30                    - sub rsp,30
SO6.exe.xtext+CAE018: 4C 8B F2                       - mov r14,rdx
SO6.exe.xtext+CAE01B: 48 8B F9                       - mov rdi,rcx
SO6.exe.xtext+CAE01E: 4C 8B 69 08                    - mov r13,[rcx+08]
SO6.exe.xtext+CAE022: 4C 8B 41 10                    - mov r8,[rcx+10]
SO6.exe.xtext+CAE026: 4D 2B C5                       - sub r8,r13
SO6.exe.xtext+CAE029: 49 B9 25 49 92 24 49 92 24 49  - mov r9,4924924924924925
SO6.exe.xtext+CAE033: 49 8B C1                       - mov rax,r9
SO6.exe.xtext+CAE036: 49 F7 E8                       - imul r8
SO6.exe.xtext+CAE039: 48 C1 FA 04                    - sar rdx,04
SO6.exe.xtext+CAE03D: 48 8B CA                       - mov rcx,rdx
SO6.exe.xtext+CAE040: 48 C1 E9 3F                    - shr rcx,3F
SO6.exe.xtext+CAE044: 48 03 D1                       - add rdx,rcx
SO6.exe.xtext+CAE047: 49 8B CD                       - mov rcx,r13
SO6.exe.xtext+CAE04A: 4C 3B F2                       - cmp r14,rdx
SO6.exe.xtext+CAE04D: 0F 86 DA 00 00 00              - jbe SO6.exe.xtext+CAE12D
}
</AssemblerScript>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>116115</ID>
                          <Description>"base address"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>8 Bytes</VariableType>
                          <Address>sitem</Address>
                          <Offsets>
                            <Offset>0</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116116</ID>
                          <Description>"??"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>sitem</Address>
                          <Offsets>
                            <Offset>38</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116117</ID>
                          <Description>"Item name"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>String</VariableType>
                          <Length>20</Length>
                          <Unicode>0</Unicode>
                          <CodePage>0</CodePage>
                          <ZeroTerminate>1</ZeroTerminate>
                          <Address>sitem</Address>
                          <Offsets>
                            <Offset>98</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>116118</ID>
                          <Description>"amount"</Description>
                          <ShowAsSigned>1</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>sitem</Address>
                          <Offsets>
                            <Offset>30</Offset>
                          </Offsets>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>115963</ID>
                      <Description>"Scan range"</Description>
                      <Options moHideChildren="1"/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript Async="1">{  Game Executable   : SO6.exe
   Author            : Tuuup!
   Executable Version: 1.0.0.0
   Script Date       : 2022-10-31
}
[ENABLE]
aobscanmodule(scanrange3,SO6.exe,48 63 10 48 2B CA)
registersymbol(scanrange3 scanrange3bkp scanr)
alloc(newmem,128,scanrange3)
label(return scanr)
label(scanrange3bkp)
newmem:
mov r12,scanr
mov [r12],rax
xor r12,r12
  movsxd  rdx,dword ptr [rax]
  sub rcx,rdx
  jmp return
  
scanrange3bkp:
readmem(scanrange3,6)
scanr:
dq 0
scanrange3:
  jmp newmem
  nop
return:

[DISABLE]
scanrange3:
 // db 48 63 10 48 2B CA
readmem(scanrange3bkp,6)
unregistersymbol(*)
dealloc(*)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe.xtext+171DE4

SO6.exe.xtext+171D7B: 0F 85 94 73 85 00        - jne SO6.exe.xtext+9C9115
SO6.exe.xtext+171D81: 48 8B 5C 24 48           - mov rbx,[rsp+48]
SO6.exe.xtext+171D86: 48 8B 6C 24 50           - mov rbp,[rsp+50]
SO6.exe.xtext+171D8B: 48 8B 74 24 58           - mov rsi,[rsp+58]
SO6.exe.xtext+171D90: 48 83 C4 20              - add rsp,20
SO6.exe.xtext+171D94: 41 5F                    - pop r15
SO6.exe.xtext+171D96: 41 5E                    - pop r14
SO6.exe.xtext+171D98: 5F                       - pop rdi
SO6.exe.xtext+171D99: C3                       - ret 
SO6.exe.xtext+171D9A: 48 8B D0                 - mov rdx,rax
SO6.exe.xtext+171D9D: 48 8B 40 08              - mov rax,[rax+08]
SO6.exe.xtext+171DA1: EB 8E                    - jmp SO6.exe.xtext+171D31
SO6.exe.xtext+171DA3: 48 8B C1                 - mov rax,rcx
SO6.exe.xtext+171DA6: 48 8B 49 08              - mov rcx,[rcx+08]
SO6.exe.xtext+171DAA: EB A1                    - jmp SO6.exe.xtext+171D4D
SO6.exe.xtext+171DAC: 48 89 5C 24 10           - mov [rsp+10],rbx
SO6.exe.xtext+171DB1: 48 89 6C 24 18           - mov [rsp+18],rbp
SO6.exe.xtext+171DB6: 56                       - push rsi
SO6.exe.xtext+171DB7: 57                       - push rdi
SO6.exe.xtext+171DB8: 41 54                    - push r12
SO6.exe.xtext+171DBA: 41 56                    - push r14
SO6.exe.xtext+171DBC: 41 57                    - push r15
SO6.exe.xtext+171DBE: 48 83 EC 30              - sub rsp,30
SO6.exe.xtext+171DC2: 48 8B 05 D7 36 3C 02     - mov rax,[SO6.exe+25364A0]
SO6.exe.xtext+171DC9: 48 8B D9                 - mov rbx,rcx
SO6.exe.xtext+171DCC: 0F 29 74 24 20           - movaps [rsp+20],xmm6
SO6.exe.xtext+171DD1: F3 0F 10 B0 14 01 00 00  - movss xmm6,[rax+00000114]
SO6.exe.xtext+171DD9: E8 3A F0 FF FF           - call SO6.exe.xtext+170E18
SO6.exe.xtext+171DDE: 48 8B C8                 - mov rcx,rax
SO6.exe.xtext+171DE1: 45 33 E4                 - xor r12d,r12d
// ---------- INJECTING HERE ----------
SO6.exe.xtext+171DE4: 48 63 10                 - movsxd  rdx,dword ptr [rax]
// ---------- DONE INJECTING  ----------
SO6.exe.xtext+171DE7: 48 2B CA                 - sub rcx,rdx
SO6.exe.xtext+171DEA: BA 92 01 00 00           - mov edx,00000192
SO6.exe.xtext+171DEF: 66 3B 11                 - cmp dx,[rcx]
SO6.exe.xtext+171DF2: 0F 83 3E 01 00 00        - jae SO6.exe.xtext+171F36
SO6.exe.xtext+171DF8: 0F B7 89 92 01 00 00     - movzx ecx,word ptr [rcx+00000192]
SO6.exe.xtext+171DFF: 66 85 C9                 - test cx,cx
SO6.exe.xtext+171E02: 0F 84 2E 01 00 00        - je SO6.exe.xtext+171F36
SO6.exe.xtext+171E08: F3 0F 10 0C 01           - movss xmm1,[rcx+rax]
SO6.exe.xtext+171E0D: F3 0F 59 0D 73 75 4D 01  - mulss xmm1,[SO6.exe.sbss+134388]
SO6.exe.xtext+171E15: 4C 8D 4B 58              - lea r9,[rbx+58]
SO6.exe.xtext+171E19: 48 8B 43 60              - mov rax,[rbx+60]
SO6.exe.xtext+171E1D: F3 0F 59 0D 63 75 4D 01  - mulss xmm1,[SO6.exe.sbss+134388]
SO6.exe.xtext+171E25: 49 3B C1                 - cmp rax,r9
SO6.exe.xtext+171E28: 0F 85 EE 00 00 00        - jne SO6.exe.xtext+171F1C
SO6.exe.xtext+171E2E: 48 8B 3D B3 36 3C 02     - mov rdi,[SO6.exe+25364E8]
SO6.exe.xtext+171E35: 48 85 FF                 - test rdi,rdi
SO6.exe.xtext+171E38: 0F 84 86 00 00 00        - je SO6.exe.xtext+171EC4
SO6.exe.xtext+171E3E: F3 0F 58 B3 EC 0C 00 00  - addss xmm6,[rbx+00000CEC]
SO6.exe.xtext+171E46: F3 0F 2C EE              - cvttss2si ebp,xmm6
SO6.exe.xtext+171E4A: 66 0F 6E C5              - movd xmm0,ebp
SO6.exe.xtext+171E4E: 0F 5B C0                 - cvtdq2ps xmm0,xmm0
SO6.exe.xtext+171E51: F3 0F 5C F0              - subss xmm6,xmm0
SO6.exe.xtext+171E55: F3 0F 11 B3 EC 0C 00 00  - movss [rbx+00000CEC],xmm6
SO6.exe.xtext+171E5D: 4C 8B B3 C8 00 00 00     - mov r14,[rbx+000000C8]
SO6.exe.xtext+171E64: 48 8B 9B C0 00 00 00     - mov rbx,[rbx+000000C0]
SO6.exe.xtext+171E6B: 49 3B DE                 - cmp rbx,r14
SO6.exe.xtext+171E6E: 74 54                    - je SO6.exe.xtext+171EC4
SO6.exe.xtext+171E70: 48 8D 77 68              - lea rsi,[rdi+68]
SO6.exe.xtext+171E74: 48 8B 4F 78              - mov rcx,[rdi+78]
SO6.exe.xtext+171E78: 4C 8B 13                 - mov r10,[rbx]
}
</AssemblerScript>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>115964</ID>
                          <Description>"Injection address do not change!!"</Description>
                          <ShowAsSigned>1</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>scanr</Address>
                          <Offsets>
                            <Offset>0</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>115965</ID>
                          <Description>"Scan range"</Description>
                          <ShowAsSigned>1</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>scanr</Address>
                          <Offsets>
                            <Offset>5c4</Offset>
                          </Offsets>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>91</ID>
              <Description>"What does this do? (Value:(float)1 is assigned to Drop Rate, Chain Multi, and ....here?)"</Description>
              <Options moHideChildren="1"/>
              <Color>000000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : SO6.exe
  Version: 
  Date   : 2022-10-30
  Author : asmor

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(UnknownAOB,SO6.exe,89 86 00 54 07 00) // should be unique
alloc(newmem,$1000,UnknownAOB)

label(code)
label(return)
label(UnknownValue)

newmem:

code:
  mov eax,[UnknownValue]
  mov [rsi+00075400],eax
  mov eax,(float)1 //set eax back to 1
  jmp return

UnknownValue:
  dd (float)1

UnknownAOB:
  jmp newmem
  nop
return:
registersymbol(UnknownAOB)
registersymbol(UnknownValue)

[DISABLE]

UnknownAOB:
  db 89 86 00 54 07 00

unregistersymbol(UnknownAOB)
unregistersymbol(UnknownValue)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe+173D82

SO6.exe+173D4F: 44 8A F0              - mov r14l,al
SO6.exe+173D52: 84 C0                 - test al,al
SO6.exe+173D54: 0F 85 86 02 00 00     - jne SO6.exe+173FE0
SO6.exe+173D5A: 44 38 B6 75 14 00 00  - cmp [rsi+00001475],r14l
SO6.exe+173D61: 0F 85 6E 03 00 00     - jne SO6.exe+1740D5
SO6.exe+173D67: 44 88 A6 76 14 00 00  - mov [rsi+00001476],r12l
SO6.exe+173D6E: 48 85 DB              - test rbx,rbx
SO6.exe+173D71: 0F 85 22 01 00 00     - jne SO6.exe+173E99
SO6.exe+173D77: B8 00 00 80 3F        - mov eax,3F800000
SO6.exe+173D7C: 89 86 FC 53 07 00     - mov [rsi+000753FC],eax
// ---------- INJECTING HERE ----------
SO6.exe+173D82: 89 86 00 54 07 00     - mov [rsi+00075400],eax
// ---------- DONE INJECTING  ----------
SO6.exe+173D88: 89 86 04 54 07 00     - mov [rsi+00075404],eax
SO6.exe+173D8E: 44 38 AE F0 16 00 00  - cmp [rsi+000016F0],r13l
SO6.exe+173D95: 0F 85 D4 02 00 00     - jne SO6.exe+17406F
SO6.exe+173D9B: 48 8B 86 C8 14 00 00  - mov rax,[rsi+000014C8]
SO6.exe+173DA2: 48 39 86 C0 14 00 00  - cmp [rsi+000014C0],rax
SO6.exe+173DA9: 0F 85 E7 02 00 00     - jne SO6.exe+174096
SO6.exe+173DAF: E8 44 04 00 00        - call SO6.exe+1741F8
SO6.exe+173DB4: 0F 28 D0              - movaps xmm2,xmm0
SO6.exe+173DB7: 44 38 AE 0C 54 07 00  - cmp [rsi+0007540C],r13l
SO6.exe+173DBE: 0F 85 8B 6F 85 00     - jne SO6.exe+9CAD4F
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>92</ID>
                  <Description>"Unknown - Mechanic I haven't enountered yet perhaps?"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>UnknownValue</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>85</ID>
                  <Description>"[rsi+00075400] You must locate this value manually"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>178CE5EB0</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>124</ID>
              <Description>"Scanner Research"</Description>
              <Options moHideChildren="1"/>
              <Color>000000</Color>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>128</ID>
                  <Description>"Scan Bonus"</Description>
                  <Options moHideChildren="1"/>
                  <Color>000000</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : SO6.exe
  Version: 
  Date   : 2022-11-02
  Author : asmor

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(ScanMultAOB,SO6.exe,F3 0F 59 C8 F3 0F 11 4D DB) // should be unique
alloc(newmem,$1000,ScanMultAOB)

label(code)
label(return)
label(ScanMult)

newmem:

code:
  movss xmm0,[ScanMult]
  mulss xmm1,xmm0
  movss [rbp-25],xmm1
  jmp return

ScanMult:
  dd (float)2.5

ScanMultAOB:
  jmp newmem
  nop 4
return:
registersymbol(ScanMultAOB)
registersymbol(ScanMult)

[DISABLE]

ScanMultAOB:
  db F3 0F 59 C8 F3 0F 11 4D DB

unregistersymbol(ScanMultAOB)
unregistersymbol(ScanMult)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe+9461E8

SO6.exe+9461C4: E8 17 44 83 FF  - call SO6.exe+17A5E0
SO6.exe+9461C9: 48 85 C0        - test rax,rax
SO6.exe+9461CC: 74 23           - je SO6.exe+9461F1
SO6.exe+9461CE: 48 8B C8        - mov rcx,rax
SO6.exe+9461D1: E8 4E F4 82 FF  - call SO6.exe+175624
SO6.exe+9461D6: 48 85 C0        - test rax,rax
SO6.exe+9461D9: 74 16           - je SO6.exe+9461F1
SO6.exe+9461DB: 48 8B C8        - mov rcx,rax
SO6.exe+9461DE: E8 A5 45 B5 FF  - call SO6.exe+49A788
SO6.exe+9461E3: F3 0F 10 4D DB  - movss xmm1,[rbp-25]
// ---------- INJECTING HERE ----------
SO6.exe+9461E8: F3 0F 59 C8     - mulss xmm1,xmm0
// ---------- DONE INJECTING  ----------
SO6.exe+9461EC: F3 0F 11 4D DB  - movss [rbp-25],xmm1
SO6.exe+9461F1: 48 8B CF        - mov rcx,rdi
SO6.exe+9461F4: E8 53 15 AE FF  - call SO6.exe+42774C
SO6.exe+9461F9: 48 8B CF        - mov rcx,rdi
SO6.exe+9461FC: E8 D3 B2 AE FF  - call SO6.exe+4314D4
SO6.exe+946201: 48 8B CF        - mov rcx,rdi
SO6.exe+946204: E8 CB B2 AE FF  - call SO6.exe+4314D4
SO6.exe+946209: 48 8B 4D C7     - mov rcx,[rbp-39]
SO6.exe+94620D: E8 76 1A 77 FF  - call SO6.exe+B7C88
SO6.exe+946212: 8B 08           - mov ecx,[rax]
}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>129</ID>
                      <Description>"Multiplier (Default 1)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>ScanMult</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>127</ID>
                  <Description>"Base Range"</Description>
                  <Options moHideChildren="1"/>
                  <Color>000000</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : SO6.exe
  Version: 
  Date   : 2022-11-02
  Author : asmor

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(BaseRangeAOB,SO6.exe,F3 0F 11 45 DB 48 8B 4D) // should be unique
alloc(newmem,$1000,BaseRangeAOB)

label(code)
label(return)
label(BaseRange)

newmem:

code:
  movss xmm0,[BaseRange]
  movss [rbp-25],xmm0
  jmp return

BaseRange:
  dd (float)5000

BaseRangeAOB:
  jmp newmem
return:
registersymbol(BaseRangeAOB)
registersymbol(BaseRange)

[DISABLE]

BaseRangeAOB:
  db F3 0F 11 45 DB

unregistersymbol(BaseRangeAOB)
unregistersymbol(BaseRange)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe+9461AF

SO6.exe+946181: E8 6A 75 9B FF        - call SO6.exe+2FD6F0
SO6.exe+946186: 48 89 45 CF           - mov [rbp-31],rax
SO6.exe+94618A: 48 8B 0D 97 DB B3 01  - mov rcx,[SO6.exe+2483D28]
SO6.exe+946191: E8 6A 67 C3 FF        - call SO6.exe+57C900
SO6.exe+946196: 48 89 45 C7           - mov [rbp-39],rax
SO6.exe+94619A: E8 79 BC 82 FF        - call SO6.exe+171E18
SO6.exe+94619F: BA 74 01 00 00        - mov edx,00000174
SO6.exe+9461A4: 0F 57 D2              - xorps xmm2,xmm2
SO6.exe+9461A7: 48 8B C8              - mov rcx,rax
SO6.exe+9461AA: E8 7D 14 83 FF        - call SO6.exe+17762C
// ---------- INJECTING HERE ----------
SO6.exe+9461AF: F3 0F 11 45 DB        - movss [rbp-25],xmm0
// ---------- DONE INJECTING  ----------
SO6.exe+9461B4: 48 8B 4D C7           - mov rcx,[rbp-39]
SO6.exe+9461B8: 45 33 FF              - xor r15d,r15d
SO6.exe+9461BB: 48 85 C9              - test rcx,rcx
SO6.exe+9461BE: 0F 84 04 01 00 00     - je SO6.exe+9462C8
SO6.exe+9461C4: E8 17 44 83 FF        - call SO6.exe+17A5E0
SO6.exe+9461C9: 48 85 C0              - test rax,rax
SO6.exe+9461CC: 74 23                 - je SO6.exe+9461F1
SO6.exe+9461CE: 48 8B C8              - mov rcx,rax
SO6.exe+9461D1: E8 4E F4 82 FF        - call SO6.exe+175624
SO6.exe+9461D6: 48 85 C0              - test rax,rax
}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>126</ID>
                      <Description>"Value (Default 5000)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>BaseRange</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>130</ID>
                  <Description>"Scan Distance (Read Only)"</Description>
                  <Options moHideChildren="1"/>
                  <Color>000000</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : SO6.exe
  Version: 
  Date   : 2022-11-02
  Author : asmor

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(ScanDistanceAOB,SO6.exe,F3 0F 59 C0 F3 0F 11 45 DB) // should be unique
alloc(newmem,$1000,ScanDistanceAOB)

label(code)
label(return)
label(ScanDistance)
label(ScanDistance2)

newmem:

code:
  movss [ScanDistance],xmm0
  mulss xmm0,xmm0
  movss [ScanDistance2],xmm0
  movss [rbp-25],xmm0
  jmp return

ScanDistance:
  dd (Float)1

ScanDistance2:
  dd (Float)1


ScanDistanceAOB:
  jmp newmem
  nop 4
return:
registersymbol(ScanDistanceAOB)
registersymbol(ScanDistance)
registersymbol(ScanDistance2)

[DISABLE]

ScanDistanceAOB:
  db F3 0F 59 C0 F3 0F 11 45 DB

unregistersymbol(ScanDistanceAOB)
unregistersymbol(ScanDistance)
unregistersymbol(ScanDistance2)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe+9462C8

SO6.exe+94629A: 4C 89 7D FF           - mov [rbp-01],r15
SO6.exe+94629E: 48 8B 45 C7           - mov rax,[rbp-39]
SO6.exe+9462A2: 48 63 90 08 1E 00 00  - movsxd  rdx,dword ptr [rax+00001E08]
SO6.exe+9462A9: 4C 89 7C 24 20        - mov [rsp+20],r15
SO6.exe+9462AE: 41 B1 01              - mov r9l,01
SO6.exe+9462B1: 4C 8D 45 DF           - lea r8,[rbp-21]
SO6.exe+9462B5: E8 66 02 95 FF        - call SO6.exe+296520
SO6.exe+9462BA: 8B 45 E7              - mov eax,[rbp-19]
SO6.exe+9462BD: 89 83 C8 05 00 00     - mov [rbx+000005C8],eax
SO6.exe+9462C3: F3 0F 10 45 DB        - movss xmm0,[rbp-25]
// ---------- INJECTING HERE ----------
SO6.exe+9462C8: F3 0F 59 C0           - mulss xmm0,xmm0
// ---------- DONE INJECTING  ----------
SO6.exe+9462CC: F3 0F 11 45 DB        - movss [rbp-25],xmm0
SO6.exe+9462D1: 44 88 7D D7           - mov [rbp-29],r15l
SO6.exe+9462D5: 44 88 7D D8           - mov [rbp-28],r15l
SO6.exe+9462D9: 48 89 5D DF           - mov [rbp-21],rbx
SO6.exe+9462DD: 48 8D 45 CF           - lea rax,[rbp-31]
SO6.exe+9462E1: 48 89 45 E7           - mov [rbp-19],rax
SO6.exe+9462E5: 48 8D 45 C7           - lea rax,[rbp-39]
SO6.exe+9462E9: 48 89 45 EF           - mov [rbp-11],rax
SO6.exe+9462ED: 48 8D 45 DB           - lea rax,[rbp-25]
SO6.exe+9462F1: 48 89 45 F7           - mov [rbp-09],rax
}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>131</ID>
                      <Description>"Radius (Default 5000)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>ScanDistance</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>132</ID>
                      <Description>"R^2 (Defalut 25,000,000)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>ScanDistance2</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>144</ID>
                      <Description>"[rbp-25] (Break - What writes helper)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>0014FC84</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>145</ID>
                  <Description>"Scan Check 1 (Circle Formula)"</Description>
                  <Options moHideChildren="1"/>
                  <Color>000000</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : SO6.exe
  Version: 
  Date   : 2022-11-03
  Author : asmor

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(ScanCheck1AOB,SO6.exe,F3 0F 58 C8 0F 2F 08) // should be unique
alloc(newmem,$1000,ScanCheck1AOB)

label(code)
label(return)
label(ScanCheck1)
label(ScanCheck1Disable)

newmem:

code:
  //addss xmm1,xmm0
  movss xmm1,[ScanCheck1]         //Max float Value
  mulss xmm1,[ScanCheck1Disable]  //1=Disable, 0=Enable
  comiss xmm1,[rax]
  jmp return

ScanCheck1:
  dd 0x7f7fffff

ScanCheck1Disable:
  dd (float)1

ScanCheck1AOB:
  jmp newmem
  nop 2
return:
registersymbol(ScanCheck1AOB)
registersymbol(ScanCheck1)
registersymbol(ScanCheck1Disable)

[DISABLE]

ScanCheck1AOB:
  db F3 0F 58 C8 0F 2F 08

unregistersymbol(ScanCheck1AOB)
unregistersymbol(ScanCheck1)
unregistersymbol(ScanCheck1Disable)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe+B526B6

SO6.exe+B52688: 48 8B D0                 - mov rdx,rax
SO6.exe+B5268B: E8 F8 55 56 FF           - call SO6.exe+B7C88
SO6.exe+B52690: F3 0F 10 08              - movss xmm1,[rax]
SO6.exe+B52694: F3 0F 5C 0A              - subss xmm1,[rdx]
SO6.exe+B52698: F3 0F 10 40 08           - movss xmm0,[rax+08]
SO6.exe+B5269D: F3 0F 5C 42 08           - subss xmm0,[rdx+08]
SO6.exe+B526A2: 48 8B 43 18              - mov rax,[rbx+18]
SO6.exe+B526A6: F3 0F 59 C9              - mulss xmm1,xmm1
SO6.exe+B526AA: F3 0F 59 C0              - mulss xmm0,xmm0
SO6.exe+B526AE: F3 0F 58 0D 56 77 AF 00  - addss xmm1,[SO6.exe+1649E0C]
// ---------- INJECTING HERE ----------
SO6.exe+B526B6: F3 0F 58 C8              - addss xmm1,xmm0
// ---------- DONE INJECTING  ----------
SO6.exe+B526BA: 0F 2F 08                 - comiss xmm1,[rax]
SO6.exe+B526BD: 0F 87 64 01 00 00        - ja SO6.exe+B52827
SO6.exe+B526C3: E8 C0 55 56 FF           - call SO6.exe+B7C88
SO6.exe+B526C8: 49 8B C8                 - mov rcx,r8
SO6.exe+B526CB: 48 8B D0                 - mov rdx,rax
SO6.exe+B526CE: E8 B5 55 56 FF           - call SO6.exe+B7C88
SO6.exe+B526D3: F3 0F 10 72 04           - movss xmm6,[rdx+04]
SO6.exe+B526D8: 48 8B 4B 20              - mov rcx,[rbx+20]
SO6.exe+B526DC: F3 0F 5C 70 04           - subss xmm6,[rax+04]
SO6.exe+B526E1: E8 66 50 8D FF           - call SO6.exe+42774C
}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>115824</ID>
                      <Description>"State"</Description>
                      <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">1:Disabled
0:Enabled
</DropDownList>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>ScanCheck1Disable</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>147</ID>
                  <Description>"Scan Check 2 (Absolute Value)"</Description>
                  <Options moHideChildren="1"/>
                  <Color>000000</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : SO6.exe
  Version: 
  Date   : 2022-11-03
  Author : asmor

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(ScanCheck2AOB,SO6.exe,F3 0F 5C 70 04 E8 66) // should be unique
alloc(newmem,$1000,ScanCheck2AOB)

label(code)
label(return)
label(ScanCheck2)
label(ScanCheck2Disable)

newmem:

code:
  //subss xmm6,[rax+04]
  movss xmm6,[ScanCheck2]
  mulss xmm6,[ScanCheck2Disable]
  jmp return

ScanCheck2:
  dd 0x7f7fffff

ScanCheck2Disable:
  dd (float)1

ScanCheck2AOB:
  jmp newmem
return:
registersymbol(ScanCheck2AOB)
registersymbol(ScanCheck2)
registersymbol(ScanCheck2Disable)

[DISABLE]

ScanCheck2AOB:
  db F3 0F 5C 70 04

unregistersymbol(ScanCheck2AOB)
unregistersymbol(ScanCheck2)
unregistersymbol(ScanCheck2Disable)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe+B526DC

SO6.exe+B526AE: F3 0F 58 0D 56 77 AF 00  - addss xmm1,[SO6.exe+1649E0C]
SO6.exe+B526B6: F3 0F 58 C8              - addss xmm1,xmm0
SO6.exe+B526BA: 0F 2F 08                 - comiss xmm1,[rax]
SO6.exe+B526BD: 0F 87 64 01 00 00        - ja SO6.exe+B52827
SO6.exe+B526C3: E8 C0 55 56 FF           - call SO6.exe+B7C88
SO6.exe+B526C8: 49 8B C8                 - mov rcx,r8
SO6.exe+B526CB: 48 8B D0                 - mov rdx,rax
SO6.exe+B526CE: E8 B5 55 56 FF           - call SO6.exe+B7C88
SO6.exe+B526D3: F3 0F 10 72 04           - movss xmm6,[rdx+04]
SO6.exe+B526D8: 48 8B 4B 20              - mov rcx,[rbx+20]
// ---------- INJECTING HERE ----------
SO6.exe+B526DC: F3 0F 5C 70 04           - subss xmm6,[rax+04]
// ---------- DONE INJECTING  ----------
SO6.exe+B526E1: E8 66 50 8D FF           - call SO6.exe+42774C
SO6.exe+B526E6: 0F 2F F0                 - comiss xmm6,xmm0
SO6.exe+B526E9: 0F 87 38 01 00 00        - ja SO6.exe+B52827
SO6.exe+B526EF: 48 8B 4B 20              - mov rcx,[rbx+20]
SO6.exe+B526F3: E8 DC ED 8D FF           - call SO6.exe+4314D4
SO6.exe+B526F8: 0F 57 05 D1 78 AF 00     - xorps xmm0,[SO6.exe+1649FD0]
SO6.exe+B526FF: 0F 2F C6                 - comiss xmm0,xmm6
SO6.exe+B52702: 0F 87 1F 01 00 00        - ja SO6.exe+B52827
SO6.exe+B52708: 8B 15 76 17 93 01        - mov edx,[SO6.exe+2483E84]
SO6.exe+B5270E: 48 8B CF                 - mov rcx,rdi
}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>115825</ID>
                      <Description>"State"</Description>
                      <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">1:Disabled
0:Enabled
</DropDownList>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>ScanCheck2Disable</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>149</ID>
                  <Description>"Scan Detected Handler"</Description>
                  <Options moHideChildren="1"/>
                  <Color>000000</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : SO6.exe
  Version: 
  Date   : 2022-11-03
  Author : asmor

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(ScanDetectionHandlerAOB,SO6.exe,48 8B 43 28 80 38 00) // should be unique
alloc(newmem,$1000,ScanDetectionHandlerAOB)

label(code)
label(return)
label(ScanDetectionHandler)

newmem:

code:
  mov rax,[rbx+28]
  //cmp byte ptr [rax],00
  cmp byte ptr [ScanDetectionHandler],00
  jmp return

ScanDetectionHandler:
  db 00

ScanDetectionHandlerAOB:
  jmp newmem
  nop 2
return:
registersymbol(ScanDetectionHandlerAOB)
registersymbol(ScanDetectionHandler)

[DISABLE]

ScanDetectionHandlerAOB:
  db 48 8B 43 28 80 38 00

unregistersymbol(ScanDetectionHandlerAOB)
unregistersymbol(ScanDetectionHandler)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe+B527D6

SO6.exe+B527B4: EB 17                 - jmp SO6.exe+B527CD
SO6.exe+B527B6: 8B 15 AC 3D 9E 01     - mov edx,[SO6.exe+2536568]
SO6.exe+B527BC: 48 8B CF              - mov rcx,rdi
SO6.exe+B527BF: E8 F4 7E 62 FF        - call SO6.exe+17A6B8
SO6.exe+B527C4: 48 85 C0              - test rax,rax
SO6.exe+B527C7: 74 0D                 - je SO6.exe+B527D6
SO6.exe+B527C9: 80 78 54 00           - cmp byte ptr [rax+54],00
SO6.exe+B527CD: 74 07                 - je SO6.exe+B527D6
SO6.exe+B527CF: 48 8B 43 28           - mov rax,[rbx+28]
SO6.exe+B527D3: C6 00 01              - mov byte ptr [rax],01
// ---------- INJECTING HERE ----------
SO6.exe+B527D6: 48 8B 43 28           - mov rax,[rbx+28]
// ---------- DONE INJECTING  ----------
SO6.exe+B527DA: 80 38 00              - cmp byte ptr [rax],00
SO6.exe+B527DD: 74 0B                 - je SO6.exe+B527EA
SO6.exe+B527DF: 48 8B 0B              - mov rcx,[rbx]
SO6.exe+B527E2: 48 8B D7              - mov rdx,rdi
SO6.exe+B527E5: E8 FE 32 51 FF        - call SO6.exe+65AE8
SO6.exe+B527EA: 48 8B CF              - mov rcx,rdi
SO6.exe+B527ED: E8 EE 7D 62 FF        - call SO6.exe+17A5E0
SO6.exe+B527F2: 48 85 C0              - test rax,rax
SO6.exe+B527F5: 74 30                 - je SO6.exe+B52827
SO6.exe+B527F7: 48 8D 88 78 61 00 00  - lea rcx,[rax+00006178]
}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>150</ID>
                      <Description>"Status"</Description>
                      <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:Disabled
1:Enabled
</DropDownList>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Byte</VariableType>
                      <Address>ScanDetectionHandler</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>115831</ID>
                  <Description>"Restore D.U.M.A's Voice"</Description>
                  <Color>000000</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : SO6.exe
  Version: 
  Date   : 2022-11-03
  Author : asmor

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(dumaVoiceAOB,SO6.exe,C6 83 A0 05 00 00 01) // should be unique
alloc(newmem,$1000,dumaVoiceAOB)

label(code)
label(return)

newmem:

code:
  mov byte ptr [rbx+000005A0],00
  jmp return

dumaVoiceAOB:
  jmp newmem
  nop 2
return:
registersymbol(dumaVoiceAOB)

[DISABLE]

dumaVoiceAOB:
  db C6 83 A0 05 00 00 01

unregistersymbol(dumaVoiceAOB)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe+946386

SO6.exe+946364: 74 27                 - je SO6.exe+94638D
SO6.exe+946366: 48 8D 4D DF           - lea rcx,[rbp-21]
SO6.exe+94636A: E8 D5 33 83 FF        - call SO6.exe+179744
SO6.exe+94636F: 48 8B C8              - mov rcx,rax
SO6.exe+946372: E8 69 42 83 FF        - call SO6.exe+17A5E0
SO6.exe+946377: 48 85 C0              - test rax,rax
SO6.exe+94637A: 74 11                 - je SO6.exe+94638D
SO6.exe+94637C: 8B D7                 - mov edx,edi
SO6.exe+94637E: 48 8B C8              - mov rcx,rax
SO6.exe+946381: E8 BE C7 CB FF        - call SO6.exe+602B44
// ---------- INJECTING HERE ----------
SO6.exe+946386: C6 83 A0 05 00 00 01  - mov byte ptr [rbx+000005A0],01
// ---------- DONE INJECTING  ----------
SO6.exe+94638D: 48 8D 4D DF           - lea rcx,[rbp-21]
SO6.exe+946391: E8 32 9C 7F FF        - call SO6.exe+13FFC8
SO6.exe+946396: 48 8B 7B 58           - mov rdi,[rbx+58]
SO6.exe+94639A: 4C 8B 73 60           - mov r14,[rbx+60]
SO6.exe+94639E: 49 3B FE              - cmp rdi,r14
SO6.exe+9463A1: 74 40                 - je SO6.exe+9463E3
SO6.exe+9463A3: 48 8B 0F              - mov rcx,[rdi]
SO6.exe+9463A6: E8 3D EE 88 FF        - call SO6.exe+1D51E8
SO6.exe+9463AB: 48 83 C7 08           - add rdi,08
SO6.exe+9463AF: 49 3B FE              - cmp rdi,r14
}
</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>116216</ID>
              <Description>"Class Tables (Pointers)"</Description>
              <Options moHideChildren="1"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>116963</ID>
                  <Description>"Template"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

-- Set up local Variables
-- String to Search for
local bt = stringToByteTable(".?AVPlayerCharacterInfo@Character@TDF@@")
-- Class name. Add into [DISABLED] section as well
local Cname = "Template"
local ScanString = ""
local lngt = 0

-- The first half does steps outlined in https://framedsc.com/GeneralGuides/using_rtti.htm

for i, v in ipairs(bt) do
    ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('First Scan Complete: ' .. AoB[0])

-- Subtract Module Start Address 0x140000000
-- Subtract 0x10
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0x140000000
ScanString = ScanString - 0x10

-- Scan for the 4 Byte address of result
bt = dwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Second Scan Complete: ' .. AoB[0])

-- Subtract 0xC
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0xC

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Third Scan Complete: ' .. AoB[0])

--Add 0x8
ScanString = getAddress(AoB[0])
ScanString = ScanString + 0x8

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Fourth Scan Complete: ' .. AoB[0])

-- End of first half.

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

lngt = AoB.getCount() - 1
print(lngt + 1 .. ' Records Found')

for i = 0,lngt do

    local mr = AddressList.createMemoryRecord()
    mr.Description = Cname .. " " .. i
    mr.Type = vtAutoAssembler
    mr.Options = 'moHideChildren'
    mr.appendToEntry(mr_inv)

    local mr_inv2 = AddressList.getMemoryRecordByDescription(Cname .. " " .. i)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "[Template+0000] Base Address"
    mr.Type = vtPointer
    mr.Address = AoB[i]
    mr.appendToEntry(mr_inv2)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local Cname = "Template"

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>165587</ID>
                  <Description>"CustomQuery"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

local startAddr = getAddress("1792184F0")
local endAddr = getAddress("179225048")
local offset = 0xD8

local rCount = (endAddr-startAddr) / offset

local mr_inv = AddressList.getMemoryRecordByDescription("CustomQuery")

for i = 0,rCount do

    local mr = AddressList.createMemoryRecord()
    mr.Description = i
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = string.format('%X',startAddr + i * offset + 0x68)
    mr.appendToEntry(mr_inv)

end
{$asm}
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local mr_inv = AddressList.getMemoryRecordByDescription("CustomQuery")

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>116928</ID>
                  <Description>"Item Classes"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>116912</ID>
                      <Description>"Item"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

-- Set up local Variables
-- String to Search for
local bt = stringToByteTable(".?AVItem@0TDF@@")
-- Class name. Add into [DISABLED] section as well
local Cname = "Item"
local ScanString = ""
local lngt = 0

-- The first half does steps outlined in https://framedsc.com/GeneralGuides/using_rtti.htm

for i, v in ipairs(bt) do
    ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('First Scan Complete: ' .. AoB[0])

-- Subtract Module Start Address 0x140000000
-- Subtract 0x10
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0x140000000
ScanString = ScanString - 0x10

-- Scan for the 4 Byte address of result
bt = dwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Second Scan Complete: ' .. AoB[0])

-- Subtract 0xC
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0xC

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Third Scan Complete: ' .. AoB[0])

--Add 0x8
ScanString = getAddress(AoB[0])
ScanString = ScanString + 0x8

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Fourth Scan Complete: ' .. AoB[0])

-- End of first half.

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

local lngt = AoB.getCount() - 1
print(lngt + 1 .. ' Records Found')

for i = 0,lngt do

    local mr = AddressList.createMemoryRecord()
    mr.Description = Cname .. ' ' .. i .. ' (' .. readString(AoB[i] .. ' + 98',100) .. ')'
    mr.Type = vtAutoAssembler
    mr.Options = 'moHideChildren'
    mr.appendToEntry(mr_inv)

    local mr_inv2 = AddressList.getMemoryRecordByDescription(Cname .. ' ' .. i .. ' (' .. readString(AoB[i] .. ' + 98',100) .. ')')

      local mr = AddressList.createMemoryRecord()
      mr.Description = "[Item+0000] Base Address"
      mr.Type = vtPointer
      mr.ShowAsHex = true
      mr.Address = AoB[i]
      mr.appendToEntry(mr_inv2)

      local mr = AddressList.createMemoryRecord()
      mr.Description = "[Item+0008] Unknown Pointer (Identical)"
      mr.Type = vtQword
      mr.ShowAsHex = true
      mr.Address = AoB[i] .. ' + 8'
      mr.appendToEntry(mr_inv2)

      local mr = AddressList.createMemoryRecord()
      mr.Description = "[Item+0010] Unknown 8 Byte (Same as Item+0028)"
      mr.Type = vtQword
      mr.ShowAsHex = true
      mr.Address = AoB[i] .. ' + 10'
      mr.appendToEntry(mr_inv2)

      local mr = AddressList.createMemoryRecord()
      mr.Description = "[Item+0018] Unknown 4 Byte"
      mr.Type = vtDword
      mr.ShowAsHex = true
      mr.Address = AoB[i] .. ' + 18'
      mr.appendToEntry(mr_inv2)

      local mr = AddressList.createMemoryRecord()
      mr.Description = "[Item+0028] Unknown 8 Byte (Same as Item+0010"
      mr.Type = vtQword
      mr.ShowAsHex = true
      mr.Address = AoB[i] .. ' + 28'
      mr.appendToEntry(mr_inv2)

      local mr = AddressList.createMemoryRecord()
      mr.Description = "[Item+0030] Quantity"
      mr.Type = vtDword
      mr.Address = AoB[i] .. ' + 30'
      mr.appendToEntry(mr_inv2)

      local mr = AddressList.createMemoryRecord()
      mr.Description = "[Item+0038] Sort Recent Counter"
      mr.Type = vtDword
      mr.Address = AoB[i] .. ' + 38'
      mr.appendToEntry(mr_inv2)

      local mr = AddressList.createMemoryRecord()
      mr.Description = "[Item+0040] Equipped User/Slot"
      mr.Type = vtDword
      mr.ShowAsHex = true
      mr.Address = AoB[i] .. ' + 40'
      mr.appendToEntry(mr_inv2)

      local mr = AddressList.createMemoryRecord()
      mr.Description = "[Item+0048] Unknown 4 Byte"
      mr.Type = vtDword
      mr.Address = AoB[i] .. ' + 48'
      mr.appendToEntry(mr_inv2)

      local mr = AddressList.createMemoryRecord()
      mr.Description = "[Item+004C] Unknown 1 Byte"
      mr.Type = vtByte
      mr.Address = AoB[i] .. ' + 4C'
      mr.appendToEntry(mr_inv2)

      local mr = AddressList.createMemoryRecord()
      mr.Description = "[Item+0050] Factor 1"
      mr.Type = vtQword
      mr.ShowAsHex = true
      mr.Address = AoB[i] .. ' + 50'
      --mr.DropDownLinked = true
      --mr.DropDownLinkedMemrec = 'DropDownLinkedMemrec.Factors'
      --mr.DisplayAsDropDownListItem = true
      mr.appendToEntry(mr_inv2)

      local mr = AddressList.createMemoryRecord()
      mr.Description = "[Item+0058] Factor 2"
      mr.Type = vtQword
      mr.ShowAsHex = true
      mr.Address = AoB[i] .. ' + 58'
      mr.appendToEntry(mr_inv2)

      local mr = AddressList.createMemoryRecord()
      mr.Description = "[Item+0060] Factor 3"
      mr.Type = vtQword
      mr.ShowAsHex = true
      mr.Address = AoB[i] .. ' + 60'
      mr.appendToEntry(mr_inv2)

      local mr = AddressList.createMemoryRecord()
      mr.Description = "[Item+0068] Factor 4"
      mr.Type = vtQword
      mr.ShowAsHex = true
      mr.Address = AoB[i] .. ' + 68'
      mr.appendToEntry(mr_inv2)

      local mr = AddressList.createMemoryRecord()
      mr.Description = "[Item+0070] Pointer to Item+98"
      mr.Type = vtQword
      mr.ShowAsHex = true
      mr.Address = AoB[i] .. ' + 70'
      mr.appendToEntry(mr_inv2)

      local mr = AddressList.createMemoryRecord()
      mr.Description = "[Item+0078] Unknown 4 Byte"
      mr.Type = vtDword
      mr.Address = AoB[i] .. ' + 78'
      mr.appendToEntry(mr_inv2)

      local mr = AddressList.createMemoryRecord()
      mr.Description = "[Item+0090] Pointer to Item+98"
      mr.Type = vtQword
      mr.ShowAsHex = true
      mr.Address = AoB[i] .. ' + 90'
      mr.appendToEntry(mr_inv2)

      local mr = AddressList.createMemoryRecord()
      mr.Description = "[Item+0098] Item Name"
      mr.Type = vtString
      mr.String.Size = 100
      mr.Address = AoB[i] .. ' + 98'
      mr.appendToEntry(mr_inv2)

      local mr = AddressList.createMemoryRecord()
      mr.Description = "[Item+0020] Item Base Pointer " .. i
      mr.Type = vtQword
      mr.ShowAsHex = true
      mr.Address = AoB[i] .. ' + 20'
      mr.appendToEntry(mr_inv2)

      local mr_inv3 = AddressList.getMemoryRecordByDescription("[Item+0020] Item Base Pointer " .. i)

        local mr = AddressList.createMemoryRecord()
        mr.Description = "[Pointer+0050] Weakness"
        mr.Type = vtDword
        mr.Address = string.format('%X',readQword(AoB[i] .. ' + 20')) .. ' + 50'
        mr.appendToEntry(mr_inv3)

        local mr = AddressList.createMemoryRecord()
        mr.Description = "[Pointer+0054] Confused"
        mr.Type = vtDword
        mr.Address = string.format('%X',readQword(AoB[i] .. ' + 20')) .. ' + 54'
        mr.appendToEntry(mr_inv3)

        local mr = AddressList.createMemoryRecord()
        mr.Description = "[Pointer+0058] Scorched"
        mr.Type = vtDword
        mr.Address = string.format('%X',readQword(AoB[i] .. ' + 20')) .. ' + 58'
        mr.appendToEntry(mr_inv3)

        local mr = AddressList.createMemoryRecord()
        mr.Description = "[Pointer+005C] Frozen"
        mr.Type = vtDword
        mr.Address = string.format('%X',readQword(AoB[i] .. ' + 20')) .. ' + 5C'
        mr.appendToEntry(mr_inv3)

        local mr = AddressList.createMemoryRecord()
        mr.Description = "[Pointer+0060] Poisoned"
        mr.Type = vtDword
        mr.Address = string.format('%X',readQword(AoB[i] .. ' + 20')) .. ' + 60'
        mr.appendToEntry(mr_inv3)

        local mr = AddressList.createMemoryRecord()
        mr.Description = "[Pointer+0064] Wind"
        mr.Type = vtDword
        mr.Address = string.format('%X',readQword(AoB[i] .. ' + 20')) .. ' + 64'
        mr.appendToEntry(mr_inv3)

        local mr = AddressList.createMemoryRecord()
        mr.Description = "[Pointer+0068] Fire"
        mr.Type = vtDword
        mr.Address = string.format('%X',readQword(AoB[i] .. ' + 20')) .. ' + 68'
        mr.appendToEntry(mr_inv3)

        local mr = AddressList.createMemoryRecord()
        mr.Description = "[Pointer+006C] Water"
        mr.Type = vtDword
        mr.Address = string.format('%X',readQword(AoB[i] .. ' + 20')) .. ' + 6C'
        mr.appendToEntry(mr_inv3)

        local mr = AddressList.createMemoryRecord()
        mr.Description = "[Pointer+0070] Earth"
        mr.Type = vtDword
        mr.Address = string.format('%X',readQword(AoB[i] .. ' + 20')) .. ' + 70'
        mr.appendToEntry(mr_inv3)

        local mr = AddressList.createMemoryRecord()
        mr.Description = "[Pointer]+0074 GUTS"
        mr.Type = vtDword
        mr.Address = string.format('%X',readQword(AoB[i] .. ' + 20')) .. ' + 74'
        mr.appendToEntry(mr_inv3)

        local mr = AddressList.createMemoryRecord()
        mr.Description = "[Pointer]+0078 DEF"
        mr.Type = vtDword
        mr.Address = string.format('%X',readQword(AoB[i] .. ' + 20')) .. ' + 78'
        mr.appendToEntry(mr_inv3)

        local mr = AddressList.createMemoryRecord()
        mr.Description = "[Pointer]+007C INT"
        mr.Type = vtDword
        mr.Address = string.format('%X',readQword(AoB[i] .. ' + 20')) .. ' + 7C'
        mr.appendToEntry(mr_inv3)

        local mr = AddressList.createMemoryRecord()
        mr.Description = "[Pointer]+0080 ATK"
        mr.Type = vtDword
        mr.Address = string.format('%X',readQword(AoB[i] .. ' + 20')) .. ' + 80'
        mr.appendToEntry(mr_inv3)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local Cname = "Item"

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>116916</ID>
                      <Description>"Inventory"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

-- Set up local Variables
-- String to Search for
local bt = stringToByteTable(".?AVInventory@Item@TDF@@")
-- Class name. Add into [DISABLED] section as well
local Cname = "Inventory"
local ScanString = ""
local lngt = 0

-- The first half does steps outlined in https://framedsc.com/GeneralGuides/using_rtti.htm

for i, v in ipairs(bt) do
    ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('First Scan Complete: ' .. AoB[0])

-- Subtract Module Start Address 0x140000000
-- Subtract 0x10
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0x140000000
ScanString = ScanString - 0x10

-- Scan for the 4 Byte address of result
bt = dwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Second Scan Complete: ' .. AoB[0])

-- Subtract 0xC
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0xC

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Third Scan Complete: ' .. AoB[0])

--Add 0x8
ScanString = getAddress(AoB[0])
ScanString = ScanString + 0x8

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Fourth Scan Complete: ' .. AoB[0])

-- End of first half.

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

lngt = AoB.getCount() - 1
print(lngt + 1 .. ' Records Found')

for i = 0,lngt do

    local mr = AddressList.createMemoryRecord()
    mr.Description = Cname .. " " .. i
    mr.Type = vtAutoAssembler
    mr.Options = 'moHideChildren'
    mr.appendToEntry(mr_inv)

    local mr_inv2 = AddressList.getMemoryRecordByDescription(Cname .. " " .. i)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "[Inventory+0000] Base Address"
    mr.Type = vtPointer
    mr.Address = AoB[i]
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "[Inventory+0008] Item Pointer (Start of Record)"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = AoB[i] .. ' + 8'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "[Inventory+0010] Item Pointer (End of Record)"
    mr.Type = vtQword
    mr.ShowAsHex = true
    mr.Address = AoB[i] .. ' + 10'
    mr.appendToEntry(mr_inv2)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local Cname = "Inventory"

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>116917</ID>
                      <Description>"Equipment"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

-- Set up local Variables
-- String to Search for
local bt = stringToByteTable(".?AVEquipment@Item@TDF@@")
-- Class name. Add into [DISABLED] section as well
local Cname = "Equipment"
local ScanString = ""
local lngt = 0

-- The first half does steps outlined in https://framedsc.com/GeneralGuides/using_rtti.htm

for i, v in ipairs(bt) do
    ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('First Scan Complete: ' .. AoB[0])

-- Subtract Module Start Address 0x140000000
-- Subtract 0x10
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0x140000000
ScanString = ScanString - 0x10

-- Scan for the 4 Byte address of result
bt = dwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Second Scan Complete: ' .. AoB[0])

-- Subtract 0xC
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0xC

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Third Scan Complete: ' .. AoB[0])

--Add 0x8
ScanString = getAddress(AoB[0])
ScanString = ScanString + 0x8

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Fourth Scan Complete: ' .. AoB[0])

-- End of first half.

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

lngt = AoB.getCount() - 1
print(lngt + 1 .. ' Records Found')

for i = 0,lngt do

    local mr = AddressList.createMemoryRecord()
    mr.Description = Cname .. " " .. i
    mr.Type = vtAutoAssembler
    mr.Options = 'moHideChildren'
    mr.appendToEntry(mr_inv)

    local mr_inv2 = AddressList.getMemoryRecordByDescription(Cname .. " " .. i)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Base Address"
    mr.Type = vtPointer
    mr.Address = AoB[i]
    mr.appendToEntry(mr_inv2)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local Cname = "Equipment"

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>116930</ID>
                      <Description>"ItemCreationManager"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

-- Set up local Variables
-- String to Search for
local bt = stringToByteTable(".?AVItemCreationManager@Item@TDF@@")
-- Class name. Add into [DISABLED] section as well
local Cname = "ItemCreationManager"
local ScanString = ""
local lngt = 0

-- The first half does steps outlined in https://framedsc.com/GeneralGuides/using_rtti.htm

for i, v in ipairs(bt) do
    ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('First Scan Complete: ' .. AoB[0])

-- Subtract Module Start Address 0x140000000
-- Subtract 0x10
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0x140000000
ScanString = ScanString - 0x10

-- Scan for the 4 Byte address of result
bt = dwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Second Scan Complete: ' .. AoB[0])

-- Subtract 0xC
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0xC

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Third Scan Complete: ' .. AoB[0])

--Add 0x8
ScanString = getAddress(AoB[0])
ScanString = ScanString + 0x8

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Fourth Scan Complete: ' .. AoB[0])

-- End of first half.

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

lngt = AoB.getCount() - 1
print(lngt + 1 .. ' Records Found')

for i = 0,lngt do

    local mr = AddressList.createMemoryRecord()
    mr.Description = Cname .. " " .. i
    mr.Type = vtAutoAssembler
    mr.Options = 'moHideChildren'
    mr.appendToEntry(mr_inv)

    local mr_inv2 = AddressList.getMemoryRecordByDescription(Cname .. " " .. i)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Base Address"
    mr.Type = vtPointer
    mr.Address = AoB[i]
    mr.appendToEntry(mr_inv2)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local Cname = "ItemCreationManager"

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>116924</ID>
                  <Description>"Character Classes"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>116921</ID>
                      <Description>"PlayerCharacterInfoContainer"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

-- Set up local Variables
-- String to Search for
local bt = stringToByteTable(".?AVPlayerCharacterInfoContainer@Character@TDF@@")
-- Class name. Add into [DISABLED] section as well
local Cname = "PlayerCharacterInfoContainer"
local ScanString = ""
local lngt = 0

-- The first half does steps outlined in https://framedsc.com/GeneralGuides/using_rtti.htm

for i, v in ipairs(bt) do
    ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('First Scan Complete: ' .. AoB[0])

-- Subtract Module Start Address 0x140000000
-- Subtract 0x10
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0x140000000
ScanString = ScanString - 0x10

-- Scan for the 4 Byte address of result
bt = dwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Second Scan Complete: ' .. AoB[0])

-- Subtract 0xC
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0xC

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Third Scan Complete: ' .. AoB[0])

--Add 0x8
ScanString = getAddress(AoB[0])
ScanString = ScanString + 0x8

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Fourth Scan Complete: ' .. AoB[0])

-- End of first half.

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

lngt = AoB.getCount() - 1
print(lngt + 1 .. ' Records Found')

for i = 0,lngt do

    local mr = AddressList.createMemoryRecord()
    mr.Description = Cname .. " " .. i
    mr.Type = vtAutoAssembler
    mr.Options = 'moHideChildren'
    mr.appendToEntry(mr_inv)

    local mr_inv2 = AddressList.getMemoryRecordByDescription(Cname .. " " .. i)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Base Address"
    mr.Type = vtPointer
    mr.Address = AoB[i]
    mr.appendToEntry(mr_inv2)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local Cname = "PlayerCharacterInfoContainer"

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>116911</ID>
                      <Description>"PlayerCharacterInfo"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

-- Set up local Variables
-- String to Search for
local bt = stringToByteTable(".?AVPlayerCharacterInfo@Character@TDF@@")
-- Class name. Add into [DISABLED] section as well
local Cname = "PlayerCharacterInfo"
local ScanString = ""
local lngt = 0

-- The first half does steps outlined in https://framedsc.com/GeneralGuides/using_rtti.htm

for i, v in ipairs(bt) do
    ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('First Scan Complete: ' .. AoB[0])

-- Subtract Module Start Address 0x140000000
-- Subtract 0x10
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0x140000000
ScanString = ScanString - 0x10

-- Scan for the 4 Byte address of result
bt = dwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Second Scan Complete: ' .. AoB[0])

-- Subtract 0xC
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0xC

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Third Scan Complete: ' .. AoB[0])

--Add 0x8
ScanString = getAddress(AoB[0])
ScanString = ScanString + 0x8

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Fourth Scan Complete: ' .. AoB[0])

-- End of first half.

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

lngt = AoB.getCount() - 1
print(lngt + 1 .. ' Records Found')

for i = 0,lngt do

    local mr = AddressList.createMemoryRecord()
    mr.Description = Cname .. " " .. i
    mr.Type = vtAutoAssembler
    mr.Options = 'moHideChildren'
    mr.appendToEntry(mr_inv)

    local mr_inv2 = AddressList.getMemoryRecordByDescription(Cname .. " " .. i)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "[PlayerCharacterInfo+0000] Base Address"
    mr.Type = vtPointer
    mr.Address = AoB[i]
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.CreateMemoryRecord()
    mr.Description = "[PlayerCharacterInfo+0024] Level"
    mr.Type = vtDword
    mr.Address = AoB[i] .. ' + 24'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.CreateMemoryRecord()
    mr.Description = "[PlayerCharacterInfo+0028] Current HP"
    mr.Type = vtDword
    mr.Address = AoB[i] .. ' + 28'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.CreateMemoryRecord()
    mr.Description = "[PlayerCharacterInfo+003C] Max HP"
    mr.Type = vtSingle
    mr.Address = AoB[i] .. ' + 3C'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.CreateMemoryRecord()
    mr.Description = "[PlayerCharacterInfo+0040] Current ATK"
    mr.Type = vtSingle
    mr.Address = AoB[i] .. ' + 40'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.CreateMemoryRecord()
    mr.Description = "[PlayerCharacterInfo+0044] Current INT"
    mr.Type = vtSingle
    mr.Address = AoB[i] .. ' + 44'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.CreateMemoryRecord()
    mr.Description = "[PlayerCharacterInfo+0048] Current DEF"
    mr.Type = vtSingle
    mr.Address = AoB[i] .. ' + 48'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.CreateMemoryRecord()
    mr.Description = "[PlayerCharacterInfo+004C] Current GUTS"
    mr.Type = vtSingle
    mr.Address = AoB[i] .. ' + 4C'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.CreateMemoryRecord()
    mr.Description = "[PlayerCharacterInfo+0054] Current Earth"
    mr.Type = vtSingle
    mr.Address = AoB[i] .. ' + 54'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.CreateMemoryRecord()
    mr.Description = "[PlayerCharacterInfo+0058] Current Water"
    mr.Type = vtSingle
    mr.Address = AoB[i] .. ' + 58'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.CreateMemoryRecord()
    mr.Description = "[PlayerCharacterInfo+00C] Current Fire"
    mr.Type = vtSingle
    mr.Address = AoB[i] .. ' + 5C'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.CreateMemoryRecord()
    mr.Description = "[PlayerCharacterInfo+0060] Current Wind"
    mr.Type = vtSingle
    mr.Address = AoB[i] .. ' + 60'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.CreateMemoryRecord()
    mr.Description = "[PlayerCharacterInfo+0064] Current Poison"
    mr.Type = vtSingle
    mr.Address = AoB[i] .. ' + 64'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.CreateMemoryRecord()
    mr.Description = "[PlayerCharacterInfo+0068] Current Frozen"
    mr.Type = vtSingle
    mr.Address = AoB[i] .. ' + 68'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.CreateMemoryRecord()
    mr.Description = "[PlayerCharacterInfo+006C] Current Scorched"
    mr.Type = vtSingle
    mr.Address = AoB[i] .. ' + 6C'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.CreateMemoryRecord()
    mr.Description = "[PlayerCharacterInfo+0070] Current Confused"
    mr.Type = vtSingle
    mr.Address = AoB[i] .. ' + 70'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.CreateMemoryRecord()
    mr.Description = "[PlayerCharacterInfo+0074] Current Weakness"
    mr.Type = vtSingle
    mr.Address = AoB[i] .. ' + 74'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.CreateMemoryRecord()
    mr.Description = "[PlayerCharacterInfo+011C] Base HP"
    mr.Type = vtSingle
    mr.Address = AoB[i] .. ' + 11C'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.CreateMemoryRecord()
    mr.Description = "[PlayerCharacterInfo+0120] Base ATK"
    mr.Type = vtSingle
    mr.Address = AoB[i] .. ' + 120'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.CreateMemoryRecord()
    mr.Description = "[PlayerCharacterInfo+0124] Base INT"
    mr.Type = vtSingle
    mr.Address = AoB[i] .. ' + 124'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.CreateMemoryRecord()
    mr.Description = "[PlayerCharacterInfo+0128] Base DEF"
    mr.Type = vtSingle
    mr.Address = AoB[i] .. ' + 128'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.CreateMemoryRecord()
    mr.Description = "[PlayerCharacterInfo+012C] Base GUTS"
    mr.Type = vtSingle
    mr.Address = AoB[i] .. ' + 12C'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.CreateMemoryRecord()
    mr.Description = "[PlayerCharacterInfo+0134] Base Earth?"
    mr.Type = vtSingle
    mr.Address = AoB[i] .. ' + 134'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.CreateMemoryRecord()
    mr.Description = "[PlayerCharacterInfo+0138] Base Water?"
    mr.Type = vtSingle
    mr.Address = AoB[i] .. ' + 138'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.CreateMemoryRecord()
    mr.Description = "[PlayerCharacterInfo+013C] Base Fire?"
    mr.Type = vtSingle
    mr.Address = AoB[i] .. ' + 13C'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.CreateMemoryRecord()
    mr.Description = "[PlayerCharacterInfo+0140] Base Wind?"
    mr.Type = vtSingle
    mr.Address = AoB[i] .. ' + 140'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.CreateMemoryRecord()
    mr.Description = "[PlayerCharacterInfo+0144] Base Poison?"
    mr.Type = vtSingle
    mr.Address = AoB[i] .. ' + 144'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.CreateMemoryRecord()
    mr.Description = "[PlayerCharacterInfo+0148] Base Frozen?"
    mr.Type = vtSingle
    mr.Address = AoB[i] .. ' + 148'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.CreateMemoryRecord()
    mr.Description = "[PlayerCharacterInfo+014C] Base Scorched?"
    mr.Type = vtSingle
    mr.Address = AoB[i] .. ' + 14C'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.CreateMemoryRecord()
    mr.Description = "[PlayerCharacterInfo+0150] Base Confused?"
    mr.Type = vtSingle
    mr.Address = AoB[i] .. ' + 150'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.CreateMemoryRecord()
    mr.Description = "[PlayerCharacterInfo+0154] Base Weakness?"
    mr.Type = vtSingle
    mr.Address = AoB[i] .. ' + 154'
    mr.appendToEntry(mr_inv2)

    local mr = AddressList.CreateMemoryRecord()
    mr.Description = "[PlayerCharacterInfo+0200] SP"
    mr.Type = vtDword
    mr.Address = AoB[i] .. ' + 200'
    mr.appendToEntry(mr_inv2)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local Cname = "PlayerCharacterInfo"

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>116922</ID>
                      <Description>"CharacterData"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

-- Set up local Variables
-- String to Search for
local bt = stringToByteTable(".?AVCharacterData@Character@TDF@@")
-- Class name. Add into [DISABLED] section as well
local Cname = "CharacterData"
local ScanString = ""
local lngt = 0

-- The first half does steps outlined in https://framedsc.com/GeneralGuides/using_rtti.htm

for i, v in ipairs(bt) do
    ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('First Scan Complete: ' .. AoB[0])

-- Subtract Module Start Address 0x140000000
-- Subtract 0x10
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0x140000000
ScanString = ScanString - 0x10

-- Scan for the 4 Byte address of result
bt = dwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Second Scan Complete: ' .. AoB[0])

-- Subtract 0xC
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0xC

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Third Scan Complete: ' .. AoB[0])

--Add 0x8
ScanString = getAddress(AoB[0])
ScanString = ScanString + 0x8

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Fourth Scan Complete: ' .. AoB[0])

-- End of first half.

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

lngt = AoB.getCount() - 1
print(lngt + 1 .. ' Records Found')

for i = 0,lngt do

    local mr = AddressList.createMemoryRecord()
    mr.Description = Cname .. " " .. i
    mr.Type = vtAutoAssembler
    mr.Options = 'moHideChildren'
    mr.appendToEntry(mr_inv)

    local mr_inv2 = AddressList.getMemoryRecordByDescription(Cname .. " " .. i)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Base Address"
    mr.Type = vtPointer
    mr.Address = AoB[i]
    mr.appendToEntry(mr_inv2)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local Cname = "CharacterData"

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>116923</ID>
                      <Description>"TalentBase"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

-- Set up local Variables
-- String to Search for
local bt = stringToByteTable(".?AVTalentBase@Character@TDF@@")
-- Class name. Add into [DISABLED] section as well
local Cname = "TalentBase"
local ScanString = ""
local lngt = 0

-- The first half does steps outlined in https://framedsc.com/GeneralGuides/using_rtti.htm

for i, v in ipairs(bt) do
    ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('First Scan Complete: ' .. AoB[0])

-- Subtract Module Start Address 0x140000000
-- Subtract 0x10
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0x140000000
ScanString = ScanString - 0x10

-- Scan for the 4 Byte address of result
bt = dwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Second Scan Complete: ' .. AoB[0])

-- Subtract 0xC
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0xC

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Third Scan Complete: ' .. AoB[0])

--Add 0x8
ScanString = getAddress(AoB[0])
ScanString = ScanString + 0x8

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Fourth Scan Complete: ' .. AoB[0])

-- End of first half.

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

lngt = AoB.getCount() - 1
print(lngt + 1 .. ' Records Found')

for i = 0,lngt do

    local mr = AddressList.createMemoryRecord()
    mr.Description = Cname .. " " .. i
    mr.Type = vtAutoAssembler
    mr.Options = 'moHideChildren'
    mr.appendToEntry(mr_inv)

    local mr_inv2 = AddressList.getMemoryRecordByDescription(Cname .. " " .. i)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Base Address"
    mr.Type = vtPointer
    mr.Address = AoB[i]
    mr.appendToEntry(mr_inv2)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local Cname = "TalentBase"

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>116929</ID>
                      <Description>"WeaponContainer"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

-- Set up local Variables
-- String to Search for
local bt = stringToByteTable(".?AVWeaponContainer@Character@TDF@@")
-- Class name. Add into [DISABLED] section as well
local Cname = "WeaponContainer"
local ScanString = ""
local lngt = 0

-- The first half does steps outlined in https://framedsc.com/GeneralGuides/using_rtti.htm

for i, v in ipairs(bt) do
    ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('First Scan Complete: ' .. AoB[0])

-- Subtract Module Start Address 0x140000000
-- Subtract 0x10
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0x140000000
ScanString = ScanString - 0x10

-- Scan for the 4 Byte address of result
bt = dwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Second Scan Complete: ' .. AoB[0])

-- Subtract 0xC
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0xC

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Third Scan Complete: ' .. AoB[0])

--Add 0x8
ScanString = getAddress(AoB[0])
ScanString = ScanString + 0x8

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Fourth Scan Complete: ' .. AoB[0])

-- End of first half.

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

lngt = AoB.getCount() - 1
print(lngt + 1 .. ' Records Found')

for i = 0,lngt do

    local mr = AddressList.createMemoryRecord()
    mr.Description = Cname .. " " .. i
    mr.Type = vtAutoAssembler
    mr.Options = 'moHideChildren'
    mr.appendToEntry(mr_inv)

    local mr_inv2 = AddressList.getMemoryRecordByDescription(Cname .. " " .. i)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Base Address"
    mr.Type = vtPointer
    mr.Address = AoB[i]
    mr.appendToEntry(mr_inv2)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local Cname = "WeaponContainer"

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>116925</ID>
                  <Description>"Param Classes"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>116920</ID>
                      <Description>"DropTable"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

-- Set up local Variables
-- String to Search for
local bt = stringToByteTable(".?AVDropTable@Item@TDF@@")
-- Class name. Add into [DISABLED] section as well
local Cname = "DropTable"
local ScanString = ""
local lngt = 0

-- The first half does steps outlined in https://framedsc.com/GeneralGuides/using_rtti.htm

for i, v in ipairs(bt) do
    ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('First Scan Complete: ' .. AoB[0])

-- Subtract Module Start Address 0x140000000
-- Subtract 0x10
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0x140000000
ScanString = ScanString - 0x10

-- Scan for the 4 Byte address of result
bt = dwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Second Scan Complete: ' .. AoB[0])

-- Subtract 0xC
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0xC

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Third Scan Complete: ' .. AoB[0])

--Add 0x8
ScanString = getAddress(AoB[0])
ScanString = ScanString + 0x8

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Fourth Scan Complete: ' .. AoB[0])

-- End of first half.

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

lngt = AoB.getCount() - 1
print(lngt + 1 .. ' Records Found')

for i = 0,lngt do

    local mr = AddressList.createMemoryRecord()
    mr.Description = Cname .. " " .. i
    mr.Type = vtAutoAssembler
    mr.Options = 'moHideChildren'
    mr.appendToEntry(mr_inv)

    local mr_inv2 = AddressList.getMemoryRecordByDescription(Cname .. " " .. i)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Base Address"
    mr.Type = vtPointer
    mr.Address = AoB[i]
    mr.appendToEntry(mr_inv2)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local Cname = "DropTable"

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>116934</ID>
                      <Description>"DifficultyAccessor"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

-- Set up local Variables
-- String to Search for
local bt = stringToByteTable(".?AVDifficultyAccessor@Param@TDF@@")
-- Class name. Add into [DISABLED] section as well
local Cname = "DifficultyAccessor"
local ScanString = ""
local lngt = 0

-- The first half does steps outlined in https://framedsc.com/GeneralGuides/using_rtti.htm

for i, v in ipairs(bt) do
    ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('First Scan Complete: ' .. AoB[0])

-- Subtract Module Start Address 0x140000000
-- Subtract 0x10
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0x140000000
ScanString = ScanString - 0x10

-- Scan for the 4 Byte address of result
bt = dwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Second Scan Complete: ' .. AoB[0])

-- Subtract 0xC
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0xC

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Third Scan Complete: ' .. AoB[0])

--Add 0x8
ScanString = getAddress(AoB[0])
ScanString = ScanString + 0x8

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Fourth Scan Complete: ' .. AoB[0])

-- End of first half.

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

lngt = AoB.getCount() - 1
print(lngt + 1 .. ' Records Found')

for i = 0,lngt do

    local mr = AddressList.createMemoryRecord()
    mr.Description = Cname .. " " .. i
    mr.Type = vtAutoAssembler
    mr.Options = 'moHideChildren'
    mr.appendToEntry(mr_inv)

    local mr_inv2 = AddressList.getMemoryRecordByDescription(Cname .. " " .. i)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Base Address"
    mr.Type = vtPointer
    mr.Address = AoB[i]
    mr.appendToEntry(mr_inv2)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local Cname = "DifficultyAccessor"

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>116939</ID>
                      <Description>"MapAccessor"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

-- Set up local Variables
-- String to Search for
local bt = stringToByteTable(".?AVMapAccessor@Param@TDF@@")
-- Class name. Add into [DISABLED] section as well
local Cname = "MapAccessor"
local ScanString = ""
local lngt = 0

-- The first half does steps outlined in https://framedsc.com/GeneralGuides/using_rtti.htm

for i, v in ipairs(bt) do
    ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('First Scan Complete: ' .. AoB[0])

-- Subtract Module Start Address 0x140000000
-- Subtract 0x10
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0x140000000
ScanString = ScanString - 0x10

-- Scan for the 4 Byte address of result
bt = dwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Second Scan Complete: ' .. AoB[0])

-- Subtract 0xC
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0xC

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Third Scan Complete: ' .. AoB[0])

--Add 0x8
ScanString = getAddress(AoB[0])
ScanString = ScanString + 0x8

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Fourth Scan Complete: ' .. AoB[0])

-- End of first half.

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

lngt = AoB.getCount() - 1
print(lngt + 1 .. ' Records Found')

for i = 0,lngt do

    local mr = AddressList.createMemoryRecord()
    mr.Description = Cname .. " " .. i
    mr.Type = vtAutoAssembler
    mr.Options = 'moHideChildren'
    mr.appendToEntry(mr_inv)

    local mr_inv2 = AddressList.getMemoryRecordByDescription(Cname .. " " .. i)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Base Address"
    mr.Type = vtPointer
    mr.Address = AoB[i]
    mr.appendToEntry(mr_inv2)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local Cname = "MapAccessor"

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>116956</ID>
                      <Description>"ItemAccessor"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

-- Set up local Variables
-- String to Search for
local bt = stringToByteTable(".?AVItemAccessor@Param@TDF@@")
-- Class name. Add into [DISABLED] section as well
local Cname = "ItemAccessor"
local ScanString = ""
local lngt = 0

-- The first half does steps outlined in https://framedsc.com/GeneralGuides/using_rtti.htm

for i, v in ipairs(bt) do
    ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('First Scan Complete: ' .. AoB[0])

-- Subtract Module Start Address 0x140000000
-- Subtract 0x10
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0x140000000
ScanString = ScanString - 0x10

-- Scan for the 4 Byte address of result
bt = dwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Second Scan Complete: ' .. AoB[0])

-- Subtract 0xC
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0xC

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Third Scan Complete: ' .. AoB[0])

--Add 0x8
ScanString = getAddress(AoB[0])
ScanString = ScanString + 0x8

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Fourth Scan Complete: ' .. AoB[0])

-- End of first half.

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

lngt = AoB.getCount() - 1
print(lngt + 1 .. ' Records Found')

for i = 0,lngt do

    local mr = AddressList.createMemoryRecord()
    mr.Description = Cname .. " " .. i
    mr.Type = vtAutoAssembler
    mr.Options = 'moHideChildren'
    mr.appendToEntry(mr_inv)

    local mr_inv2 = AddressList.getMemoryRecordByDescription(Cname .. " " .. i)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Base Address"
    mr.Type = vtPointer
    mr.Address = AoB[i]
    mr.appendToEntry(mr_inv2)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local Cname = "ItemAccessor"

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>116961</ID>
                      <Description>"ShopquestAccessor"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

-- Set up local Variables
-- String to Search for
local bt = stringToByteTable(".?AVShopquestAccessor@Param@TDF@@")
-- Class name. Add into [DISABLED] section as well
local Cname = "ShopquestAccessor"
local ScanString = ""
local lngt = 0

-- The first half does steps outlined in https://framedsc.com/GeneralGuides/using_rtti.htm

for i, v in ipairs(bt) do
    ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('First Scan Complete: ' .. AoB[0])

-- Subtract Module Start Address 0x140000000
-- Subtract 0x10
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0x140000000
ScanString = ScanString - 0x10

-- Scan for the 4 Byte address of result
bt = dwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Second Scan Complete: ' .. AoB[0])

-- Subtract 0xC
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0xC

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Third Scan Complete: ' .. AoB[0])

--Add 0x8
ScanString = getAddress(AoB[0])
ScanString = ScanString + 0x8

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Fourth Scan Complete: ' .. AoB[0])

-- End of first half.

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

lngt = AoB.getCount() - 1
print(lngt + 1 .. ' Records Found')

for i = 0,lngt do

    local mr = AddressList.createMemoryRecord()
    mr.Description = Cname .. " " .. i
    mr.Type = vtAutoAssembler
    mr.Options = 'moHideChildren'
    mr.appendToEntry(mr_inv)

    local mr_inv2 = AddressList.getMemoryRecordByDescription(Cname .. " " .. i)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "[Template+0000] Base Address"
    mr.Type = vtPointer
    mr.Address = AoB[i]
    mr.appendToEntry(mr_inv2)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local Cname = "ShopquestAccessor"

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>116962</ID>
                      <Description>"ShopdataAccessor"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

-- Set up local Variables
-- String to Search for
local bt = stringToByteTable(".?AVShopdataAccessor@Param@TDF@@")
-- Class name. Add into [DISABLED] section as well
local Cname = "ShopdataAccessor"
local ScanString = ""
local lngt = 0

-- The first half does steps outlined in https://framedsc.com/GeneralGuides/using_rtti.htm

for i, v in ipairs(bt) do
    ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('First Scan Complete: ' .. AoB[0])

-- Subtract Module Start Address 0x140000000
-- Subtract 0x10
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0x140000000
ScanString = ScanString - 0x10

-- Scan for the 4 Byte address of result
bt = dwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Second Scan Complete: ' .. AoB[0])

-- Subtract 0xC
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0xC

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Third Scan Complete: ' .. AoB[0])

--Add 0x8
ScanString = getAddress(AoB[0])
ScanString = ScanString + 0x8

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Fourth Scan Complete: ' .. AoB[0])

-- End of first half.

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

lngt = AoB.getCount() - 1
print(lngt + 1 .. ' Records Found')

for i = 0,lngt do

    local mr = AddressList.createMemoryRecord()
    mr.Description = Cname .. " " .. i
    mr.Type = vtAutoAssembler
    mr.Options = 'moHideChildren'
    mr.appendToEntry(mr_inv)

    local mr_inv2 = AddressList.getMemoryRecordByDescription(Cname .. " " .. i)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "[Template+0000] Base Address"
    mr.Type = vtPointer
    mr.Address = AoB[i]
    mr.appendToEntry(mr_inv2)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local Cname = "ShopdataAccessor"

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>116910</ID>
                      <Description>"ShopquestitemAccessor"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

-- Set up local Variables
-- String to Search for
local bt = stringToByteTable(".?AVShopquestitemAccessor@Param@TDF@@")
-- Class name. Add into [DISABLED] section as well
local Cname = "ShopquestitemAccessor"
local ScanString = ""
local lngt = 0

-- The first half does steps outlined in https://framedsc.com/GeneralGuides/using_rtti.htm

for i, v in ipairs(bt) do
    ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('First Scan Complete: ' .. AoB[0])

-- Subtract Module Start Address 0x140000000
-- Subtract 0x10
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0x140000000
ScanString = ScanString - 0x10

-- Scan for the 4 Byte address of result
bt = dwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Second Scan Complete: ' .. AoB[0])

-- Subtract 0xC
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0xC

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Third Scan Complete: ' .. AoB[0])

--Add 0x8
ScanString = getAddress(AoB[0])
ScanString = ScanString + 0x8

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Fourth Scan Complete: ' .. AoB[0])

-- End of first half.

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

lngt = AoB.getCount() - 1
print(lngt + 1 .. ' Records Found')

for i = 0,lngt do

    local mr = AddressList.createMemoryRecord()
    mr.Description = Cname .. " " .. i
    mr.Type = vtAutoAssembler
    mr.Options = 'moHideChildren'
    mr.appendToEntry(mr_inv)

    local mr_inv2 = AddressList.getMemoryRecordByDescription(Cname .. " " .. i)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "[Template+0000] Base Address"
    mr.Type = vtPointer
    mr.Address = AoB[i]
    mr.appendToEntry(mr_inv2)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local Cname = "ShopquestitemAccessor"

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>116926</ID>
                  <Description>"Factor Classes"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>116919</ID>
                      <Description>"FactorManager"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

-- Set up local Variables
-- String to Search for
local bt = stringToByteTable(".?AVFactorManager@Factor@TDF@@")
-- Class name. Add into [DISABLED] section as well
local Cname = "FactorManager"
local ScanString = ""
local lngt = 0

-- The first half does steps outlined in https://framedsc.com/GeneralGuides/using_rtti.htm

for i, v in ipairs(bt) do
    ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('First Scan Complete: ' .. AoB[0])

-- Subtract Module Start Address 0x140000000
-- Subtract 0x10
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0x140000000
ScanString = ScanString - 0x10

-- Scan for the 4 Byte address of result
bt = dwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Second Scan Complete: ' .. AoB[0])

-- Subtract 0xC
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0xC

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Third Scan Complete: ' .. AoB[0])

--Add 0x8
ScanString = getAddress(AoB[0])
ScanString = ScanString + 0x8

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Fourth Scan Complete: ' .. AoB[0])

-- End of first half.

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

lngt = AoB.getCount() - 1
print(lngt + 1 .. ' Records Found')

for i = 0,lngt do

    local mr = AddressList.createMemoryRecord()
    mr.Description = Cname .. " " .. i
    mr.Type = vtAutoAssembler
    mr.Options = 'moHideChildren'
    mr.appendToEntry(mr_inv)

    local mr_inv2 = AddressList.getMemoryRecordByDescription(Cname .. " " .. i)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Base Address"
    mr.Type = vtPointer
    mr.Address = AoB[i]
    mr.appendToEntry(mr_inv2)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local Cname = "FactorManager"

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>116932</ID>
                      <Description>"FactorCondition"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

-- Set up local Variables
-- String to Search for
local bt = stringToByteTable(".?AVFactorCondition@Factor@TDF@@")
-- Class name. Add into [DISABLED] section as well
local Cname = "FactorCondition"
local ScanString = ""
local lngt = 0

-- The first half does steps outlined in https://framedsc.com/GeneralGuides/using_rtti.htm

for i, v in ipairs(bt) do
    ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('First Scan Complete: ' .. AoB[0])

-- Subtract Module Start Address 0x140000000
-- Subtract 0x10
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0x140000000
ScanString = ScanString - 0x10

-- Scan for the 4 Byte address of result
bt = dwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Second Scan Complete: ' .. AoB[0])

-- Subtract 0xC
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0xC

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Third Scan Complete: ' .. AoB[0])

--Add 0x8
ScanString = getAddress(AoB[0])
ScanString = ScanString + 0x8

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Fourth Scan Complete: ' .. AoB[0])

-- End of first half.

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

lngt = AoB.getCount() - 1
print(lngt + 1 .. ' Records Found')

for i = 0,lngt do

    local mr = AddressList.createMemoryRecord()
    mr.Description = Cname .. " " .. i
    mr.Type = vtAutoAssembler
    mr.Options = 'moHideChildren'
    mr.appendToEntry(mr_inv)

    local mr_inv2 = AddressList.getMemoryRecordByDescription(Cname .. " " .. i)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Base Address"
    mr.Type = vtPointer
    mr.Address = AoB[i]
    mr.appendToEntry(mr_inv2)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local Cname = "FactorCondition"

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>116933</ID>
                      <Description>"FactorElement"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

-- Set up local Variables
-- String to Search for
local bt = stringToByteTable(".?AVFactorElement@Factor@TDF@@")
-- Class name. Add into [DISABLED] section as well
local Cname = "FactorElement"
local ScanString = ""
local lngt = 0

-- The first half does steps outlined in https://framedsc.com/GeneralGuides/using_rtti.htm

for i, v in ipairs(bt) do
    ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('First Scan Complete: ' .. AoB[0])

-- Subtract Module Start Address 0x140000000
-- Subtract 0x10
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0x140000000
ScanString = ScanString - 0x10

-- Scan for the 4 Byte address of result
bt = dwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Second Scan Complete: ' .. AoB[0])

-- Subtract 0xC
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0xC

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Third Scan Complete: ' .. AoB[0])

--Add 0x8
ScanString = getAddress(AoB[0])
ScanString = ScanString + 0x8

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Fourth Scan Complete: ' .. AoB[0])

-- End of first half.

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

lngt = AoB.getCount() - 1
print(lngt + 1 .. ' Records Found')

for i = 0,lngt do

    local mr = AddressList.createMemoryRecord()
    mr.Description = Cname .. " " .. i
    mr.Type = vtAutoAssembler
    mr.Options = 'moHideChildren'
    mr.appendToEntry(mr_inv)

    local mr_inv2 = AddressList.getMemoryRecordByDescription(Cname .. " " .. i)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Base Address"
    mr.Type = vtPointer
    mr.Address = AoB[i]
    mr.appendToEntry(mr_inv2)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local Cname = "FactorElement"

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>116927</ID>
                  <Description>"Global Classes"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>116918</ID>
                      <Description>"PartyMemberManager"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

-- Set up local Variables
-- String to Search for
local bt = stringToByteTable(".?AVPartyMemberManager@Global@TDF@@")
-- Class name. Add into [DISABLED] section as well
local Cname = "PartyMemberManager"
local ScanString = ""
local lngt = 0

-- The first half does steps outlined in https://framedsc.com/GeneralGuides/using_rtti.htm

for i, v in ipairs(bt) do
    ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('First Scan Complete: ' .. AoB[0])

-- Subtract Module Start Address 0x140000000
-- Subtract 0x10
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0x140000000
ScanString = ScanString - 0x10

-- Scan for the 4 Byte address of result
bt = dwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Second Scan Complete: ' .. AoB[0])

-- Subtract 0xC
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0xC

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Third Scan Complete: ' .. AoB[0])

--Add 0x8
ScanString = getAddress(AoB[0])
ScanString = ScanString + 0x8

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Fourth Scan Complete: ' .. AoB[0])

-- End of first half.

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

lngt = AoB.getCount() - 1
print(lngt + 1 .. ' Records Found')

for i = 0,lngt do

    local mr = AddressList.createMemoryRecord()
    mr.Description = Cname .. " " .. i
    mr.Type = vtAutoAssembler
    mr.Options = 'moHideChildren'
    mr.appendToEntry(mr_inv)

    local mr_inv2 = AddressList.getMemoryRecordByDescription(Cname .. " " .. i)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Base Address"
    mr.Type = vtPointer
    mr.Address = AoB[i]
    mr.appendToEntry(mr_inv2)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local Cname = "PartyMemberManager"

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>116931</ID>
                      <Description>"PartyMember"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

-- Set up local Variables
-- String to Search for
local bt = stringToByteTable(".?AVPartyMember@Global@TDF@@")
-- Class name. Add into [DISABLED] section as well
local Cname = "PartyMember"
local ScanString = ""
local lngt = 0

-- The first half does steps outlined in https://framedsc.com/GeneralGuides/using_rtti.htm

for i, v in ipairs(bt) do
    ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('First Scan Complete: ' .. AoB[0])

-- Subtract Module Start Address 0x140000000
-- Subtract 0x10
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0x140000000
ScanString = ScanString - 0x10

-- Scan for the 4 Byte address of result
bt = dwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Second Scan Complete: ' .. AoB[0])

-- Subtract 0xC
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0xC

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Third Scan Complete: ' .. AoB[0])

--Add 0x8
ScanString = getAddress(AoB[0])
ScanString = ScanString + 0x8

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Fourth Scan Complete: ' .. AoB[0])

-- End of first half.

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

lngt = AoB.getCount() - 1
print(lngt + 1 .. ' Records Found')

for i = 0,lngt do

    local mr = AddressList.createMemoryRecord()
    mr.Description = Cname .. " " .. i
    mr.Type = vtAutoAssembler
    mr.Options = 'moHideChildren'
    mr.appendToEntry(mr_inv)

    local mr_inv2 = AddressList.getMemoryRecordByDescription(Cname .. " " .. i)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "Base Address"
    mr.Type = vtPointer
    mr.Address = AoB[i]
    mr.appendToEntry(mr_inv2)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local Cname = "PartyMember"

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>116957</ID>
                  <Description>"Event Classes"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>116958</ID>
                      <Description>"SimpleShopEvent"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

-- Set up local Variables
-- String to Search for
local bt = stringToByteTable(".?AVSimpleShopEvent@Event@TDF@@")
-- Class name. Add into [DISABLED] section as well
local Cname = "SimpleShopEvent"
local ScanString = ""
local lngt = 0

-- The first half does steps outlined in https://framedsc.com/GeneralGuides/using_rtti.htm

for i, v in ipairs(bt) do
    ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('First Scan Complete: ' .. AoB[0])

-- Subtract Module Start Address 0x140000000
-- Subtract 0x10
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0x140000000
ScanString = ScanString - 0x10

-- Scan for the 4 Byte address of result
bt = dwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Second Scan Complete: ' .. AoB[0])

-- Subtract 0xC
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0xC

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Third Scan Complete: ' .. AoB[0])

--Add 0x8
ScanString = getAddress(AoB[0])
ScanString = ScanString + 0x8

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Fourth Scan Complete: ' .. AoB[0])

-- End of first half.

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

lngt = AoB.getCount() - 1
print(lngt + 1 .. ' Records Found')

for i = 0,lngt do

    local mr = AddressList.createMemoryRecord()
    mr.Description = Cname .. " " .. i
    mr.Type = vtAutoAssembler
    mr.Options = 'moHideChildren'
    mr.appendToEntry(mr_inv)

    local mr_inv2 = AddressList.getMemoryRecordByDescription(Cname .. " " .. i)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "[Template+0000] Base Address"
    mr.Type = vtPointer
    mr.Address = AoB[i]
    mr.appendToEntry(mr_inv2)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local Cname = "SimpleShopEvent"

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>116960</ID>
                  <Description>"Shop Classes"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>116959</ID>
                      <Description>"ShopManager"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

-- Set up local Variables
-- String to Search for
local bt = stringToByteTable(".?AVShopManager@Shop@TDF@@")
-- Class name. Add into [DISABLED] section as well
local Cname = "ShopManager"
local ScanString = ""
local lngt = 0

-- The first half does steps outlined in https://framedsc.com/GeneralGuides/using_rtti.htm

for i, v in ipairs(bt) do
    ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('First Scan Complete: ' .. AoB[0])

-- Subtract Module Start Address 0x140000000
-- Subtract 0x10
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0x140000000
ScanString = ScanString - 0x10

-- Scan for the 4 Byte address of result
bt = dwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Second Scan Complete: ' .. AoB[0])

-- Subtract 0xC
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0xC

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Third Scan Complete: ' .. AoB[0])

--Add 0x8
ScanString = getAddress(AoB[0])
ScanString = ScanString + 0x8

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Fourth Scan Complete: ' .. AoB[0])

-- End of first half.

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

lngt = AoB.getCount() - 1
print(lngt + 1 .. ' Records Found')

for i = 0,lngt do

    local mr = AddressList.createMemoryRecord()
    mr.Description = Cname .. " " .. i
    mr.Type = vtAutoAssembler
    mr.Options = 'moHideChildren'
    mr.appendToEntry(mr_inv)

    local mr_inv2 = AddressList.getMemoryRecordByDescription(Cname .. " " .. i)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "[Template+0000] Base Address"
    mr.Type = vtPointer
    mr.Address = AoB[i]
    mr.appendToEntry(mr_inv2)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local Cname = "ShopManager"

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>116964</ID>
                  <Description>"UI Classes"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>116965</ID>
                      <Description>"ShopMenuBase"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

-- Set up local Variables
-- String to Search for
local bt = stringToByteTable(".?AVShopMenuBase@UI@TDF@@")
-- Class name. Add into [DISABLED] section as well
local Cname = "ShopMenuBase"
local ScanString = ""
local lngt = 0

-- The first half does steps outlined in https://framedsc.com/GeneralGuides/using_rtti.htm

for i, v in ipairs(bt) do
    ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('First Scan Complete: ' .. AoB[0])

-- Subtract Module Start Address 0x140000000
-- Subtract 0x10
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0x140000000
ScanString = ScanString - 0x10

-- Scan for the 4 Byte address of result
bt = dwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Second Scan Complete: ' .. AoB[0])

-- Subtract 0xC
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0xC

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Third Scan Complete: ' .. AoB[0])

--Add 0x8
ScanString = getAddress(AoB[0])
ScanString = ScanString + 0x8

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Fourth Scan Complete: ' .. AoB[0])

-- End of first half.

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

lngt = AoB.getCount() - 1
print(lngt + 1 .. ' Records Found')

for i = 0,lngt do

    local mr = AddressList.createMemoryRecord()
    mr.Description = Cname .. " " .. i
    mr.Type = vtAutoAssembler
    mr.Options = 'moHideChildren'
    mr.appendToEntry(mr_inv)

    local mr_inv2 = AddressList.getMemoryRecordByDescription(Cname .. " " .. i)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "[Template+0000] Base Address"
    mr.Type = vtPointer
    mr.Address = AoB[i]
    mr.appendToEntry(mr_inv2)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local Cname = "ShopMenuBase"

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>116966</ID>
                      <Description>"ShopMenuBuy"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

-- Set up local Variables
-- String to Search for
local bt = stringToByteTable(".?AVShopMenuBuy@UI@TDF@@")
-- Class name. Add into [DISABLED] section as well
local Cname = "ShopMenuBuy"
local ScanString = ""
local lngt = 0

-- The first half does steps outlined in https://framedsc.com/GeneralGuides/using_rtti.htm

for i, v in ipairs(bt) do
    ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('First Scan Complete: ' .. AoB[0])

-- Subtract Module Start Address 0x140000000
-- Subtract 0x10
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0x140000000
ScanString = ScanString - 0x10

-- Scan for the 4 Byte address of result
bt = dwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Second Scan Complete: ' .. AoB[0])

-- Subtract 0xC
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0xC

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Third Scan Complete: ' .. AoB[0])

--Add 0x8
ScanString = getAddress(AoB[0])
ScanString = ScanString + 0x8

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Fourth Scan Complete: ' .. AoB[0])

-- End of first half.

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

lngt = AoB.getCount() - 1
print(lngt + 1 .. ' Records Found')

for i = 0,lngt do

    local mr = AddressList.createMemoryRecord()
    mr.Description = Cname .. " " .. i
    mr.Type = vtAutoAssembler
    mr.Options = 'moHideChildren'
    mr.appendToEntry(mr_inv)

    local mr_inv2 = AddressList.getMemoryRecordByDescription(Cname .. " " .. i)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "[Template+0000] Base Address"
    mr.Type = vtPointer
    mr.Address = AoB[i]
    mr.appendToEntry(mr_inv2)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local Cname = "ShopMenuBuy"

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>116967</ID>
                      <Description>"ShopMenuManager"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

-- Set up local Variables
-- String to Search for
local bt = stringToByteTable(".?AVShopMenuManager@UI@TDF@@")
-- Class name. Add into [DISABLED] section as well
local Cname = "ShopMenuManager"
local ScanString = ""
local lngt = 0

-- The first half does steps outlined in https://framedsc.com/GeneralGuides/using_rtti.htm

for i, v in ipairs(bt) do
    ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('First Scan Complete: ' .. AoB[0])

-- Subtract Module Start Address 0x140000000
-- Subtract 0x10
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0x140000000
ScanString = ScanString - 0x10

-- Scan for the 4 Byte address of result
bt = dwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Second Scan Complete: ' .. AoB[0])

-- Subtract 0xC
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0xC

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Third Scan Complete: ' .. AoB[0])

--Add 0x8
ScanString = getAddress(AoB[0])
ScanString = ScanString + 0x8

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Fourth Scan Complete: ' .. AoB[0])

-- End of first half.

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

lngt = AoB.getCount() - 1
print(lngt + 1 .. ' Records Found')

for i = 0,lngt do

    local mr = AddressList.createMemoryRecord()
    mr.Description = Cname .. " " .. i
    mr.Type = vtAutoAssembler
    mr.Options = 'moHideChildren'
    mr.appendToEntry(mr_inv)

    local mr_inv2 = AddressList.getMemoryRecordByDescription(Cname .. " " .. i)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "[Template+0000] Base Address"
    mr.Type = vtPointer
    mr.Address = AoB[i]
    mr.appendToEntry(mr_inv2)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local Cname = "ShopMenuManager"

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>116968</ID>
                      <Description>"ShopMenuQuest"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

-- Set up local Variables
-- String to Search for
local bt = stringToByteTable(".?AVShopMenuQuest@UI@TDF@@")
-- Class name. Add into [DISABLED] section as well
local Cname = "ShopMenuQuest"
local ScanString = ""
local lngt = 0

-- The first half does steps outlined in https://framedsc.com/GeneralGuides/using_rtti.htm

for i, v in ipairs(bt) do
    ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('First Scan Complete: ' .. AoB[0])

-- Subtract Module Start Address 0x140000000
-- Subtract 0x10
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0x140000000
ScanString = ScanString - 0x10

-- Scan for the 4 Byte address of result
bt = dwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Second Scan Complete: ' .. AoB[0])

-- Subtract 0xC
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0xC

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Third Scan Complete: ' .. AoB[0])

--Add 0x8
ScanString = getAddress(AoB[0])
ScanString = ScanString + 0x8

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Fourth Scan Complete: ' .. AoB[0])

-- End of first half.

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

lngt = AoB.getCount() - 1
print(lngt + 1 .. ' Records Found')

for i = 0,lngt do

    local mr = AddressList.createMemoryRecord()
    mr.Description = Cname .. " " .. i
    mr.Type = vtAutoAssembler
    mr.Options = 'moHideChildren'
    mr.appendToEntry(mr_inv)

    local mr_inv2 = AddressList.getMemoryRecordByDescription(Cname .. " " .. i)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "[Template+0000] Base Address"
    mr.Type = vtPointer
    mr.Address = AoB[i]
    mr.appendToEntry(mr_inv2)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local Cname = "ShopMenuQuest"

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>116969</ID>
                      <Description>"ShopMenuSell"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

-- Set up local Variables
-- String to Search for
local bt = stringToByteTable(".?AVShopMenuSell@UI@TDF@@")
-- Class name. Add into [DISABLED] section as well
local Cname = "ShopMenuSell"
local ScanString = ""
local lngt = 0

-- The first half does steps outlined in https://framedsc.com/GeneralGuides/using_rtti.htm

for i, v in ipairs(bt) do
    ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('First Scan Complete: ' .. AoB[0])

-- Subtract Module Start Address 0x140000000
-- Subtract 0x10
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0x140000000
ScanString = ScanString - 0x10

-- Scan for the 4 Byte address of result
bt = dwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Second Scan Complete: ' .. AoB[0])

-- Subtract 0xC
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0xC

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Third Scan Complete: ' .. AoB[0])

--Add 0x8
ScanString = getAddress(AoB[0])
ScanString = ScanString + 0x8

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Fourth Scan Complete: ' .. AoB[0])

-- End of first half.

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

lngt = AoB.getCount() - 1
print(lngt + 1 .. ' Records Found')

for i = 0,lngt do

    local mr = AddressList.createMemoryRecord()
    mr.Description = Cname .. " " .. i
    mr.Type = vtAutoAssembler
    mr.Options = 'moHideChildren'
    mr.appendToEntry(mr_inv)

    local mr_inv2 = AddressList.getMemoryRecordByDescription(Cname .. " " .. i)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "[Template+0000] Base Address"
    mr.Type = vtPointer
    mr.Address = AoB[i]
    mr.appendToEntry(mr_inv2)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local Cname = "ShopMenuSell"

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>116970</ID>
                  <Description>"Game Classes"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>116971</ID>
                      <Description>"Game"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

-- Set up local Variables
-- String to Search for
local bt = stringToByteTable(".?AVGame@TDF@@")
-- Class name. Add into [DISABLED] section as well
local Cname = "Game"
local ScanString = ""
local lngt = 0

-- The first half does steps outlined in https://framedsc.com/GeneralGuides/using_rtti.htm

for i, v in ipairs(bt) do
    ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('First Scan Complete: ' .. AoB[0])

-- Subtract Module Start Address 0x140000000
-- Subtract 0x10
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0x140000000
ScanString = ScanString - 0x10

-- Scan for the 4 Byte address of result
bt = dwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Second Scan Complete: ' .. AoB[0])

-- Subtract 0xC
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0xC

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Third Scan Complete: ' .. AoB[0])

--Add 0x8
ScanString = getAddress(AoB[0])
ScanString = ScanString + 0x8

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Fourth Scan Complete: ' .. AoB[0])

-- End of first half.

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

lngt = AoB.getCount() - 1
print(lngt + 1 .. ' Records Found')

for i = 0,lngt do

    local mr = AddressList.createMemoryRecord()
    mr.Description = Cname .. " " .. i
    mr.Type = vtAutoAssembler
    mr.Options = 'moHideChildren'
    mr.appendToEntry(mr_inv)

    local mr_inv2 = AddressList.getMemoryRecordByDescription(Cname .. " " .. i)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "[Template+0000] Base Address"
    mr.Type = vtPointer
    mr.Address = AoB[i]
    mr.appendToEntry(mr_inv2)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local Cname = "Game"

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>116973</ID>
                  <Description>"Actor Classes"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>116972</ID>
                      <Description>"Actor"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

-- Set up local Variables
-- String to Search for
local bt = stringToByteTable(".?AVActor@0TDF@@")
-- Class name. Add into [DISABLED] section as well
local Cname = "Actor"
local ScanString = ""
local lngt = 0

-- The first half does steps outlined in https://framedsc.com/GeneralGuides/using_rtti.htm

for i, v in ipairs(bt) do
    ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('First Scan Complete: ' .. AoB[0])

-- Subtract Module Start Address 0x140000000
-- Subtract 0x10
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0x140000000
ScanString = ScanString - 0x10

-- Scan for the 4 Byte address of result
bt = dwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Second Scan Complete: ' .. AoB[0])

-- Subtract 0xC
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0xC

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Third Scan Complete: ' .. AoB[0])

--Add 0x8
ScanString = getAddress(AoB[0])
ScanString = ScanString + 0x8

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Fourth Scan Complete: ' .. AoB[0])

-- End of first half.

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

lngt = AoB.getCount() - 1
print(lngt + 1 .. ' Records Found')

for i = 0,lngt do

    local mr = AddressList.createMemoryRecord()
    mr.Description = Cname .. " " .. i
    mr.Type = vtAutoAssembler
    mr.Options = 'moHideChildren'
    mr.appendToEntry(mr_inv)

    local mr_inv2 = AddressList.getMemoryRecordByDescription(Cname .. " " .. i)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "[Template+0000] Base Address"
    mr.Type = vtPointer
    mr.Address = AoB[i]
    mr.appendToEntry(mr_inv2)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local Cname = "Actor"

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>116974</ID>
                  <Description>"Bullet Classes"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>116975</ID>
                      <Description>"Bullet"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

-- Set up local Variables
-- String to Search for
local bt = stringToByteTable(".?AVBullet@0TDF@@")
-- Class name. Add into [DISABLED] section as well
local Cname = "Bullet"
local ScanString = ""
local lngt = 0

-- The first half does steps outlined in https://framedsc.com/GeneralGuides/using_rtti.htm

for i, v in ipairs(bt) do
    ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('First Scan Complete: ' .. AoB[0])

-- Subtract Module Start Address 0x140000000
-- Subtract 0x10
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0x140000000
ScanString = ScanString - 0x10

-- Scan for the 4 Byte address of result
bt = dwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Second Scan Complete: ' .. AoB[0])

-- Subtract 0xC
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0xC

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Third Scan Complete: ' .. AoB[0])

--Add 0x8
ScanString = getAddress(AoB[0])
ScanString = ScanString + 0x8

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Fourth Scan Complete: ' .. AoB[0])

-- End of first half.

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

lngt = AoB.getCount() - 1
print(lngt + 1 .. ' Records Found')

for i = 0,lngt do

    local mr = AddressList.createMemoryRecord()
    mr.Description = Cname .. " " .. i
    mr.Type = vtAutoAssembler
    mr.Options = 'moHideChildren'
    mr.appendToEntry(mr_inv)

    local mr_inv2 = AddressList.getMemoryRecordByDescription(Cname .. " " .. i)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "[Template+0000] Base Address"
    mr.Type = vtPointer
    mr.Address = AoB[i]
    mr.appendToEntry(mr_inv2)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local Cname = "Bullet"

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>116976</ID>
                  <Description>"Camera Classes"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>116977</ID>
                      <Description>"Camera"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

-- Set up local Variables
-- String to Search for
local bt = stringToByteTable(".?AVCamera@0TDF@@")
-- Class name. Add into [DISABLED] section as well
local Cname = "Camera"
local ScanString = ""
local lngt = 0

-- The first half does steps outlined in https://framedsc.com/GeneralGuides/using_rtti.htm

for i, v in ipairs(bt) do
    ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('First Scan Complete: ' .. AoB[0])

-- Subtract Module Start Address 0x140000000
-- Subtract 0x10
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0x140000000
ScanString = ScanString - 0x10

-- Scan for the 4 Byte address of result
bt = dwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Second Scan Complete: ' .. AoB[0])

-- Subtract 0xC
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0xC

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Third Scan Complete: ' .. AoB[0])

--Add 0x8
ScanString = getAddress(AoB[0])
ScanString = ScanString + 0x8

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Fourth Scan Complete: ' .. AoB[0])

-- End of first half.

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

lngt = AoB.getCount() - 1
print(lngt + 1 .. ' Records Found')

for i = 0,lngt do

    local mr = AddressList.createMemoryRecord()
    mr.Description = Cname .. " " .. i
    mr.Type = vtAutoAssembler
    mr.Options = 'moHideChildren'
    mr.appendToEntry(mr_inv)

    local mr_inv2 = AddressList.getMemoryRecordByDescription(Cname .. " " .. i)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "[Template+0000] Base Address"
    mr.Type = vtPointer
    mr.Address = AoB[i]
    mr.appendToEntry(mr_inv2)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local Cname = "Camera"

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>116979</ID>
                  <Description>"Effect Classes"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>116978</ID>
                      <Description>"Effect"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

-- Set up local Variables
-- String to Search for
local bt = stringToByteTable(".?AVEffect@0TDF@@")
-- Class name. Add into [DISABLED] section as well
local Cname = "Effect"
local ScanString = ""
local lngt = 0

-- The first half does steps outlined in https://framedsc.com/GeneralGuides/using_rtti.htm

for i, v in ipairs(bt) do
    ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('First Scan Complete: ' .. AoB[0])

-- Subtract Module Start Address 0x140000000
-- Subtract 0x10
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0x140000000
ScanString = ScanString - 0x10

-- Scan for the 4 Byte address of result
bt = dwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Second Scan Complete: ' .. AoB[0])

-- Subtract 0xC
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0xC

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Third Scan Complete: ' .. AoB[0])

--Add 0x8
ScanString = getAddress(AoB[0])
ScanString = ScanString + 0x8

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Fourth Scan Complete: ' .. AoB[0])

-- End of first half.

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

lngt = AoB.getCount() - 1
print(lngt + 1 .. ' Records Found')

for i = 0,lngt do

    local mr = AddressList.createMemoryRecord()
    mr.Description = Cname .. " " .. i
    mr.Type = vtAutoAssembler
    mr.Options = 'moHideChildren'
    mr.appendToEntry(mr_inv)

    local mr_inv2 = AddressList.getMemoryRecordByDescription(Cname .. " " .. i)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "[Template+0000] Base Address"
    mr.Type = vtPointer
    mr.Address = AoB[i]
    mr.appendToEntry(mr_inv2)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local Cname = "Effect"

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>116980</ID>
                  <Description>"SaveData Classes"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>116981</ID>
                      <Description>"SaveData"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

-- Set up local Variables
-- String to Search for
local bt = stringToByteTable(".?AVSaveData@0TDF@@")
-- Class name. Add into [DISABLED] section as well
local Cname = "SaveData"
local ScanString = ""
local lngt = 0

-- The first half does steps outlined in https://framedsc.com/GeneralGuides/using_rtti.htm

for i, v in ipairs(bt) do
    ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('First Scan Complete: ' .. AoB[0])

-- Subtract Module Start Address 0x140000000
-- Subtract 0x10
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0x140000000
ScanString = ScanString - 0x10

-- Scan for the 4 Byte address of result
bt = dwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Second Scan Complete: ' .. AoB[0])

-- Subtract 0xC
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0xC

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Third Scan Complete: ' .. AoB[0])

--Add 0x8
ScanString = getAddress(AoB[0])
ScanString = ScanString + 0x8

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Fourth Scan Complete: ' .. AoB[0])

-- End of first half.

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

lngt = AoB.getCount() - 1
print(lngt + 1 .. ' Records Found')

for i = 0,lngt do

    local mr = AddressList.createMemoryRecord()
    mr.Description = Cname .. " " .. i
    mr.Type = vtAutoAssembler
    mr.Options = 'moHideChildren'
    mr.appendToEntry(mr_inv)

    local mr_inv2 = AddressList.getMemoryRecordByDescription(Cname .. " " .. i)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "[Template+0000] Base Address"
    mr.Type = vtPointer
    mr.Address = AoB[i]
    mr.appendToEntry(mr_inv2)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local Cname = "SaveData"

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>116982</ID>
                  <Description>"Scenario Classes"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>116983</ID>
                      <Description>"Scenario"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

-- Set up local Variables
-- String to Search for
local bt = stringToByteTable(".?AVScenario@0TDF@@")
-- Class name. Add into [DISABLED] section as well
local Cname = "Scenario"
local ScanString = ""
local lngt = 0

-- The first half does steps outlined in https://framedsc.com/GeneralGuides/using_rtti.htm

for i, v in ipairs(bt) do
    ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('First Scan Complete: ' .. AoB[0])

-- Subtract Module Start Address 0x140000000
-- Subtract 0x10
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0x140000000
ScanString = ScanString - 0x10

-- Scan for the 4 Byte address of result
bt = dwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Second Scan Complete: ' .. AoB[0])

-- Subtract 0xC
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0xC

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Third Scan Complete: ' .. AoB[0])

--Add 0x8
ScanString = getAddress(AoB[0])
ScanString = ScanString + 0x8

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Fourth Scan Complete: ' .. AoB[0])

-- End of first half.

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

lngt = AoB.getCount() - 1
print(lngt + 1 .. ' Records Found')

for i = 0,lngt do

    local mr = AddressList.createMemoryRecord()
    mr.Description = Cname .. " " .. i
    mr.Type = vtAutoAssembler
    mr.Options = 'moHideChildren'
    mr.appendToEntry(mr_inv)

    local mr_inv2 = AddressList.getMemoryRecordByDescription(Cname .. " " .. i)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "[Template+0000] Base Address"
    mr.Type = vtPointer
    mr.Address = AoB[i]
    mr.appendToEntry(mr_inv2)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local Cname = "Scenario"

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>116984</ID>
                  <Description>"Target Classes"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>116985</ID>
                      <Description>"Target"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
if syntaxcheck then return end

-- Set up local Variables
-- String to Search for
local bt = stringToByteTable(".?AVTarget@0TDF@@")
-- Class name. Add into [DISABLED] section as well
local Cname = "Target"
local ScanString = ""
local lngt = 0

-- The first half does steps outlined in https://framedsc.com/GeneralGuides/using_rtti.htm

for i, v in ipairs(bt) do
    ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('First Scan Complete: ' .. AoB[0])

-- Subtract Module Start Address 0x140000000
-- Subtract 0x10
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0x140000000
ScanString = ScanString - 0x10

-- Scan for the 4 Byte address of result
bt = dwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Second Scan Complete: ' .. AoB[0])

-- Subtract 0xC
ScanString = getAddress(AoB[0])
ScanString = ScanString - 0xC

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Third Scan Complete: ' .. AoB[0])

--Add 0x8
ScanString = getAddress(AoB[0])
ScanString = ScanString + 0x8

--Scan for the 8 Byte address of the result
bt = qwordToByteTable(ScanString)
ScanString = ""
for i, v in ipairs(bt) do
 ScanString = ScanString .. string.format('%02X',v) .. " "
end

AoB = AOBScan(ScanString)
print('Fourth Scan Complete: ' .. AoB[0])

-- End of first half.

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

lngt = AoB.getCount() - 1
print(lngt + 1 .. ' Records Found')

for i = 0,lngt do

    local mr = AddressList.createMemoryRecord()
    mr.Description = Cname .. " " .. i
    mr.Type = vtAutoAssembler
    mr.Options = 'moHideChildren'
    mr.appendToEntry(mr_inv)

    local mr_inv2 = AddressList.getMemoryRecordByDescription(Cname .. " " .. i)

    local mr = AddressList.createMemoryRecord()
    mr.Description = "[Template+0000] Base Address"
    mr.Type = vtPointer
    mr.Address = AoB[i]
    mr.appendToEntry(mr_inv2)

end
{$asm}


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
if syntaxcheck then return end

local Cname = "Target"

local mr_inv = AddressList.getMemoryRecordByDescription(Cname)

for i = mr_inv.count-1,0,-1 do
    mr_inv.Child[i].delete()
end
{$asm}
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>104</ID>
          <Description>"Depreciated - Use at risk"</Description>
          <Options moHideChildren="1"/>
          <Color>C0C0C0</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>112</ID>
              <Description>"Safe - Not Maintained - May Break"</Description>
              <Options moHideChildren="1"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>116188</ID>
                  <Description>"Battle"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>74</ID>
                      <Description>"Drop Rate Multiplier"</Description>
                      <Options moHideChildren="1"/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : SO6.exe
  Version: 
  Date   : 2022-10-29
  Author : asmor

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(DropRateMultAOB,SO6.exe,89 86 FC 53 07 00) // should be unique
alloc(newmem,$1000,DropRateMultAOB)

label(code)
label(return)
label(DropRateMult)

newmem:

code:
  mov eax,[DropRateMult]  //eax default value is 1
  mov [rsi+000753FC],eax
  mov eax,(float)1  //Set eax back to 1
  jmp return

DropRateMult:
  dd (float)5

DropRateMultAOB:
  jmp newmem
  nop
return:
registersymbol(DropRateMultAOB)
registersymbol(DropRateMult)

[DISABLE]

DropRateMultAOB:
  db 89 86 FC 53 07 00

unregistersymbol(DropRateMultAOB)
unregistersymbol(DropRateMult)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe+173D7C

SO6.exe+173D4B: 41 0F 94 C4           - sete r12l
SO6.exe+173D4F: 44 8A F0              - mov r14l,al
SO6.exe+173D52: 84 C0                 - test al,al
SO6.exe+173D54: 0F 85 86 02 00 00     - jne SO6.exe+173FE0
SO6.exe+173D5A: 44 38 B6 75 14 00 00  - cmp [rsi+00001475],r14l
SO6.exe+173D61: 0F 85 6E 03 00 00     - jne SO6.exe+1740D5
SO6.exe+173D67: 44 88 A6 76 14 00 00  - mov [rsi+00001476],r12l
SO6.exe+173D6E: 48 85 DB              - test rbx,rbx
SO6.exe+173D71: 0F 85 22 01 00 00     - jne SO6.exe+173E99
SO6.exe+173D77: B8 00 00 80 3F        - mov eax,3F800000
// ---------- INJECTING HERE ----------
SO6.exe+173D7C: 89 86 FC 53 07 00     - mov [rsi+000753FC],eax
// ---------- DONE INJECTING  ----------
SO6.exe+173D82: 89 86 00 54 07 00     - mov [rsi+00075400],eax
SO6.exe+173D88: 89 86 04 54 07 00     - mov [rsi+00075404],eax
SO6.exe+173D8E: 44 38 AE F0 16 00 00  - cmp [rsi+000016F0],r13l
SO6.exe+173D95: 0F 85 D4 02 00 00     - jne SO6.exe+17406F
SO6.exe+173D9B: 48 8B 86 C8 14 00 00  - mov rax,[rsi+000014C8]
SO6.exe+173DA2: 48 39 86 C0 14 00 00  - cmp [rsi+000014C0],rax
SO6.exe+173DA9: 0F 85 E7 02 00 00     - jne SO6.exe+174096
SO6.exe+173DAF: E8 44 04 00 00        - call SO6.exe+1741F8
SO6.exe+173DB4: 0F 28 D0              - movaps xmm2,xmm0
SO6.exe+173DB7: 44 38 AE 0C 54 07 00  - cmp [rsi+0007540C],r13l
}
</AssemblerScript>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>69</ID>
                          <Description>"Multiplier"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>DropRateMult</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>72</ID>
                      <Description>"Fol Multiplier"</Description>
                      <Options moHideChildren="1"/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : SO6.exe
  Version: 
  Date   : 2022-10-29
  Author : asmor

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(FolMultAOB,SO6.exe,41 03 C6 0F 49 F8) // should be unique
alloc(newmem,$1000,FolMultAOB)

label(code)
label(return)
label(FolMult)

newmem:

code:
  imul r14d,[FolMult]
  add eax,r14d
  cmovns edi,eax
  jmp return

FolMult:
  db 05

FolMultAOB:
  jmp newmem
  nop
return:
registersymbol(FolMultAOB)
registersymbol(FolMult)

[DISABLE]

FolMultAOB:
  db 41 03 C6 0F 49 F8

unregistersymbol(FolMultAOB)
unregistersymbol(FolMult)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe+39F4FA

SO6.exe+39F4D4: 48 8B D7           - mov rdx,rdi
SO6.exe+39F4D7: 48 8D 4C 24 30     - lea rcx,[rsp+30]
SO6.exe+39F4DC: E8 8F 60 E1 FF     - call SO6.exe+1B5570
SO6.exe+39F4E1: 84 C0              - test al,al
SO6.exe+39F4E3: 0F 84 9A 00 00 00  - je SO6.exe+39F583
SO6.exe+39F4E9: 48 8D 54 24 20     - lea rdx,[rsp+20]
SO6.exe+39F4EE: 48 8B CE           - mov rcx,rsi
SO6.exe+39F4F1: E8 4A 13 E1 FF     - call SO6.exe+1B0840
SO6.exe+39F4F6: 8B 00              - mov eax,[rax]
SO6.exe+39F4F8: 8B FB              - mov edi,ebx
// ---------- INJECTING HERE ----------
SO6.exe+39F4FA: 41 03 C6           - add eax,r14d
// ---------- DONE INJECTING  ----------
SO6.exe+39F4FD: 0F 49 F8           - cmovns edi,eax
SO6.exe+39F500: 48 8D 4C 24 38     - lea rcx,[rsp+38]
SO6.exe+39F505: E8 EA B0 EB FF     - call SO6.exe+25A5F4
SO6.exe+39F50A: 84 C0              - test al,al
SO6.exe+39F50C: 0F 84 5A 59 6B 00  - je SO6.exe+A54E6C
SO6.exe+39F512: 48 8D 4C 24 38     - lea rcx,[rsp+38]
SO6.exe+39F517: E8 8C 4E DB FF     - call SO6.exe+1543A8
SO6.exe+39F51C: 8D 53 1A           - lea edx,[rbx+1A]
SO6.exe+39F51F: 48 8B C8           - mov rcx,rax
SO6.exe+39F522: E8 AD 80 DD FF     - call SO6.exe+1775D4
}
</AssemblerScript>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>58</ID>
                          <Description>"Multiplier"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>FolMult</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>65</ID>
                      <Description>"Exp Multiplier"</Description>
                      <Options moHideChildren="1"/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : SO6.exe (paused)
  Version: 
  Date   : 2022-10-29
  Author : asmor

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(ExpMultAOB,SO6.exe,03 9F F8 01 00 00) // should be unique
alloc(newmem,$1000,ExpMultAOB)

label(code)
label(return)
label(ExpMult)

newmem:

code:
  imul ebx,[ExpMult]
  add ebx,[rdi+000001F8]
  jmp return

ExpMult:
  db 05

ExpMultAOB:
  jmp newmem
  nop
return:
registersymbol(ExpMultAOB)
registersymbol(ExpMult)

[DISABLE]

ExpMultAOB:
  db 03 9F F8 01 00 00

unregistersymbol(ExpMultAOB)
unregistersymbol(ExpMult)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe+24E687

SO6.exe+24E665: 4C 8D B1 D0 05 00 00  - lea r14,[rcx+000005D0]
SO6.exe+24E66C: 48 8B F9              - mov rdi,rcx
SO6.exe+24E66F: 49 8B CE              - mov rcx,r14
SO6.exe+24E672: 8B DA                 - mov ebx,edx
SO6.exe+24E674: 33 F6                 - xor esi,esi
SO6.exe+24E676: E8 E1 3D E6 FF        - call SO6.exe+B245C
SO6.exe+24E67B: 48 85 C0              - test rax,rax
SO6.exe+24E67E: 74 48                 - je SO6.exe+24E6C8
SO6.exe+24E680: 44 8B 7F 24           - mov r15d,[rdi+24]
SO6.exe+24E684: 45 32 E4              - xor r12l,r12l
// ---------- INJECTING HERE ----------
SO6.exe+24E687: 03 9F F8 01 00 00     - add ebx,[rdi+000001F8]
// ---------- DONE INJECTING  ----------
SO6.exe+24E68D: 49 8B CE              - mov rcx,r14
SO6.exe+24E690: 44 88 64 24 70        - mov [rsp+70],r12l
SO6.exe+24E695: E8 C2 3D E6 FF        - call SO6.exe+B245C
SO6.exe+24E69A: 44 8D 6E 08           - lea r13d,[rsi+08]
SO6.exe+24E69E: 48 8B C8              - mov rcx,rax
SO6.exe+24E6A1: 41 8B D5              - mov edx,r13d
SO6.exe+24E6A4: E8 73 59 54 00        - call SO6.LZ4_versionString+8FBC
SO6.exe+24E6A9: 41 8D 4F FF           - lea ecx,[r15-01]
SO6.exe+24E6AD: 8B 6C 88 04           - mov ebp,[rax+rcx*4+04]
SO6.exe+24E6B1: 85 ED                 - test ebp,ebp
}
</AssemblerScript>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>66</ID>
                          <Description>"Multiplier"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>ExpMult</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>116187</ID>
                  <Description>"Es'owa"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>53</ID>
                      <Description>"Auto Win"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{ Game   : SO6.exe
  Author : Anon-9

  This script attempts to win quickly in minigame.

  Use with permission.
}

[ENABLE]

aobscanmodule(fFastWinEo,SO6.exe,44 29 4A 6C 8B 42 6C) // should be unique


fFastWinEo:
  xor eax,eax
  mov [rdx+6C],ax
  nop
  //sub [rdx+6C],r9d
  //mov eax,[rdx+6C]
registersymbol(fFastWinEo)

[DISABLE]

fFastWinEo:
  db 44 29 4A 6C 8B 42 6C

unregistersymbol(fFastWinEo)
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>113</ID>
              <Description>"Dangerous - For Reference Only"</Description>
              <Options moHideChildren="1"/>
              <Color>0000FF</Color>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>70</ID>
                  <Description>"Limit Max Items"</Description>
                  <Options moHideChildren="1"/>
                  <Color>0000FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : SO6.exe
  Version: 
  Date   : 2022-10-29
  Author : asmor

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(ItemLimitAOB,SO6.exe,48 63 F0 4C 3B EE) // should be unique
alloc(newmem,$1000,ItemLimitAOB)

label(code)
label(return)
label(ItemLimit)

newmem:

code:
  movsxd  rsi,eax
  cmp rsi,#20
  jne @f   //if the item's natural limit is not 20; skip
  mov rsi,[ItemLimit]
@@:
  cmp r13,rsi
  jmp return

ItemLimit:
  db #19

ItemLimitAOB:
  jmp newmem
  nop
return:
registersymbol(ItemLimitAOB)
registersymbol(ItemLimit)

[DISABLE]

ItemLimitAOB:
  db 48 63 F0 4C 3B EE

unregistersymbol(ItemLimitAOB)
unregistersymbol(ItemLimit)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe+259CAE

SO6.exe+259C89: EB D5              - jmp SO6.exe+259C60
SO6.exe+259C8B: 48 8B CF           - mov rcx,rdi
SO6.exe+259C8E: E8 41 D1 23 00     - call SO6.exe+496DD4
SO6.exe+259C93: 84 C0              - test al,al
SO6.exe+259C95: 0F 84 ED DB 79 00  - je SO6.exe+9F7888
SO6.exe+259C9B: 48 63 47 30        - movsxd  rax,dword ptr [rdi+30]
SO6.exe+259C9F: 4C 8B E0           - mov r12,rax
SO6.exe+259CA2: 4C 8D 2C 18        - lea r13,[rax+rbx]
SO6.exe+259CA6: 48 8B CF           - mov rcx,rdi
SO6.exe+259CA9: E8 0A 59 14 00     - call SO6.exe+39F5B8
// ---------- INJECTING HERE ----------
SO6.exe+259CAE: 48 63 F0           - movsxd  rsi,eax
// ---------- DONE INJECTING  ----------
SO6.exe+259CB1: 4C 3B EE           - cmp r13,rsi
SO6.exe+259CB4: 0F 86 BA 00 00 00  - jbe SO6.exe+259D74
SO6.exe+259CBA: 85 DB              - test ebx,ebx
SO6.exe+259CBC: 0F 8E B2 00 00 00  - jng SO6.exe+259D74
SO6.exe+259CC2: 4D 8B F5           - mov r14,r13
SO6.exe+259CC5: 4C 2B F6           - sub r14,rsi
SO6.exe+259CC8: 80 7C 24 40 00     - cmp byte ptr [rsp+40],00
SO6.exe+259CCD: 0F 84 54 DD 79 00  - je SO6.exe+9F7A27
SO6.exe+259CD3: 8A 85 C8 01 00 00  - mov al,[rbp+000001C8]
SO6.exe+259CD9: 88 44 24 20        - mov [rsp+20],al
}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>8</ID>
                      <Description>"Max"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>4 Bytes</VariableType>
                      <Address>ItemLimit</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>115808</ID>
                  <Description>"No Food Decrease"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{  Game Executable   : SO6.exe
   Author            : Tuuup!
   Executable Version: 1.0.0.0
   Script Date       : 2022-10-29

   Used with permission.
}
[ENABLE]
aobscanmodule(Foodstuff,SO6.exe,E8????????E9????????CC488B05)
registersymbol(Foodstuff Foodstuffbkp)
alloc(Foodstuffbkp,5,Foodstuff)

Foodstuffbkp:
readmem(Foodstuff,5)

Foodstuff:
  nop 5

[DISABLE]
Foodstuff:
 // db E8 2E FF 12 00
readmem(Foodstuffbkp,5)
unregistersymbol(*)
dealloc(*)

{
// ORIGINAL CODE - INJECTION POINT: SO6.exe.xtext+1731ED

SO6.exe.xtext+173157: 4C 8D 3D 42 B2 40 01           - lea r15,[SO6.exe.sbss+693A0]
SO6.exe.xtext+17315E: 48 8B 3D C3 2A 3C 02           - mov rdi,[SO6.exe+2536C28]
SO6.exe.xtext+173165: 48 8D 4C 24 40                 - lea rcx,[rsp+40]
SO6.exe.xtext+17316A: 4C 89 7C 24 40                 - mov [rsp+40],r15
SO6.exe.xtext+17316F: 49 3B C0                       - cmp rax,r8
SO6.exe.xtext+173172: 0F 85 71 6B 85 00              - jne SO6.exe.xtext+9C9CE9
SO6.exe.xtext+173178: 48 B8 6B 1A B2 59 3C 33 C9 4A  - mov rax,4AC9333C59B21A6B
SO6.exe.xtext+173182: 48 89 44 24 48                 - mov [rsp+48],rax
SO6.exe.xtext+173187: E8 A8 4D 35 00                 - call SO6.exe.xtext+4C7F34
SO6.exe.xtext+17318C: BA 08 00 00 00                 - mov edx,00000008
SO6.exe.xtext+173191: 48 8B C8                       - mov rcx,rax
SO6.exe.xtext+173194: E8 83 FE 61 00                 - call SO6.LZ4_versionString+8FBC
SO6.exe.xtext+173199: 4C 8D 48 04                    - lea r9,[rax+04]
SO6.exe.xtext+17319D: 48 8D 44 24 60                 - lea rax,[rsp+60]
SO6.exe.xtext+1731A2: 48 89 44 24 20                 - mov [rsp+20],rax
SO6.exe.xtext+1731A7: 41 B8 04 00 00 00              - mov r8d,00000004
SO6.exe.xtext+1731AD: 48 8D 54 24 30                 - lea rdx,[rsp+30]
SO6.exe.xtext+1731B2: 48 8B CF                       - mov rcx,rdi
SO6.exe.xtext+1731B5: E8 CE FB 12 00                 - call SO6.exe.xtext+2A2D88
SO6.exe.xtext+1731BA: 48 8B 96 B0 54 07 00           - mov rdx,[rsi+000754B0]
SO6.exe.xtext+1731C1: 48 8B 08                       - mov rcx,[rax]
SO6.exe.xtext+1731C4: 48 89 8E B0 54 07 00           - mov [rsi+000754B0],rcx
SO6.exe.xtext+1731CB: 48 89 10                       - mov [rax],rdx
SO6.exe.xtext+1731CE: 48 8B 4C 24 30                 - mov rcx,[rsp+30]
SO6.exe.xtext+1731D3: 48 85 C9                       - test rcx,rcx
SO6.exe.xtext+1731D6: 74 06                          - je SO6.exe.xtext+1731DE
SO6.exe.xtext+1731D8: E8 DB 6D F9 FF                 - call SO6.exe.xtext+109FB8
SO6.exe.xtext+1731DD: 90                             - nop 
SO6.exe.xtext+1731DE: E9 DD 6A 85 00                 - jmp SO6.exe.xtext+9C9CC0
SO6.exe.xtext+1731E3: C7 86 A0 14 00 00 00 00 34 43  - mov [rsi+000014A0],43340000
// ---------- INJECTING HERE ----------
SO6.exe.xtext+1731ED: E8 2E FF 12 00                 - call SO6.exe.xtext+2A3120
// ---------- DONE INJECTING  ----------
SO6.exe.xtext+1731F2: E9 70 FB FF FF                 - jmp SO6.exe.xtext+172D67
SO6.exe.xtext+1731F7: CC                             - int 3 
SO6.exe.xtext+1731F8: 48 8B 05 29 FB 30 02           - mov rax,[SO6.exe+2483D28]
SO6.exe.xtext+1731FF: F6 80 D0 54 07 00 40           - test byte ptr [rax+000754D0],40
SO6.exe.xtext+173206: 75 10                          - jne SO6.exe.xtext+173218
SO6.exe.xtext+173208: 48 8B 05 91 22 3C 02           - mov rax,[SO6.exe+25364A0]
SO6.exe.xtext+17320F: F3 0F 10 80 C4 01 00 00        - movss xmm0,[rax+000001C4]
SO6.exe.xtext+173217: C3                             - ret 
SO6.exe.xtext+173218: 0F 57 C0                       - xorps xmm0,xmm0
SO6.exe.xtext+17321B: C3                             - ret 
SO6.exe.xtext+17321C: 48 83 EC 28                    - sub rsp,28
SO6.exe.xtext+173220: 8B 81 18 01 00 00              - mov eax,[rcx+00000118]
SO6.exe.xtext+173226: 83 E8 08                       - sub eax,08
SO6.exe.xtext+173229: 83 F8 01                       - cmp eax,01
SO6.exe.xtext+17322C: 77 3B                          - ja SO6.exe.xtext+173269
SO6.exe.xtext+17322E: 48 8B 05 3B 0E 31 02           - mov rax,[SO6.exe+2485070]
SO6.exe.xtext+173235: 80 B8 41 04 00 00 00           - cmp byte ptr [rax+00000441],00
SO6.exe.xtext+17323C: 74 2B                          - je SO6.exe.xtext+173269
SO6.exe.xtext+17323E: 8B 90 30 05 00 00              - mov edx,[rax+00000530]
SO6.exe.xtext+173244: 8B 80 48 04 00 00              - mov eax,[rax+00000448]
SO6.exe.xtext+17324A: 66 0F 6E C2                    - movd xmm0,edx
SO6.exe.xtext+17324E: 66 0F 6E C8                    - movd xmm1,eax
SO6.exe.xtext+173252: 0F 5B C9                       - cvtdq2ps xmm1,xmm1
SO6.exe.xtext+173255: 0F 5B C0                       - cvtdq2ps xmm0,xmm0
SO6.exe.xtext+173258: F3 0F 5E C8                    - divss xmm1,xmm0
SO6.exe.xtext+17325C: F3 0F 59 0D 4C 5B 4D 01        - mulss xmm1,[SO6.exe.sbss+133DB0]
SO6.exe.xtext+173264: E8 CB 3A 0E 00                 - call SO6.exe.xtext+256D34
SO6.exe.xtext+173269: 48 83 C4 28                    - add rsp,28
SO6.exe.xtext+17326D: C3                             - ret 
SO6.exe.xtext+17326E: CC                             - int 3 
}
</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>SO6_MaxItems</Name>
      <Address>FFFFFFFFFE4DB0CD</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
